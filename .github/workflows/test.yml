name: "Test :: All"

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  check-changes:
    name: "Check Changes"
    runs-on: ubuntu-latest
    permissions: read-all
    outputs:
      core: ${{ steps.changes.outputs.core }}
      deployer_k8s: ${{ steps.changes.outputs.deployer_k8s }}
      plugin_kafka_io: ${{ steps.changes.outputs.plugin_kafka_io }}
      plugin_rmq_io: ${{ steps.changes.outputs.plugin_rmq_io }}
      sniffer: ${{ steps.changes.outputs.sniffer }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            core:
              - ".github/workflows/test.yml"
              - "core/pyproject.toml"
              - "core/src/**"
              - "core/test/**"
            deployer_k8s:
              - ".github/workflows/test.yml"
              - "core/src/**"
              - "deployers/k8s/pyproject.toml"
              - "deployers/k8s/src/**"
              - "deployers/k8s/test/**"
            plugin_kafka_io:
              - ".github/workflows/test.yml"
              - "core/src/**"
              - "plugins/kafka_io/pyproject.toml"
              - "plugins/kafka_io/src/**"
              - "plugins/kafka_io/test/**"
            plugin_rmq_io:
              - ".github/workflows/test.yml"
              - "core/src/**"
              - "plugins/rmq_io/pyproject.toml"
              - "plugins/rmq_io/src/**"
              - "plugins/rmq_io/test/**"
            sniffer:
              - ".github/workflows/test.yml"
              - "core/src/**"
              - "sniffer/pyproject.toml"
              - "sniffer/src/**"
              - "sniffer/test/**"

  core:
    name: "Core"
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.core == 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        python -m pip install coverage
        python -m pip install -e core/
    - name: Test
      run: |
        coverage run -m unittest discover core/test -p "*.py"
    - name: Create Coverage Report
      run: |
        coverage xml
    - name: Code Coverage Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

  deployer_k8s:
    name: "Deployer :: Kubernetes"
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.deployer_k8s == 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        python -m pip install coverage
        python -m pip install -e core/
        python -m pip install -e deployers/k8s/
    - name: Create k8s Kind Cluster
      uses: helm/kind-action@v1.5.0
      with:
        cluster_name: "kind"
    - name: Waiting
      run: sleep 5
    - name: Build Test Image
      run: docker build -t pypz-test-image deployers/k8s/test/resources
    - name: Load Test Image
      run: kind load docker-image pypz-test-image
    - name: Test
      run: coverage run -m unittest discover deployers/k8s/test -p "*.py"

  plugin_kafka_io:
    name: "Plugin :: Kafka IO"
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.plugin_kafka_io == 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        python -m pip install coverage
        python -m pip install -e core/
        python -m pip install -e plugins/kafka_io/
    - name: Start Local Kafka Cluster
      run: docker run -d -it --rm -p 9092:9092 confluentinc/confluent-local:7.5.3
    - name: Waiting
      run: sleep 5
    - name: Test
      run: coverage run -m unittest discover plugins/kafka_io/test -p "*.py"

  plugin_rmq_io:
    name: "Plugin :: RabbitMQ IO"
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.plugin_rmq_io == 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        python -m pip install coverage
        python -m pip install -e core/
        python -m pip install -e plugins/rmq_io/
    - name: Start Local RabbitMQ
      run: |
        echo "[rabbitmq_amqp1_0,rabbitmq_management,rabbitmq_stream]." > "${{ github.workspace }}/enabled_plugins"
        docker run -d -it --rm --name rabbitmq --hostname localhost -p 5672:5672 \
          -v "${{ github.workspace }}/enabled_plugins":/etc/rabbitmq/enabled_plugins \
          rabbitmq:3-management
    - name: Waiting
      run: sleep 5
    - name: Test
      run: coverage run -m unittest discover plugins/rmq_io/test -p "*.py"

  sniffer:
    name: "Sniffer"
    needs: check-changes
    runs-on: ubuntu-latest
    if: needs.check-changes.outputs.sniffer == 'true'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    - name: Install
      run: |
        python -m pip install --upgrade pip
        python -m pip install pyyaml
        python -m pip install coverage
        python -m pip install -e core/
        python -m pip install -e sniffer/
    - name: Test
      run: coverage run -m unittest discover sniffer/test -p "*.py"