<?xml-stylesheet type="text/xsl" href="../../../../../mypy-html.xslt"?><mypy-report-file name="sniffer\src\pypz\sniffer\utils.py" module="sniffer.src.pypz.sniffer.utils"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.specs.operator import Operator" number="16" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.pipeline import Pipeline" number="17" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.plugin import OutputPortPlugin" number="18" precision="any"/><line any_info="No Anys on this line!" content="" number="19" precision="empty"/><line any_info="No Anys on this line!" content="" number="20" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="def is_sublist(subset: list, target_list: list) -&gt; bool:" number="21" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    if (not subset) or (0 == len(subset)):" number="22" precision="imprecise"/><line any_info="No Anys on this line!" content="        return True" number="23" precision="precise"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="    subset_len = len(subset)" number="25" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="    target_len = len(target_list)" number="26" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="27" precision="empty"/><line any_info="No Anys on this line!" content="    if subset_len &gt; target_len:" number="28" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="29" precision="precise"/><line any_info="No Anys on this line!" content="" number="30" precision="empty"/><line any_info="No Anys on this line!" content="    for i in range(target_len - subset_len + 1):" number="31" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        if target_list[i:i + subset_len] == subset:" number="32" precision="imprecise"/><line any_info="No Anys on this line!" content="            return True" number="33" precision="precise"/><line any_info="No Anys on this line!" content="" number="34" precision="empty"/><line any_info="No Anys on this line!" content="    return False" number="35" precision="precise"/><line any_info="No Anys on this line!" content="" number="36" precision="empty"/><line any_info="No Anys on this line!" content="" number="37" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="def retrieve_operator_paths(operator: Operator, visited: set[Operator] = None) -&gt; list[list[Operator]]:" number="38" precision="any"/><line any_info="No Anys on this line!" content="    result_paths = []" number="39" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="    visited = {operator} if visited is None else visited" number="40" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="    for plugin in operator.get_protected().get_nested_instances().values():" number="41" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        if isinstance(plugin, OutputPortPlugin):" number="42" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="            for input_port in plugin.get_connected_ports():" number="43" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="                if input_port.get_context() not in visited:" number="44" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                    result_paths.extend([[operator] + retrieved_path" number="45" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                                         for retrieved_path in" number="46" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="                                         retrieve_operator_paths(input_port.get_context(), visited)])" number="47" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    return result_paths if 0 &lt; len(result_paths) else [[operator]]" number="48" precision="any"/><line any_info="No Anys on this line!" content="" number="49" precision="empty"/><line any_info="No Anys on this line!" content="" number="50" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="def order_operators_by_connections(pipeline: Pipeline) -&gt; list[set[Operator]]:" number="51" precision="any"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="52" precision="empty"/><line any_info="No Anys on this line!" content="    This function attempts to order the operators along their connections. Consider" number="53" precision="empty"/><line any_info="No Anys on this line!" content="    the following example with connection directions from top to bottom:" number="54" precision="empty"/><line any_info="No Anys on this line!" content="" number="55" precision="empty"/><line any_info="No Anys on this line!" content="    ::" number="56" precision="empty"/><line any_info="No Anys on this line!" content="       | A   B |" number="57" precision="empty"/><line any_info="No Anys on this line!" content="       |  \ /  |" number="58" precision="empty"/><line any_info="No Anys on this line!" content="       |   C   |" number="59" precision="empty"/><line any_info="No Anys on this line!" content="       |  / \  |" number="60" precision="empty"/><line any_info="No Anys on this line!" content="       | D   E |" number="61" precision="empty"/><line any_info="No Anys on this line!" content="       | |  /  |" number="62" precision="empty"/><line any_info="No Anys on this line!" content="       | F /   |" number="63" precision="empty"/><line any_info="No Anys on this line!" content="       | |/    |" number="64" precision="empty"/><line any_info="No Anys on this line!" content="       | G     |" number="65" precision="empty"/><line any_info="No Anys on this line!" content="" number="66" precision="empty"/><line any_info="No Anys on this line!" content="    Dependencies can be expressed along the connections. The expected result from this" number="67" precision="empty"/><line any_info="No Anys on this line!" content="    function orders these dependencies into list of sets, where the list represents" number="68" precision="empty"/><line any_info="No Anys on this line!" content="    the dependency levels and the set the independent operators on each level." number="69" precision="empty"/><line any_info="No Anys on this line!" content="    Expected result for the example:" number="70" precision="empty"/><line any_info="No Anys on this line!" content="" number="71" precision="empty"/><line any_info="No Anys on this line!" content="    ::" number="72" precision="empty"/><line any_info="No Anys on this line!" content="" number="73" precision="empty"/><line any_info="No Anys on this line!" content="       [0] - {A,B}" number="74" precision="empty"/><line any_info="No Anys on this line!" content="       [1] - {C}" number="75" precision="empty"/><line any_info="No Anys on this line!" content="       [2] - {D,E}" number="76" precision="empty"/><line any_info="No Anys on this line!" content="       [3] - {F}" number="77" precision="empty"/><line any_info="No Anys on this line!" content="       [4] - {G}" number="78" precision="empty"/><line any_info="No Anys on this line!" content="" number="79" precision="empty"/><line any_info="No Anys on this line!" content="    This information can then be used amongst more to draw the operators in the proper" number="80" precision="empty"/><line any_info="No Anys on this line!" content="    order and position to visualize their connections." number="81" precision="empty"/><line any_info="No Anys on this line!" content="    Note that this method is capable to handle circular dependencies." number="82" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="83" precision="empty"/><line any_info="No Anys on this line!" content="" number="84" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="    paths = list()" number="85" precision="precise"/><line any_info="No Anys on this line!" content="    # Step 1)" number="86" precision="empty"/><line any_info="No Anys on this line!" content="    # Extracting the paths. Using the example in the docs, the expected result:" number="87" precision="empty"/><line any_info="No Anys on this line!" content="    # [0] - [A, C, D, F, G]" number="88" precision="empty"/><line any_info="No Anys on this line!" content="    # [1] - [A, C, E, G]" number="89" precision="empty"/><line any_info="No Anys on this line!" content="    # [2] - [B, C, E, G]" number="90" precision="empty"/><line any_info="No Anys on this line!" content="    # [3] - [B, C, D, F, G]" number="91" precision="empty"/><line any_info="No Anys on this line!" content="    # =========================================================================" number="92" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="    for operator in pipeline.get_protected().get_nested_instances().values():" number="93" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)&#10;Unannotated (x3)" content="        if operator.is_principal() and (not any([operator in path for path in paths])):" number="94" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x7)" content="            paths.extend(retrieve_operator_paths(operator))" number="95" precision="any"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="No Anys on this line!" content="    # Step 2)" number="97" precision="empty"/><line any_info="No Anys on this line!" content="    # Removing all paths that are sublist of any other paths. This is necessary," number="98" precision="empty"/><line any_info="No Anys on this line!" content="    # because we don't have control over, in which order the operators are stored" number="99" precision="empty"/><line any_info="No Anys on this line!" content="    # and iterated over, so there can be a situation, where the previous step" number="100" precision="empty"/><line any_info="No Anys on this line!" content="    # produces something like this:" number="101" precision="empty"/><line any_info="No Anys on this line!" content="    # [0] - [E, G]" number="102" precision="empty"/><line any_info="No Anys on this line!" content="    # [1] - [C, E, G]" number="103" precision="empty"/><line any_info="No Anys on this line!" content="    # [2] - [A, C, E, G]" number="104" precision="empty"/><line any_info="No Anys on this line!" content="    # The first 2 is sub-path of the 3. therefore shall be removed." number="105" precision="empty"/><line any_info="No Anys on this line!" content="    # ============================================================================" number="106" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="    cleaned_paths = [path for path in paths" number="107" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x6)&#10;Omitted Generics (x2)" content="                     if not any([is_sublist(path, target_path) and (path != target_path) for target_path in paths])]" number="108" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="109" precision="empty"/><line any_info="No Anys on this line!" content="    # Step 3)" number="110" precision="empty"/><line any_info="No Anys on this line!" content="    # Converting path into list of sets. Using the example in the docs, the expected result:" number="111" precision="empty"/><line any_info="No Anys on this line!" content="    # [0] -&gt; {A, B}" number="112" precision="empty"/><line any_info="No Anys on this line!" content="    # [1] -&gt; {C}" number="113" precision="empty"/><line any_info="No Anys on this line!" content="    # [2] -&gt; {D, E}" number="114" precision="empty"/><line any_info="No Anys on this line!" content="    # [3] -&gt; {F, G}" number="115" precision="empty"/><line any_info="No Anys on this line!" content="    # [4] -&gt; {G}" number="116" precision="empty"/><line any_info="No Anys on this line!" content="    # =======================================================================================" number="117" precision="empty"/><line any_info="No Anys on this line!" content="    dependency_levels = []" number="118" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="    for path in cleaned_paths:" number="119" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="        for idx, node in enumerate(path):" number="120" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            if idx == len(dependency_levels):" number="121" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Omitted Generics (x3)" content="                dependency_levels.append(set())" number="122" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="            dependency_levels[idx].add(node)" number="123" precision="any"/><line any_info="No Anys on this line!" content="" number="124" precision="empty"/><line any_info="No Anys on this line!" content="    # Step 4)" number="125" precision="empty"/><line any_info="No Anys on this line!" content="    # We need to make sure that each operator is represented only once in the ordered list. The rule" number="126" precision="empty"/><line any_info="No Anys on this line!" content="    # is that we start to iterate from the end of the list and the first one of the duplicates found" number="127" precision="empty"/><line any_info="No Anys on this line!" content="    # survives, the rest shall be removed." number="128" precision="empty"/><line any_info="No Anys on this line!" content="    # Using the example results from step 3), the expected result is:" number="129" precision="empty"/><line any_info="No Anys on this line!" content="    # [0] -&gt; {A, B}" number="130" precision="empty"/><line any_info="No Anys on this line!" content="    # [1] -&gt; {C}" number="131" precision="empty"/><line any_info="No Anys on this line!" content="    # [2] -&gt; {D, E}" number="132" precision="empty"/><line any_info="No Anys on this line!" content="    # [3] -&gt; {F}" number="133" precision="empty"/><line any_info="No Anys on this line!" content="    # [4] -&gt; {G}" number="134" precision="empty"/><line any_info="No Anys on this line!" content="    # Notice that G has been removed from [3], because it has been found on [4]" number="135" precision="empty"/><line any_info="No Anys on this line!" content="    # ================================================================================================" number="136" precision="empty"/><line any_info="No Anys on this line!" content="" number="137" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="    found = set()" number="138" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    for dependency_level in dependency_levels:" number="139" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        set_copy = dependency_level.copy()" number="140" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x1)" content="        for operator in set_copy:" number="141" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x1)" content="            if operator not in found:" number="142" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                found.add(operator)" number="143" precision="any"/><line any_info="No Anys on this line!" content="            else:" number="144" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="                dependency_level.remove(operator)" number="145" precision="any"/><line any_info="No Anys on this line!" content="" number="146" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    return dependency_levels" number="147" precision="imprecise"/></mypy-report-file>