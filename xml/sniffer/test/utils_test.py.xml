<?xml-stylesheet type="text/xsl" href="../../../mypy-html.xslt"?><mypy-report-file name="sniffer\test\utils_test.py" module="sniffer.test.utils_test"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import unittest" number="16" precision="precise"/><line any_info="No Anys on this line!" content="" number="17" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.sniffer.utils import retrieve_operator_paths, is_sublist, order_operators_by_connections" number="18" precision="any"/><line any_info="No Anys on this line!" content="from sniffer.test.resources import TestPipelineWithSimpleConnections, TestPipelineWithBranchingConnections, \" number="19" precision="precise"/><line any_info="No Anys on this line!" content="    TestPipelineWithCircularDependentOperators, TestPipelineWithMergingConnections, \" number="20" precision="empty"/><line any_info="No Anys on this line!" content="    TestPipelineWithBranchingAndMergingConnections, TestPipelineWithBranchingAndMergingConnectionsWithMultipleOutputs, \" number="21" precision="empty"/><line any_info="No Anys on this line!" content="    TestPipelineWithBranchingAndMergingConnectionsWithAdditionalOutputs" number="22" precision="empty"/><line any_info="No Anys on this line!" content="" number="23" precision="empty"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="No Anys on this line!" content="class GraphResolutionTest(unittest.TestCase):" number="25" precision="precise"/><line any_info="No Anys on this line!" content="" number="26" precision="empty"/><line any_info="No Anys on this line!" content="    def test_is_sublist_cases(self):" number="27" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([], []))" number="28" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([], [0]))" number="29" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([0], [0]))" number="30" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([0], [0, 1, 2, 3, 4]))" number="31" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([0, 1], [0, 1, 2, 3, 4]))" number="32" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([0, 1, 2], [0, 1, 2, 3, 4]))" number="33" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([0, 1, 2, 3], [0, 1, 2, 3, 4]))" number="34" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([0, 1, 2, 3, 4], [0, 1, 2, 3, 4]))" number="35" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([4], [0, 1, 2, 3, 4]))" number="36" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([3, 4], [0, 1, 2, 3, 4]))" number="37" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([0, 1, 2, 3, 4], [0, 1, 2, 3, 4]))" number="38" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([2, 3, 4], [0, 1, 2, 3, 4]))" number="39" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_sublist([1, 2, 3, 4], [0, 1, 2, 3, 4]))" number="40" precision="any"/><line any_info="No Anys on this line!" content="" number="41" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_sublist([0], []))" number="42" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_sublist([0, 1], [0]))" number="43" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_sublist([0, 0], [0, 1, 2, 3, 4]))" number="44" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_sublist([0, 2], [0, 1, 2, 3, 4]))" number="45" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_sublist([4, 3], [0, 1, 2, 3, 4]))" number="46" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_sublist([&quot;3&quot;, &quot;4&quot;], [0, 1, 2, 3, 4]))" number="47" precision="any"/><line any_info="No Anys on this line!" content="" number="48" precision="empty"/><line any_info="No Anys on this line!" content="    def test_path_retrieval_with_normal_pipeline(self):" number="49" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithSimpleConnections(&quot;pipeline&quot;)" number="50" precision="any"/><line any_info="No Anys on this line!" content="" number="51" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_a)" number="52" precision="any"/><line any_info="No Anys on this line!" content="" number="53" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="54" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(4, len(path[0]))" number="55" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x12)" content="        self.assertEqual([pipeline.op_a, pipeline.op_b, pipeline.op_c, pipeline.op_d], path[0])" number="56" precision="any"/><line any_info="No Anys on this line!" content="" number="57" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_b)" number="58" precision="any"/><line any_info="No Anys on this line!" content="" number="59" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="60" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(3, len(path[0]))" number="61" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual([pipeline.op_b, pipeline.op_c, pipeline.op_d], path[0])" number="62" precision="any"/><line any_info="No Anys on this line!" content="" number="63" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_c)" number="64" precision="any"/><line any_info="No Anys on this line!" content="" number="65" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="66" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(path[0]))" number="67" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual([pipeline.op_c, pipeline.op_d], path[0])" number="68" precision="any"/><line any_info="No Anys on this line!" content="" number="69" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_d)" number="70" precision="any"/><line any_info="No Anys on this line!" content="" number="71" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="72" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(path[0]))" number="73" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual([pipeline.op_d], path[0])" number="74" precision="any"/><line any_info="No Anys on this line!" content="" number="75" precision="empty"/><line any_info="No Anys on this line!" content="    def test_path_retrieval_with_branching_pipeline(self):" number="76" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithBranchingConnections(&quot;pipeline&quot;)" number="77" precision="any"/><line any_info="No Anys on this line!" content="" number="78" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_a)" number="79" precision="any"/><line any_info="No Anys on this line!" content="" number="80" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(4, len(path))" number="81" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertIn([pipeline.op_a, pipeline.op_b, pipeline.op_d], path)" number="82" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertIn([pipeline.op_a, pipeline.op_b, pipeline.op_e], path)" number="83" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertIn([pipeline.op_a, pipeline.op_c, pipeline.op_f], path)" number="84" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertIn([pipeline.op_a, pipeline.op_c, pipeline.op_g], path)" number="85" precision="any"/><line any_info="No Anys on this line!" content="" number="86" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_b)" number="87" precision="any"/><line any_info="No Anys on this line!" content="" number="88" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(2, len(path))" number="89" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertIn([pipeline.op_b, pipeline.op_d], path)" number="90" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertIn([pipeline.op_b, pipeline.op_e], path)" number="91" precision="any"/><line any_info="No Anys on this line!" content="" number="92" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_c)" number="93" precision="any"/><line any_info="No Anys on this line!" content="" number="94" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(2, len(path))" number="95" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertIn([pipeline.op_c, pipeline.op_f], path)" number="96" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertIn([pipeline.op_c, pipeline.op_g], path)" number="97" precision="any"/><line any_info="No Anys on this line!" content="" number="98" precision="empty"/><line any_info="No Anys on this line!" content="    def test_path_retrieval_with_merging_pipeline(self):" number="99" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithMergingConnections(&quot;pipeline&quot;)" number="100" precision="any"/><line any_info="No Anys on this line!" content="" number="101" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_a)" number="102" precision="any"/><line any_info="No Anys on this line!" content="" number="103" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="104" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual([pipeline.op_a], path[0])" number="105" precision="any"/><line any_info="No Anys on this line!" content="" number="106" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_b)" number="107" precision="any"/><line any_info="No Anys on this line!" content="" number="108" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="109" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual([pipeline.op_b, pipeline.op_a], path[0])" number="110" precision="any"/><line any_info="No Anys on this line!" content="" number="111" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_c)" number="112" precision="any"/><line any_info="No Anys on this line!" content="" number="113" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="114" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual([pipeline.op_c, pipeline.op_a], path[0])" number="115" precision="any"/><line any_info="No Anys on this line!" content="" number="116" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_d)" number="117" precision="any"/><line any_info="No Anys on this line!" content="" number="118" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="119" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual([pipeline.op_d, pipeline.op_b, pipeline.op_a], path[0])" number="120" precision="any"/><line any_info="No Anys on this line!" content="" number="121" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_e)" number="122" precision="any"/><line any_info="No Anys on this line!" content="" number="123" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="124" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual([pipeline.op_e, pipeline.op_b, pipeline.op_a], path[0])" number="125" precision="any"/><line any_info="No Anys on this line!" content="" number="126" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_f)" number="127" precision="any"/><line any_info="No Anys on this line!" content="" number="128" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="129" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual([pipeline.op_f, pipeline.op_c, pipeline.op_a], path[0])" number="130" precision="any"/><line any_info="No Anys on this line!" content="" number="131" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_g)" number="132" precision="any"/><line any_info="No Anys on this line!" content="" number="133" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="134" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual([pipeline.op_g, pipeline.op_c, pipeline.op_a], path[0])" number="135" precision="any"/><line any_info="No Anys on this line!" content="" number="136" precision="empty"/><line any_info="No Anys on this line!" content="    def test_path_retrieval_with_pipeline_with_circular_dependent_operators(self):" number="137" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithCircularDependentOperators(&quot;pipeline&quot;)" number="138" precision="any"/><line any_info="No Anys on this line!" content="" number="139" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_a)" number="140" precision="any"/><line any_info="No Anys on this line!" content="" number="141" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="142" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(4, len(path[0]))" number="143" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x12)" content="        self.assertEqual([pipeline.op_a, pipeline.op_b, pipeline.op_c, pipeline.op_d], path[0])" number="144" precision="any"/><line any_info="No Anys on this line!" content="" number="145" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_b)" number="146" precision="any"/><line any_info="No Anys on this line!" content="" number="147" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="148" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(4, len(path[0]))" number="149" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x12)" content="        self.assertEqual([pipeline.op_b, pipeline.op_c, pipeline.op_d, pipeline.op_a], path[0])" number="150" precision="any"/><line any_info="No Anys on this line!" content="" number="151" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_c)" number="152" precision="any"/><line any_info="No Anys on this line!" content="" number="153" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="154" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(4, len(path[0]))" number="155" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x12)" content="        self.assertEqual([pipeline.op_c, pipeline.op_d, pipeline.op_a, pipeline.op_b], path[0])" number="156" precision="any"/><line any_info="No Anys on this line!" content="" number="157" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        path = retrieve_operator_paths(pipeline.op_d)" number="158" precision="any"/><line any_info="No Anys on this line!" content="" number="159" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(path))" number="160" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(4, len(path[0]))" number="161" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x12)" content="        self.assertEqual([pipeline.op_d, pipeline.op_a, pipeline.op_b, pipeline.op_c], path[0])" number="162" precision="any"/><line any_info="No Anys on this line!" content="" number="163" precision="empty"/><line any_info="No Anys on this line!" content="    def test_order_operators_by_connections_with_normal_pipeline(self):" number="164" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithSimpleConnections(&quot;pipeline&quot;)" number="165" precision="any"/><line any_info="No Anys on this line!" content="" number="166" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        dependency_levels = order_operators_by_connections(pipeline)" number="167" precision="any"/><line any_info="No Anys on this line!" content="" number="168" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(4, len(dependency_levels))" number="169" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[0]))" number="170" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_a, dependency_levels[0])" number="171" precision="any"/><line any_info="No Anys on this line!" content="" number="172" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[1]))" number="173" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_b, dependency_levels[1])" number="174" precision="any"/><line any_info="No Anys on this line!" content="" number="175" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[2]))" number="176" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_c, dependency_levels[2])" number="177" precision="any"/><line any_info="No Anys on this line!" content="" number="178" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="179" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_d, dependency_levels[3])" number="180" precision="any"/><line any_info="No Anys on this line!" content="" number="181" precision="empty"/><line any_info="No Anys on this line!" content="    def test_order_operators_by_connections_pipeline_with_circular_dependent_operators(self):" number="182" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithCircularDependentOperators(&quot;pipeline&quot;)" number="183" precision="any"/><line any_info="No Anys on this line!" content="" number="184" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        dependency_levels = order_operators_by_connections(pipeline)" number="185" precision="any"/><line any_info="No Anys on this line!" content="" number="186" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(4, len(dependency_levels))" number="187" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[0]))" number="188" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_a, dependency_levels[0])" number="189" precision="any"/><line any_info="No Anys on this line!" content="" number="190" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[1]))" number="191" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_b, dependency_levels[1])" number="192" precision="any"/><line any_info="No Anys on this line!" content="" number="193" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[2]))" number="194" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_c, dependency_levels[2])" number="195" precision="any"/><line any_info="No Anys on this line!" content="" number="196" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="197" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_d, dependency_levels[3])" number="198" precision="any"/><line any_info="No Anys on this line!" content="" number="199" precision="empty"/><line any_info="No Anys on this line!" content="    def test_order_operators_by_connections_with_branching_pipeline(self):" number="200" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithBranchingConnections(&quot;pipeline&quot;)" number="201" precision="any"/><line any_info="No Anys on this line!" content="" number="202" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        dependency_levels = order_operators_by_connections(pipeline)" number="203" precision="any"/><line any_info="No Anys on this line!" content="" number="204" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(3, len(dependency_levels))" number="205" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[0]))" number="206" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_a, dependency_levels[0])" number="207" precision="any"/><line any_info="No Anys on this line!" content="" number="208" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[1]))" number="209" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_b, dependency_levels[1])" number="210" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_c, dependency_levels[1])" number="211" precision="any"/><line any_info="No Anys on this line!" content="" number="212" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(4, len(dependency_levels[2]))" number="213" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_d, dependency_levels[2])" number="214" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_e, dependency_levels[2])" number="215" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_f, dependency_levels[2])" number="216" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_g, dependency_levels[2])" number="217" precision="any"/><line any_info="No Anys on this line!" content="" number="218" precision="empty"/><line any_info="No Anys on this line!" content="    def test_order_operators_by_connections_with_merging_pipeline(self):" number="219" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithMergingConnections(&quot;pipeline&quot;)" number="220" precision="any"/><line any_info="No Anys on this line!" content="" number="221" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        dependency_levels = order_operators_by_connections(pipeline)" number="222" precision="any"/><line any_info="No Anys on this line!" content="" number="223" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(3, len(dependency_levels))" number="224" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[2]))" number="225" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_a, dependency_levels[2])" number="226" precision="any"/><line any_info="No Anys on this line!" content="" number="227" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[1]))" number="228" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_b, dependency_levels[1])" number="229" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_c, dependency_levels[1])" number="230" precision="any"/><line any_info="No Anys on this line!" content="" number="231" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(4, len(dependency_levels[0]))" number="232" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_d, dependency_levels[0])" number="233" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_e, dependency_levels[0])" number="234" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_f, dependency_levels[0])" number="235" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_g, dependency_levels[0])" number="236" precision="any"/><line any_info="No Anys on this line!" content="" number="237" precision="empty"/><line any_info="No Anys on this line!" content="    def test_order_operators_by_connections_with_branching_and_merging_pipeline(self):" number="238" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithBranchingAndMergingConnections(&quot;pipeline&quot;)" number="239" precision="any"/><line any_info="No Anys on this line!" content="" number="240" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        dependency_levels = order_operators_by_connections(pipeline)" number="241" precision="any"/><line any_info="No Anys on this line!" content="" number="242" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(5, len(dependency_levels))" number="243" precision="any"/><line any_info="No Anys on this line!" content="" number="244" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[0]))" number="245" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_a, dependency_levels[0])" number="246" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_b, dependency_levels[0])" number="247" precision="any"/><line any_info="No Anys on this line!" content="" number="248" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[1]))" number="249" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_c, dependency_levels[1])" number="250" precision="any"/><line any_info="No Anys on this line!" content="" number="251" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[2]))" number="252" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_d, dependency_levels[2])" number="253" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_e, dependency_levels[2])" number="254" precision="any"/><line any_info="No Anys on this line!" content="" number="255" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="256" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_f, dependency_levels[3])" number="257" precision="any"/><line any_info="No Anys on this line!" content="" number="258" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[4]))" number="259" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_g, dependency_levels[4])" number="260" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_h, dependency_levels[4])" number="261" precision="any"/><line any_info="No Anys on this line!" content="" number="262" precision="empty"/><line any_info="No Anys on this line!" content="    def test_order_operators_by_connections_with_branching_and_merging_pipeline_with_multiple_outputs(self):" number="263" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithBranchingAndMergingConnectionsWithMultipleOutputs(&quot;pipeline&quot;)" number="264" precision="any"/><line any_info="No Anys on this line!" content="" number="265" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        dependency_levels = order_operators_by_connections(pipeline)" number="266" precision="any"/><line any_info="No Anys on this line!" content="" number="267" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(5, len(dependency_levels))" number="268" precision="any"/><line any_info="No Anys on this line!" content="" number="269" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[0]))" number="270" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_a, dependency_levels[0])" number="271" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_b, dependency_levels[0])" number="272" precision="any"/><line any_info="No Anys on this line!" content="" number="273" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[1]))" number="274" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_c, dependency_levels[1])" number="275" precision="any"/><line any_info="No Anys on this line!" content="" number="276" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[2]))" number="277" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_d, dependency_levels[2])" number="278" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_e, dependency_levels[2])" number="279" precision="any"/><line any_info="No Anys on this line!" content="" number="280" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="281" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_f, dependency_levels[3])" number="282" precision="any"/><line any_info="No Anys on this line!" content="" number="283" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[4]))" number="284" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_g, dependency_levels[4])" number="285" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_h, dependency_levels[4])" number="286" precision="any"/><line any_info="No Anys on this line!" content="" number="287" precision="empty"/><line any_info="No Anys on this line!" content="    def test_order_operators_by_connections_with_branching_and_merging_pipeline_with_additional_outputs(self):" number="288" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        pipeline = TestPipelineWithBranchingAndMergingConnectionsWithAdditionalOutputs(&quot;pipeline&quot;)" number="289" precision="any"/><line any_info="No Anys on this line!" content="" number="290" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        dependency_levels = order_operators_by_connections(pipeline)" number="291" precision="any"/><line any_info="No Anys on this line!" content="" number="292" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(5, len(dependency_levels))" number="293" precision="any"/><line any_info="No Anys on this line!" content="" number="294" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[0]))" number="295" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_a, dependency_levels[0])" number="296" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_b, dependency_levels[0])" number="297" precision="any"/><line any_info="No Anys on this line!" content="" number="298" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[1]))" number="299" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_c, dependency_levels[1])" number="300" precision="any"/><line any_info="No Anys on this line!" content="" number="301" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[2]))" number="302" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_d, dependency_levels[2])" number="303" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_e, dependency_levels[2])" number="304" precision="any"/><line any_info="No Anys on this line!" content="" number="305" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="306" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_f, dependency_levels[3])" number="307" precision="any"/><line any_info="No Anys on this line!" content="" number="308" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[4]))" number="309" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_g, dependency_levels[4])" number="310" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertIn(pipeline.op_h, dependency_levels[4])" number="311" precision="any"/></mypy-report-file>