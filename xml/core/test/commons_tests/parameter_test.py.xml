<?xml-stylesheet type="text/xsl" href="../../../../mypy-html.xslt"?><mypy-report-file name="core\test\commons_tests\parameter_test.py" module="core.test.commons_tests.parameter_test"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import unittest" number="16" precision="precise"/><line any_info="No Anys on this line!" content="" number="17" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.commons.parameters import retrieve_parameters, RequiredParameter, ExpectedParameter" number="18" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.misc import BlankInstance" number="19" precision="any"/><line any_info="No Anys on this line!" content="" number="20" precision="empty"/><line any_info="No Anys on this line!" content="" number="21" precision="empty"/><line any_info="No Anys on this line!" content="# Test resources" number="22" precision="empty"/><line any_info="No Anys on this line!" content="# ==============" number="23" precision="empty"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="No Anys on this line!" content="" number="25" precision="empty"/><line any_info="No Anys on this line!" content="class TestObjectClass(BlankInstance[None]):" number="26" precision="precise"/><line any_info="No Anys on this line!" content="    pass" number="27" precision="precise"/><line any_info="No Anys on this line!" content="" number="28" precision="empty"/><line any_info="No Anys on this line!" content="" number="29" precision="empty"/><line any_info="No Anys on this line!" content="class BaseTestClass(BlankInstance[None]):" number="30" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    req_int = RequiredParameter(int)" number="31" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _req_int = RequiredParameter(int)" number="32" precision="any"/><line any_info="No Anys on this line!" content="" number="33" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str, *args, **kwargs):" number="34" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, *args, **kwargs)" number="35" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_int = None" number="36" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._req_int = None" number="37" precision="any"/><line any_info="No Anys on this line!" content="        self.__req_int = None" number="38" precision="precise"/><line any_info="No Anys on this line!" content="" number="39" precision="empty"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="No Anys on this line!" content="class InheritedTestClass(BaseTestClass):" number="41" precision="precise"/><line any_info="No Anys on this line!" content="" number="42" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str, *args, **kwargs):" number="43" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, *args, **kwargs)" number="44" precision="any"/><line any_info="No Anys on this line!" content="" number="45" precision="empty"/><line any_info="No Anys on this line!" content="" number="46" precision="empty"/><line any_info="No Anys on this line!" content="class InheritedTestClassWithReimplementedParameter(BaseTestClass):" number="47" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _req_int = RequiredParameter(int)" number="48" precision="any"/><line any_info="No Anys on this line!" content="" number="49" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str, *args, **kwargs):" number="50" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, *args, **kwargs)" number="51" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._req_int = None" number="52" precision="any"/><line any_info="No Anys on this line!" content="" number="53" precision="empty"/><line any_info="No Anys on this line!" content="" number="54" precision="empty"/><line any_info="No Anys on this line!" content="class AllTypeTestClass(BlankInstance[None]):" number="55" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    req_int = RequiredParameter(int)" number="56" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    req_str = RequiredParameter(str)" number="57" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    req_bool = RequiredParameter(bool)" number="58" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x3)" content="    req_set = RequiredParameter(set)" number="59" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x3)" content="    req_list = RequiredParameter(list)" number="60" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x18)" content="    req_dict = RequiredParameter(dict)" number="61" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x6)" content="    req_set_of_str = RequiredParameter(set[str])" number="62" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x6)" content="    req_list_of_str = RequiredParameter(list[str])" number="63" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x36)" content="    req_dict_of_str_obj = RequiredParameter(dict[str, object])" number="64" precision="any"/><line any_info="No Anys on this line!" content="" number="65" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str, *args, **kwargs):" number="66" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, *args, **kwargs)" number="67" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_int = None" number="68" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_str = None" number="69" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_bool = None" number="70" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_set = None" number="71" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_list = None" number="72" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_dict = None" number="73" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_set_of_str = None" number="74" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_list_of_str = None" number="75" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.req_dict_of_str_obj = None" number="76" precision="any"/><line any_info="No Anys on this line!" content="" number="77" precision="empty"/><line any_info="No Anys on this line!" content="" number="78" precision="empty"/><line any_info="No Anys on this line!" content="class TestClassWithIdenticalParameterNames(BlankInstance[None]):" number="79" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    one_name = RequiredParameter(int)" number="80" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    other_name = RequiredParameter(int, alt_name=&quot;one_name&quot;)" number="81" precision="any"/><line any_info="No Anys on this line!" content="" number="82" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str, *args, **kwargs):" number="83" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, *args, **kwargs)" number="84" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.one_name = None" number="85" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.other_name = None" number="86" precision="any"/><line any_info="No Anys on this line!" content="" number="87" precision="empty"/><line any_info="No Anys on this line!" content="" number="88" precision="empty"/><line any_info="No Anys on this line!" content="def on_value_change(instance, value):" number="89" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    if value is not None:" number="90" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        instance.value = value" number="91" precision="any"/><line any_info="No Anys on this line!" content="" number="92" precision="empty"/><line any_info="No Anys on this line!" content="" number="93" precision="empty"/><line any_info="No Anys on this line!" content="class TestClassWithOnChangeCallback(BlankInstance[None]):" number="94" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Unannotated (x3)" content="    param = RequiredParameter(int, on_update=on_value_change)" number="95" precision="any"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str, *args, **kwargs):" number="97" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, *args, **kwargs)" number="98" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self.param = None" number="99" precision="any"/><line any_info="No Anys on this line!" content="        self.value = 0" number="100" precision="precise"/><line any_info="No Anys on this line!" content="" number="101" precision="empty"/><line any_info="No Anys on this line!" content="# Tests" number="102" precision="empty"/><line any_info="No Anys on this line!" content="# =====" number="103" precision="empty"/><line any_info="No Anys on this line!" content="" number="104" precision="empty"/><line any_info="No Anys on this line!" content="" number="105" precision="empty"/><line any_info="No Anys on this line!" content="class ParameterTest(unittest.TestCase):" number="106" precision="precise"/><line any_info="No Anys on this line!" content="" number="107" precision="empty"/><line any_info="No Anys on this line!" content="    # Basic retrieval tests" number="108" precision="empty"/><line any_info="No Anys on this line!" content="    # =====================" number="109" precision="empty"/><line any_info="No Anys on this line!" content="" number="110" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_retrieval_with_inheritance(self):" number="111" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        base = BaseTestClass(&quot;instance&quot;)" number="112" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        inh = InheritedTestClass(&quot;instance&quot;)" number="113" precision="any"/><line any_info="No Anys on this line!" content="" number="114" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x2)" content="        base_parameters = retrieve_parameters(base, ExpectedParameter)" number="115" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x2)" content="        inh_parameters = retrieve_parameters(inh, ExpectedParameter)" number="116" precision="any"/><line any_info="No Anys on this line!" content="" number="117" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(2, len(base_parameters))" number="118" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertTrue(&quot;req_int&quot; in base_parameters)" number="119" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertTrue(&quot;_req_int&quot; in base_parameters)" number="120" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertFalse(&quot;_BaseTestClass__req_int&quot; in base_parameters)" number="121" precision="any"/><line any_info="No Anys on this line!" content="" number="122" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(2, len(inh_parameters))" number="123" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertTrue(&quot;req_int&quot; in inh_parameters)" number="124" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertTrue(&quot;_req_int&quot; in inh_parameters)" number="125" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertFalse(&quot;_BaseTestClass__req_int&quot; in inh_parameters)" number="126" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertFalse(&quot;_InheritedTestClass__req_int&quot; in inh_parameters)" number="127" precision="any"/><line any_info="No Anys on this line!" content="" number="128" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_retrieval_with_redefined_parameter(self):" number="129" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="130" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            InheritedTestClassWithReimplementedParameter(&quot;instance&quot;)" number="131" precision="any"/><line any_info="No Anys on this line!" content="" number="132" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_injection(self):" number="133" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        inh = InheritedTestClass(&quot;instance&quot;)" number="134" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x2)" content="        inh_parameters = retrieve_parameters(inh, ExpectedParameter)" number="135" precision="any"/><line any_info="No Anys on this line!" content="" number="136" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        for param_name, param_type in inh_parameters.items():" number="137" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Explicit (x1)" content="            setattr(inh, param_name, 1234)" number="138" precision="any"/><line any_info="No Anys on this line!" content="" number="139" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1234, inh.req_int)" number="140" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1234, inh._req_int)" number="141" precision="any"/><line any_info="No Anys on this line!" content="" number="142" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_injection_with_invalid_type(self):" number="143" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        inh = InheritedTestClass(&quot;instance&quot;)" number="144" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x2)" content="        inh_parameters = retrieve_parameters(inh, ExpectedParameter)" number="145" precision="any"/><line any_info="No Anys on this line!" content="" number="146" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        for param_name, param_type in inh_parameters.items():" number="147" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            with self.assertRaises(TypeError):" number="148" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Explicit (x1)" content="                setattr(inh, param_name, &quot;1234&quot;)" number="149" precision="any"/><line any_info="No Anys on this line!" content="" number="150" precision="empty"/><line any_info="No Anys on this line!" content="    # ExpectedParameter type tests" number="151" precision="empty"/><line any_info="No Anys on this line!" content="    # ====================" number="152" precision="empty"/><line any_info="No Anys on this line!" content="" number="153" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_types(self):" number="154" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        test_obj = AllTypeTestClass(&quot;instance&quot;)" number="155" precision="any"/><line any_info="No Anys on this line!" content="" number="156" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x2)" content="        params = retrieve_parameters(test_obj, ExpectedParameter)" number="157" precision="any"/><line any_info="No Anys on this line!" content="" number="158" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(int, params[&quot;req_int&quot;].parameter_type)" number="159" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(str, params[&quot;req_str&quot;].parameter_type)" number="160" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(bool, params[&quot;req_bool&quot;].parameter_type)" number="161" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x3)" content="        self.assertEqual(set, params[&quot;req_set&quot;].parameter_type)" number="162" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x3)" content="        self.assertEqual(list, params[&quot;req_list&quot;].parameter_type)" number="163" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x18)" content="        self.assertEqual(dict, params[&quot;req_dict&quot;].parameter_type)" number="164" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x3)" content="        self.assertEqual(set, params[&quot;req_set_of_str&quot;].parameter_type)" number="165" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(str, params[&quot;req_set_of_str&quot;].generic_types[0])" number="166" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x3)" content="        self.assertEqual(list, params[&quot;req_list_of_str&quot;].parameter_type)" number="167" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(str, params[&quot;req_list_of_str&quot;].generic_types[0])" number="168" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x18)" content="        self.assertEqual(dict, params[&quot;req_dict_of_str_obj&quot;].parameter_type)" number="169" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(str, params[&quot;req_dict_of_str_obj&quot;].generic_types[0])" number="170" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(object, params[&quot;req_dict_of_str_obj&quot;].generic_types[1])" number="171" precision="any"/><line any_info="No Anys on this line!" content="" number="172" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_assignment_with_valid_types(self):" number="173" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        test_obj = AllTypeTestClass(&quot;instance&quot;)" number="174" precision="any"/><line any_info="No Anys on this line!" content="" number="175" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_int&quot;, 1234)" number="176" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_str&quot;, &quot;1234&quot;)" number="177" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_bool&quot;, True)" number="178" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_set&quot;, {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;})" number="179" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_list&quot;, [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;])" number="180" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_set_of_str&quot;, {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;})" number="181" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_list_of_str&quot;, [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;])" number="182" precision="any"/><line any_info="No Anys on this line!" content="" number="183" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1234, test_obj.req_int)" number="184" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(&quot;1234&quot;, test_obj.req_str)" number="185" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(True, test_obj.req_bool)" number="186" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual({&quot;1&quot;, &quot;2&quot;, &quot;3&quot;}, test_obj.req_set)" number="187" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual([&quot;1&quot;, &quot;2&quot;, &quot;3&quot;], test_obj.req_list)" number="188" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual({&quot;1&quot;, &quot;2&quot;, &quot;3&quot;}, test_obj.req_set_of_str)" number="189" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual([&quot;1&quot;, &quot;2&quot;, &quot;3&quot;], test_obj.req_list_of_str)" number="190" precision="any"/><line any_info="No Anys on this line!" content="" number="191" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_any&quot;, 1234)" number="192" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1234, test_obj.req_any)" number="193" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_any&quot;, &quot;1234&quot;)" number="194" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(&quot;1234&quot;, test_obj.req_any)" number="195" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_any&quot;, {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;})" number="196" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual({&quot;1&quot;, &quot;2&quot;, &quot;3&quot;}, test_obj.req_any)" number="197" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="        setattr(test_obj, &quot;req_any&quot;, [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;])" number="198" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual([&quot;1&quot;, &quot;2&quot;, &quot;3&quot;], test_obj.req_any)" number="199" precision="any"/><line any_info="No Anys on this line!" content="" number="200" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_assignment_with_invalid_types(self):" number="201" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        test_obj = AllTypeTestClass(&quot;instance&quot;)" number="202" precision="any"/><line any_info="No Anys on this line!" content="" number="203" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="204" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_int&quot;, &quot;1234&quot;)" number="205" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="206" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_str&quot;, 1234)" number="207" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="208" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_bool&quot;, &quot;True&quot;)" number="209" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="210" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_set&quot;, [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;])" number="211" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="212" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_list&quot;, {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;})" number="213" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="214" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_dict&quot;, [&quot;1&quot;, &quot;2&quot;, &quot;3&quot;])" number="215" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="216" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_dict&quot;, {&quot;1&quot;: object()})" number="217" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="218" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_set_of_str&quot;, [1, 2, 3])" number="219" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="220" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_list_of_str&quot;, {1, 2, 3})" number="221" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="222" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Explicit (x1)" content="            setattr(test_obj, &quot;req_dict_of_str_obj&quot;, &quot;dict_ref&quot;)" number="223" precision="any"/><line any_info="No Anys on this line!" content="" number="224" precision="empty"/><line any_info="No Anys on this line!" content="    def test_identical_parameter_names_expect_error(self):" number="225" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="226" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            TestClassWithIdenticalParameterNames(&quot;instance&quot;)" number="227" precision="any"/><line any_info="No Anys on this line!" content="" number="228" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_direct_setting_with_on_value_changed_callback(self):" number="229" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        test_obj_1 = TestClassWithOnChangeCallback(&quot;instance&quot;)" number="230" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        test_obj_2 = TestClassWithOnChangeCallback(&quot;instance&quot;)" number="231" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        test_obj_1.param = 10" number="232" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        test_obj_2.param = 20" number="233" precision="any"/><line any_info="No Anys on this line!" content="" number="234" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(10, test_obj_1.value)" number="235" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(20, test_obj_2.value)" number="236" precision="any"/><line any_info="No Anys on this line!" content="" number="237" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_indirect_setting_with_on_value_changed_callback(self):" number="238" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        test_obj_1 = TestClassWithOnChangeCallback(&quot;instance&quot;)" number="239" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        test_obj_2 = TestClassWithOnChangeCallback(&quot;instance&quot;)" number="240" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        test_obj_1.set_parameter(&quot;param&quot;, 10)" number="241" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        test_obj_2.set_parameter(&quot;param&quot;, 20)" number="242" precision="any"/><line any_info="No Anys on this line!" content="" number="243" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(10, test_obj_1.value)" number="244" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(20, test_obj_2.value)" number="245" precision="any"/></mypy-report-file>