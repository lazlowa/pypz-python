<?xml-stylesheet type="text/xsl" href="../../../../mypy-html.xslt"?><mypy-report-file name="core\test\commons_tests\template_resolver_test.py" module="core.test.commons_tests.template_resolver_test"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import unittest" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import os" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from pypz.core.commons.utils import TemplateResolver" number="18" precision="any"/><line any_info="No Anys on this line!" content="" number="19" precision="empty"/><line any_info="No Anys on this line!" content="" number="20" precision="empty"/><line any_info="No Anys on this line!" content="class TemplateResolverTest(unittest.TestCase):" number="21" precision="precise"/><line any_info="No Anys on this line!" content="" number="22" precision="empty"/><line any_info="No Anys on this line!" content="    def test_env_var_resolver_with_strings_expect_success(self):" number="23" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PPFW_TEST&quot;] = &quot;testValue&quot;" number="24" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PPFW_TEST2&quot;] = &quot;testValue2&quot;" number="25" precision="any"/><line any_info="No Anys on this line!" content="" number="26" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        test_simple1_s = &quot;${env:PPFW_TEST}&quot;" number="27" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        test_simple2_s = &quot;test${env:PPFW_TEST}&quot;" number="28" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        test_simple3_s = &quot;${env:PPFW_TEST}test&quot;" number="29" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        test_complex1_s = &quot;test${env:PPFW_TEST}test${env:PPFW_TEST}test&quot;" number="30" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        test_complex2_s = &quot;test${env:PPFW_TEST}test${env:PPFW_TEST2}test&quot;" number="31" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        test_complex3_s = &quot;test$(env:PPFW_TEST)test$(env:PPFW_TEST)test&quot;" number="32" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        test_complex4_s = &quot;test$(env:PPFW_TEST)test${env:PPFW_TEST}test&quot;" number="33" precision="any"/><line any_info="No Anys on this line!" content="" number="34" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        template_resolver1 = TemplateResolver(&quot;${&quot;, &quot;}&quot;)" number="35" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        template_resolver2 = TemplateResolver(&quot;$(&quot;, &quot;)&quot;)" number="36" precision="any"/><line any_info="No Anys on this line!" content="" number="37" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_simple1 = template_resolver1.resolve(test_simple1_s)" number="38" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_simple2 = template_resolver1.resolve(test_simple2_s)" number="39" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_simple3 = template_resolver1.resolve(test_simple3_s)" number="40" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_complex1 = template_resolver1.resolve(test_complex1_s)" number="41" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_complex2 = template_resolver1.resolve(test_complex2_s)" number="42" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_complex3 = template_resolver2.resolve(test_complex3_s)" number="43" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_complex4 = template_resolver2.resolve(test_complex4_s)" number="44" precision="any"/><line any_info="No Anys on this line!" content="" number="45" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x2)" content="        self.assertEqual(os.getenv(&quot;PPFW_TEST&quot;), resolved_simple1)" number="46" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x2)" content="        self.assertEqual(&quot;test&quot; + os.getenv(&quot;PPFW_TEST&quot;), resolved_simple2)" number="47" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x2)" content="        self.assertEqual(os.getenv(&quot;PPFW_TEST&quot;) + &quot;test&quot;, resolved_simple3)" number="48" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Omitted Generics (x4)" content="        self.assertEqual(&quot;test&quot; + os.getenv(&quot;PPFW_TEST&quot;) + &quot;test&quot; + os.getenv(&quot;PPFW_TEST&quot;) + &quot;test&quot;, resolved_complex1)" number="49" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Omitted Generics (x4)" content="        self.assertEqual(&quot;test&quot; + os.getenv(&quot;PPFW_TEST&quot;) + &quot;test&quot; + os.getenv(&quot;PPFW_TEST2&quot;) + &quot;test&quot;, resolved_complex2)" number="50" precision="any"/><line any_info="No Anys on this line!" content="" number="51" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Omitted Generics (x4)" content="        self.assertEqual(&quot;test&quot; + os.getenv(&quot;PPFW_TEST&quot;) + &quot;test&quot; + os.getenv(&quot;PPFW_TEST&quot;) + &quot;test&quot;, resolved_complex3)" number="52" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)&#10;Omitted Generics (x2)" content="        self.assertEqual(&quot;test&quot; + os.getenv(&quot;PPFW_TEST&quot;) + &quot;test${env:PPFW_TEST}test&quot;, resolved_complex4)" number="53" precision="any"/><line any_info="No Anys on this line!" content="" number="54" precision="empty"/><line any_info="No Anys on this line!" content="    def test_env_var_resolver_with_invalid_strings_expect_error(self):" number="55" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PPFW_TEST&quot;] = &quot;testValue&quot;" number="56" precision="any"/><line any_info="No Anys on this line!" content="" number="57" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        invalid1_s = &quot;${PPFW_TEST}&quot;" number="58" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        invalid2_s = &quot;${}&quot;" number="59" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        invalid3_s = &quot;${env:}&quot;" number="60" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        invalid4_s = &quot;${en:PPFW_TEST}&quot;" number="61" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        invalid5_s = &quot;${env:PPFW_SURE_IT_IS_NOT_EXISTING}&quot;" number="62" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        invalid6_s = &quot;${env:PPFW_TEST}${PPFW_TEST}&quot;" number="63" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        invalid7_s = &quot;${env:PPFW_TEST&quot;" number="64" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        invalid8_s = &quot;env:PPFW_TEST}&quot;" number="65" precision="any"/><line any_info="No Anys on this line!" content="" number="66" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        template_resolver = TemplateResolver(&quot;${&quot;, &quot;}&quot;)" number="67" precision="any"/><line any_info="No Anys on this line!" content="" number="68" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;&quot;, template_resolver.resolve(invalid1_s))" number="69" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;&quot;, template_resolver.resolve(invalid2_s))" number="70" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;&quot;, template_resolver.resolve(invalid3_s))" number="71" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;&quot;, template_resolver.resolve(invalid4_s))" number="72" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;&quot;, template_resolver.resolve(invalid5_s))" number="73" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(os.environ[&quot;PPFW_TEST&quot;], template_resolver.resolve(invalid6_s))" number="74" precision="any"/><line any_info="No Anys on this line!" content="" number="75" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(invalid7_s, template_resolver.resolve(invalid7_s))" number="76" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(invalid8_s, template_resolver.resolve(invalid8_s))" number="77" precision="any"/><line any_info="No Anys on this line!" content="" number="78" precision="empty"/><line any_info="No Anys on this line!" content="    def test_env_var_resolver_with_map_expect_success(self):" number="79" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PPFW_TEST&quot;] = &quot;testValue&quot;" number="80" precision="any"/><line any_info="No Anys on this line!" content="" number="81" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        ref_map = dict()" number="82" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        ref_map[&quot;key1&quot;] = &quot;${env:PPFW_TEST}&quot;" number="83" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        ref_map[&quot;key2&quot;] = &quot;env:PPFW_TEST&quot;" number="84" precision="any"/><line any_info="No Anys on this line!" content="" number="85" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        template_resolver = TemplateResolver(&quot;${&quot;, &quot;}&quot;)" number="86" precision="any"/><line any_info="No Anys on this line!" content="" number="87" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_map = template_resolver.resolve(ref_map)" number="88" precision="any"/><line any_info="No Anys on this line!" content="" number="89" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x2)" content="        self.assertEqual(os.getenv(&quot;PPFW_TEST&quot;), resolved_map[&quot;key1&quot;])" number="90" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(&quot;env:PPFW_TEST&quot;, resolved_map[&quot;key2&quot;])" number="91" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(ref_map, resolved_map)" number="92" precision="any"/><line any_info="No Anys on this line!" content="" number="93" precision="empty"/><line any_info="No Anys on this line!" content="    def test_env_var_resolver_with_collections_expect_success(self):" number="94" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PPFW_TEST&quot;] = &quot;testValue&quot;" number="95" precision="any"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x3)" content="        ref_list = list()" number="97" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        ref_list.append(&quot;${env:PPFW_TEST}&quot;)" number="98" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        ref_list.append(&quot;env:PPFW_TEST&quot;)" number="99" precision="any"/><line any_info="No Anys on this line!" content="" number="100" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x3)" content="        ref_set = set()" number="101" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        ref_set.add(&quot;${env:PPFW_TEST}&quot;)" number="102" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        ref_set.add(&quot;env:PPFW_TEST&quot;)" number="103" precision="any"/><line any_info="No Anys on this line!" content="" number="104" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        template_resolver = TemplateResolver(&quot;${&quot;, &quot;}&quot;)" number="105" precision="any"/><line any_info="No Anys on this line!" content="" number="106" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_list = template_resolver.resolve(ref_list)" number="107" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_set = template_resolver.resolve(ref_set)" number="108" precision="any"/><line any_info="No Anys on this line!" content="" number="109" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x2)" content="        self.assertTrue(os.getenv(&quot;PPFW_TEST&quot;) in resolved_list)" number="110" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertTrue(&quot;env:PPFW_TEST&quot; in resolved_list)" number="111" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x3)" content="        self.assertTrue(isinstance(resolved_list, list))" number="112" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(2, len(resolved_list))" number="113" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(ref_list, resolved_list)" number="114" precision="any"/><line any_info="No Anys on this line!" content="" number="115" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x2)" content="        self.assertTrue(os.getenv(&quot;PPFW_TEST&quot;) in resolved_set)" number="116" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.assertTrue(&quot;env:PPFW_TEST&quot; in resolved_set)" number="117" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x3)" content="        self.assertTrue(isinstance(resolved_set, set))" number="118" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(2, len(resolved_set))" number="119" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(ref_list, resolved_set)" number="120" precision="any"/><line any_info="No Anys on this line!" content="" number="121" precision="empty"/><line any_info="No Anys on this line!" content="    def test_env_var_resolver_with_complex_structure_expect_success(self):" number="122" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PPFW_TEST&quot;] = &quot;testValue&quot;" number="123" precision="any"/><line any_info="No Anys on this line!" content="" number="124" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x3)" content="        ref_set = set()" number="125" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        ref_set.add(&quot;${env:PPFW_TEST}&quot;)" number="126" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        ref_set.add(&quot;env:PPFW_TEST&quot;)" number="127" precision="any"/><line any_info="No Anys on this line!" content="" number="128" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        reference_map = dict()" number="129" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        reference_map[&quot;key1&quot;] = &quot;${env:PPFW_TEST}&quot;" number="130" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        reference_map[&quot;key2&quot;] = &quot;env:PPFW_TEST&quot;" number="131" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        reference_map[&quot;key3&quot;] = ref_set" number="132" precision="any"/><line any_info="No Anys on this line!" content="" number="133" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x3)" content="        ref_list = list()" number="134" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        ref_list.append(reference_map)" number="135" precision="any"/><line any_info="No Anys on this line!" content="" number="136" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        template_resolver = TemplateResolver(&quot;${&quot;, &quot;}&quot;)" number="137" precision="any"/><line any_info="No Anys on this line!" content="" number="138" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        resolved_list = template_resolver.resolve(ref_list)" number="139" precision="any"/><line any_info="No Anys on this line!" content="" number="140" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1, len(resolved_list))" number="141" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Omitted Generics (x18)" content="        self.assertTrue(isinstance(resolved_list[0], dict))" number="142" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(3, len(resolved_list[0]))" number="143" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)&#10;Omitted Generics (x2)" content="        self.assertEqual(os.getenv(&quot;PPFW_TEST&quot;), resolved_list[0][&quot;key1&quot;])" number="144" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;env:PPFW_TEST&quot;, resolved_list[0][&quot;key2&quot;])" number="145" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)&#10;Omitted Generics (x3)" content="        self.assertTrue(isinstance(resolved_list[0][&quot;key3&quot;], set))" number="146" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(2, len(resolved_list[0][&quot;key3&quot;]))" number="147" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)&#10;Omitted Generics (x2)" content="        self.assertTrue(os.getenv(&quot;PPFW_TEST&quot;) in resolved_list[0][&quot;key3&quot;])" number="148" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertTrue(&quot;env:PPFW_TEST&quot; in resolved_list[0][&quot;key3&quot;])" number="149" precision="any"/></mypy-report-file>