<?xml-stylesheet type="text/xsl" href="../../../../mypy-html.xslt"?><mypy-report-file name="core\test\specs_tests\instance_test.py" module="core.test.specs_tests.instance_test"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import os" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import types" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from unittest import TestCase" number="18" precision="precise"/><line any_info="No Anys on this line!" content="" number="19" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.specs.instance import Instance" number="20" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.dtos import InstanceDTO, SpecDTO" number="21" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.misc import BlankInstance" number="22" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.plugin import InputPortPlugin, ResourceHandlerPlugin" number="23" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.utils import resolve_dependency_graph" number="24" precision="any"/><line any_info="No Anys on this line!" content="from core.test.specs_tests.instance_test_resources import TestClassL0, TestClassWithDifferentNestedType, \" number="25" precision="precise"/><line any_info="No Anys on this line!" content="    TestClassForDependencyResolution, TestClassL3" number="26" precision="empty"/><line any_info="No Anys on this line!" content="" number="27" precision="empty"/><line any_info="No Anys on this line!" content="" number="28" precision="empty"/><line any_info="No Anys on this line!" content="class InstanceTest(TestCase):" number="29" precision="precise"/><line any_info="No Anys on this line!" content="" number="30" precision="empty"/><line any_info="No Anys on this line!" content="    def test_simple_name_resolution(self):" number="31" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="32" precision="any"/><line any_info="No Anys on this line!" content="" number="33" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0&quot;, l0.get_simple_name())" number="34" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l10&quot;, l0.l10.get_simple_name())" number="35" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;other_name&quot;, l0.l11.get_simple_name())" number="36" precision="any"/><line any_info="No Anys on this line!" content="" number="37" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l2&quot;, l0.l10.l2.get_simple_name())" number="38" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l2&quot;, l0.l11.l2.get_simple_name())" number="39" precision="any"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l3&quot;, l0.l10.l2.l3.get_simple_name())" number="41" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l3&quot;, l0.l11.l2.l3.get_simple_name())" number="42" precision="any"/><line any_info="No Anys on this line!" content="" number="43" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="44" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            TestClassL0()" number="45" precision="any"/><line any_info="No Anys on this line!" content="" number="46" precision="empty"/><line any_info="No Anys on this line!" content="    def test_full_name_resolution(self):" number="47" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="48" precision="any"/><line any_info="No Anys on this line!" content="" number="49" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0&quot;, l0.get_full_name())" number="50" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l0.l10&quot;, l0.l10.get_full_name())" number="51" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l0.other_name&quot;, l0.l11.get_full_name())" number="52" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l0.l10.l2&quot;, l0.l10.l2.get_full_name())" number="53" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l0.other_name.l2&quot;, l0.l11.l2.get_full_name())" number="54" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l0.l10.l2.l3&quot;, l0.l10.l2.l3.get_full_name())" number="55" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l0.other_name.l2.l3&quot;, l0.l11.l2.l3.get_full_name())" number="56" precision="any"/><line any_info="No Anys on this line!" content="" number="57" precision="empty"/><line any_info="No Anys on this line!" content="    def test_object_linking_with_nested_objects(self):" number="58" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="59" precision="any"/><line any_info="No Anys on this line!" content="" number="60" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(2, len(l0.get_protected().get_nested_instances()))" number="61" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(l0.l10, l0.get_protected().get_nested_instance(&quot;l10&quot;))" number="62" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(l0.l11, l0.get_protected().get_nested_instance(&quot;other_name&quot;))" number="63" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(l0, l0.l10.get_context())" number="64" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(l0, l0.l11.get_context())" number="65" precision="any"/><line any_info="No Anys on this line!" content="" number="66" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(1, len(l0.l10.get_protected().get_nested_instances()))" number="67" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(1, len(l0.l11.get_protected().get_nested_instances()))" number="68" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(l0.l10.l2, l0.l10.get_protected().get_nested_instance(&quot;l2&quot;))" number="69" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(l0.l11.l2, l0.l11.get_protected().get_nested_instance(&quot;l2&quot;))" number="70" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(l0.l10, l0.l10.l2.get_context())" number="71" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(l0.l11, l0.l11.l2.get_context())" number="72" precision="any"/><line any_info="No Anys on this line!" content="" number="73" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(1, len(l0.l10.l2.get_protected().get_nested_instances()))" number="74" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(1, len(l0.l11.l2.get_protected().get_nested_instances()))" number="75" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x13)" content="        self.assertEqual(l0.l10.l2.l3, l0.l10.l2.get_protected().get_nested_instance(&quot;l3&quot;))" number="76" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x13)" content="        self.assertEqual(l0.l11.l2.l3, l0.l11.l2.get_protected().get_nested_instance(&quot;l3&quot;))" number="77" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(l0.l10.l2, l0.l10.l2.l3.get_context())" number="78" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(l0.l11.l2, l0.l11.l2.l3.get_context())" number="79" precision="any"/><line any_info="No Anys on this line!" content="" number="80" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(0, len(l0.l10.l2.l3.get_protected().get_nested_instances()))" number="81" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(0, len(l0.l11.l2.l3.get_protected().get_nested_instances()))" number="82" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x13)" content="        self.assertNotEqual(l0.l10.l2.l3, l0.l10.l2.l3.l4.get_context())" number="83" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x13)" content="        self.assertNotEqual(l0.l11.l2.l3, l0.l11.l2.l3.l4.get_context())" number="84" precision="any"/><line any_info="No Anys on this line!" content="" number="85" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassWithDifferentNestedType(&quot;l0&quot;)" number="86" precision="any"/><line any_info="No Anys on this line!" content="" number="87" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(3, len(l0.get_protected().get_nested_instances()))" number="88" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(l0.a, l0.get_protected().get_nested_instance(&quot;a&quot;))" number="89" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(l0.b, l0.get_protected().get_nested_instance(&quot;b&quot;))" number="90" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(l0.c, l0.get_protected().get_nested_instance(&quot;c&quot;))" number="91" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(l0, l0.a.get_context())" number="92" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(l0, l0.b.get_context())" number="93" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(l0, l0.c.get_context())" number="94" precision="any"/><line any_info="No Anys on this line!" content="" number="95" precision="empty"/><line any_info="No Anys on this line!" content="    def test_depends_on_handling(self):" number="96" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="97" precision="any"/><line any_info="No Anys on this line!" content="" number="98" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertTrue(l0.l11 in l0.l10.get_protected().get_depends_on())" number="99" precision="any"/><line any_info="No Anys on this line!" content="" number="100" precision="empty"/><line any_info="No Anys on this line!" content="        # Circular dependency" number="101" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(RecursionError):" number="102" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="            l0.l11.depends_on(l0.l10)" number="103" precision="any"/><line any_info="No Anys on this line!" content="" number="104" precision="empty"/><line any_info="No Anys on this line!" content="        # Self dependency" number="105" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="106" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            l0.depends_on(l0)" number="107" precision="any"/><line any_info="No Anys on this line!" content="" number="108" precision="empty"/><line any_info="No Anys on this line!" content="        # Dependency with from different context" number="109" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="110" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="            l0.l10.l2.depends_on(l0.l11.l2)" number="111" precision="any"/><line any_info="No Anys on this line!" content="" number="112" precision="empty"/><line any_info="No Anys on this line!" content="        # Invalid dependency type" number="113" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="114" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            l0.depends_on(&quot;invalid_dependency_type&quot;)" number="115" precision="any"/><line any_info="No Anys on this line!" content="" number="116" precision="empty"/><line any_info="No Anys on this line!" content="    def test_dependency_graph_resolution_case_1(self):" number="117" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        instance = TestClassForDependencyResolution(&quot;base&quot;)" number="118" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_1.depends_on(instance.instance_0)" number="119" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_2.depends_on(instance.instance_1)" number="120" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_3.depends_on(instance.instance_2)" number="121" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_4.depends_on(instance.instance_3)" number="122" precision="any"/><line any_info="No Anys on this line!" content="" number="123" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Unimported (x1)" content="        dependency_levels = resolve_dependency_graph(instance.get_protected().get_nested_instances().values())" number="124" precision="any"/><line any_info="No Anys on this line!" content="" number="125" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(5, len(dependency_levels))" number="126" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[0]))" number="127" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[1]))" number="128" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[2]))" number="129" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="130" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[4]))" number="131" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_0 in dependency_levels[0])" number="132" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_1 in dependency_levels[1])" number="133" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_2 in dependency_levels[2])" number="134" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_3 in dependency_levels[3])" number="135" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_4 in dependency_levels[4])" number="136" precision="any"/><line any_info="No Anys on this line!" content="" number="137" precision="empty"/><line any_info="No Anys on this line!" content="    def test_dependency_graph_resolution_case_2(self):" number="138" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        instance = TestClassForDependencyResolution(&quot;base&quot;)" number="139" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_0.depends_on(instance.instance_1)" number="140" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_1.depends_on(instance.instance_2)" number="141" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_2.depends_on(instance.instance_3)" number="142" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_3.depends_on(instance.instance_4)" number="143" precision="any"/><line any_info="No Anys on this line!" content="" number="144" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Unimported (x1)" content="        dependency_levels = resolve_dependency_graph(instance.get_protected().get_nested_instances().values())" number="145" precision="any"/><line any_info="No Anys on this line!" content="" number="146" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(5, len(dependency_levels))" number="147" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[0]))" number="148" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[1]))" number="149" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[2]))" number="150" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="151" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[4]))" number="152" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_0 in dependency_levels[4])" number="153" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_1 in dependency_levels[3])" number="154" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_2 in dependency_levels[2])" number="155" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_3 in dependency_levels[1])" number="156" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_4 in dependency_levels[0])" number="157" precision="any"/><line any_info="No Anys on this line!" content="" number="158" precision="empty"/><line any_info="No Anys on this line!" content="    def test_dependency_graph_resolution_case_3(self):" number="159" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        instance = TestClassForDependencyResolution(&quot;base&quot;)" number="160" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_1.depends_on(instance.instance_0)" number="161" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_2.depends_on(instance.instance_0)" number="162" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_2.depends_on(instance.instance_1)" number="163" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_3.depends_on(instance.instance_1)" number="164" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_3.depends_on(instance.instance_2)" number="165" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_4.depends_on(instance.instance_0)" number="166" precision="any"/><line any_info="No Anys on this line!" content="" number="167" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Unimported (x1)" content="        dependency_levels = resolve_dependency_graph(instance.get_protected().get_nested_instances().values())" number="168" precision="any"/><line any_info="No Anys on this line!" content="" number="169" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(4, len(dependency_levels))" number="170" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[0]))" number="171" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[1]))" number="172" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[2]))" number="173" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="174" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_0 in dependency_levels[0])" number="175" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_1 in dependency_levels[1])" number="176" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_2 in dependency_levels[2])" number="177" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_3 in dependency_levels[3])" number="178" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_4 in dependency_levels[1])" number="179" precision="any"/><line any_info="No Anys on this line!" content="" number="180" precision="empty"/><line any_info="No Anys on this line!" content="    def test_dependency_graph_resolution_case_4(self):" number="181" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        instance = TestClassForDependencyResolution(&quot;base&quot;)" number="182" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_1.depends_on(instance.instance_0)" number="183" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_2.depends_on(instance.instance_0)" number="184" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_3.depends_on(instance.instance_0)" number="185" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_3.depends_on(instance.instance_2)" number="186" precision="any"/><line any_info="No Anys on this line!" content="" number="187" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Unimported (x1)" content="        dependency_levels = resolve_dependency_graph(instance.get_protected().get_nested_instances().values())" number="188" precision="any"/><line any_info="No Anys on this line!" content="" number="189" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(3, len(dependency_levels))" number="190" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[0]))" number="191" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(2, len(dependency_levels[1]))" number="192" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[2]))" number="193" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_0 in dependency_levels[0])" number="194" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_1 in dependency_levels[1])" number="195" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_2 in dependency_levels[1])" number="196" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_3 in dependency_levels[2])" number="197" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_4 in dependency_levels[0])" number="198" precision="any"/><line any_info="No Anys on this line!" content="" number="199" precision="empty"/><line any_info="No Anys on this line!" content="    def test_dependency_order_resolution_with_circular_dependency_expect_error(self):" number="200" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        instance = TestClassForDependencyResolution(&quot;base&quot;)" number="201" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_4.depends_on(instance.instance_3)" number="202" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_3.depends_on(instance.instance_2)" number="203" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_2.depends_on(instance.instance_1)" number="204" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_1.depends_on(instance.instance_0)" number="205" precision="any"/><line any_info="No Anys on this line!" content="" number="206" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        instance.instance_0._Instance__depends_on.add(instance.instance_4)" number="207" precision="any"/><line any_info="No Anys on this line!" content="" number="208" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(RecursionError):" number="209" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)&#10;Unimported (x1)" content="            resolve_dependency_graph(instance.get_protected().get_nested_instances().values())" number="210" precision="any"/><line any_info="No Anys on this line!" content="" number="211" precision="empty"/><line any_info="No Anys on this line!" content="    def test_dependency_order_resolution_with_extra_dependency(self):" number="212" precision="any"/><line any_info="No Anys on this line!" content="        # The case shall be tested, where one instance has an extra dependency" number="213" precision="empty"/><line any_info="No Anys on this line!" content="        # which is not in the context of the resolution. This can occur for example" number="214" precision="empty"/><line any_info="No Anys on this line!" content="        # if two plugin instances are implementing different interfaces, but" number="215" precision="empty"/><line any_info="No Anys on this line!" content="        # one depends on the other. Since those plugin instances will not be" number="216" precision="empty"/><line any_info="No Anys on this line!" content="        # present for the same type in plugin type registry, those cannot" number="217" precision="empty"/><line any_info="No Anys on this line!" content="        # be used for dependency resolution." number="218" precision="empty"/><line any_info="No Anys on this line!" content="" number="219" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        instance = TestClassForDependencyResolution(&quot;base&quot;)" number="220" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_1.depends_on(instance.instance_0)" number="221" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_2.depends_on(instance.instance_1)" number="222" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_3.depends_on(instance.instance_2)" number="223" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        instance.instance_4.depends_on(instance.instance_3)" number="224" precision="any"/><line any_info="No Anys on this line!" content="" number="225" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)&#10;Unimported (x1)" content="        instance.instance_4._Instance__depends_on.add(BlankInstance(&quot;inst&quot;))" number="226" precision="any"/><line any_info="No Anys on this line!" content="" number="227" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Unimported (x1)" content="        dependency_levels = resolve_dependency_graph(instance.get_protected().get_nested_instances().values())" number="228" precision="any"/><line any_info="No Anys on this line!" content="" number="229" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(5, len(dependency_levels))" number="230" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[0]))" number="231" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[1]))" number="232" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[2]))" number="233" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[3]))" number="234" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1, len(dependency_levels[4]))" number="235" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_0 in dependency_levels[0])" number="236" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_1 in dependency_levels[1])" number="237" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_2 in dependency_levels[2])" number="238" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_3 in dependency_levels[3])" number="239" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.instance_4 in dependency_levels[4])" number="240" precision="any"/><line any_info="No Anys on this line!" content="" number="241" precision="empty"/><line any_info="No Anys on this line!" content="    def test_object_equality(self):" number="242" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="243" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(l0, l0)" number="244" precision="any"/><line any_info="No Anys on this line!" content="" number="245" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0_other = TestClassL0(&quot;l0&quot;)" number="246" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(l0, l0_other)" number="247" precision="any"/><line any_info="No Anys on this line!" content="" number="248" precision="empty"/><line any_info="No Anys on this line!" content="    def test_object_inequality_on_simple_name(self):" number="249" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="250" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0_other = TestClassL0(&quot;l0o&quot;)" number="251" precision="any"/><line any_info="No Anys on this line!" content="" number="252" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(l0, l0_other)" number="253" precision="any"/><line any_info="No Anys on this line!" content="" number="254" precision="empty"/><line any_info="No Anys on this line!" content="        # Nested case" number="255" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="256" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)&#10;Explicit (x1)&#10;Unimported (x1)" content="        setattr(l0.l10.l2.l3, f&quot;_{Instance.__name__}__simple_name&quot;, &quot;new_name&quot;)" number="257" precision="any"/><line any_info="No Anys on this line!" content="" number="258" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(l0, l0_other)" number="259" precision="any"/><line any_info="No Anys on this line!" content="" number="260" precision="empty"/><line any_info="No Anys on this line!" content="    def test_object_inequality_on_depends_on(self):" number="261" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="262" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0_other = TestClassL0(&quot;l0&quot;)" number="263" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        depends_on = {l0_other}  # Mocking depends_on" number="264" precision="any"/><line any_info="No Anys on this line!" content="" number="265" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)&#10;Explicit (x1)&#10;Unimported (x1)" content="        setattr(l0, f&quot;_{Instance.__name__}__depends_on&quot;, depends_on)" number="266" precision="any"/><line any_info="No Anys on this line!" content="" number="267" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(l0, l0_other)" number="268" precision="any"/><line any_info="No Anys on this line!" content="" number="269" precision="empty"/><line any_info="No Anys on this line!" content="        # Nested case" number="270" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="271" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)&#10;Explicit (x1)&#10;Unimported (x1)" content="        setattr(l0.l10.l2.l3, f&quot;_{Instance.__name__}__depends_on&quot;, depends_on)" number="272" precision="any"/><line any_info="No Anys on this line!" content="" number="273" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(l0, l0_other)" number="274" precision="any"/><line any_info="No Anys on this line!" content="" number="275" precision="empty"/><line any_info="No Anys on this line!" content="    def test_object_inequality_on_parameters(self):" number="276" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="277" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0_other = TestClassL0(&quot;l0&quot;)" number="278" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;param&quot;, &quot;val&quot;)" number="279" precision="any"/><line any_info="No Anys on this line!" content="" number="280" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(l0, l0_other)" number="281" precision="any"/><line any_info="No Anys on this line!" content="" number="282" precision="empty"/><line any_info="No Anys on this line!" content="        # Nested case" number="283" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="284" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        l0.l10.l2.l3.set_parameter(&quot;param&quot;, &quot;val&quot;)" number="285" precision="any"/><line any_info="No Anys on this line!" content="" number="286" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertNotEqual(l0, l0_other)" number="287" precision="any"/><line any_info="No Anys on this line!" content="" number="288" precision="empty"/><line any_info="No Anys on this line!" content="    def test_inclusive_cascaded_parameters(self):" number="289" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="290" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;l0&quot;, &quot;l0&quot;)" number="291" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;#l01&quot;, &quot;l01&quot;)" number="292" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;##l012&quot;, &quot;l012&quot;)" number="293" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;###l0123&quot;, &quot;l0123&quot;)" number="294" precision="any"/><line any_info="No Anys on this line!" content="" number="295" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(7, len(l0.get_protected().get_parameters()))" number="296" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0&quot;, l0.get_parameter(&quot;l0&quot;))" number="297" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l01&quot;, l0.get_parameter(&quot;l01&quot;))" number="298" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l012&quot;, l0.get_parameter(&quot;l012&quot;))" number="299" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0123&quot;, l0.get_parameter(&quot;l0123&quot;))" number="300" precision="any"/><line any_info="No Anys on this line!" content="" number="301" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(6, len(l0.l10.get_protected().get_parameters()))" number="302" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l01&quot;, l0.l10.get_parameter(&quot;l01&quot;))" number="303" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l012&quot;, l0.l10.get_parameter(&quot;l012&quot;))" number="304" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l0123&quot;, l0.l10.get_parameter(&quot;l0123&quot;))" number="305" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(6, len(l0.l11.get_protected().get_parameters()))" number="306" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l01&quot;, l0.l11.get_parameter(&quot;l01&quot;))" number="307" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l012&quot;, l0.l11.get_parameter(&quot;l012&quot;))" number="308" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l0123&quot;, l0.l11.get_parameter(&quot;l0123&quot;))" number="309" precision="any"/><line any_info="No Anys on this line!" content="" number="310" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(5, len(l0.l10.l2.get_protected().get_parameters()))" number="311" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l012&quot;, l0.l10.l2.get_parameter(&quot;l012&quot;))" number="312" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l0123&quot;, l0.l10.l2.get_parameter(&quot;l0123&quot;))" number="313" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(5, len(l0.l11.l2.get_protected().get_parameters()))" number="314" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l012&quot;, l0.l11.l2.get_parameter(&quot;l012&quot;))" number="315" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l0123&quot;, l0.l11.l2.get_parameter(&quot;l0123&quot;))" number="316" precision="any"/><line any_info="No Anys on this line!" content="" number="317" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(4, len(l0.l10.l2.l3.get_protected().get_parameters()))" number="318" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l0123&quot;, l0.l10.l2.l3.get_parameter(&quot;l0123&quot;))" number="319" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(4, len(l0.l11.l2.l3.get_protected().get_parameters()))" number="320" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l0123&quot;, l0.l11.l2.l3.get_parameter(&quot;l0123&quot;))" number="321" precision="any"/><line any_info="No Anys on this line!" content="" number="322" precision="empty"/><line any_info="No Anys on this line!" content="    def test_exclusive_cascaded_parameters(self):" number="323" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="324" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;&gt;l1&quot;, &quot;l1&quot;)" number="325" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;&gt;&gt;l2&quot;, &quot;l2&quot;)" number="326" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;&gt;&gt;&gt;l3&quot;, &quot;l3&quot;)" number="327" precision="any"/><line any_info="No Anys on this line!" content="" number="328" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(4, len(l0.l10.get_protected().get_parameters()))" number="329" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l1&quot;, l0.l10.get_parameter(&quot;l1&quot;))" number="330" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(4, len(l0.l11.get_protected().get_parameters()))" number="331" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l1&quot;, l0.l11.get_parameter(&quot;l1&quot;))" number="332" precision="any"/><line any_info="No Anys on this line!" content="" number="333" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(4, len(l0.l10.l2.get_protected().get_parameters()))" number="334" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l2&quot;, l0.l10.l2.get_parameter(&quot;l2&quot;))" number="335" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(4, len(l0.l11.l2.get_protected().get_parameters()))" number="336" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l2&quot;, l0.l11.l2.get_parameter(&quot;l2&quot;))" number="337" precision="any"/><line any_info="No Anys on this line!" content="" number="338" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(4, len(l0.l10.l2.l3.get_protected().get_parameters()))" number="339" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l3&quot;, l0.l10.l2.l3.get_parameter(&quot;l3&quot;))" number="340" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(4, len(l0.l11.l2.l3.get_protected().get_parameters()))" number="341" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l3&quot;, l0.l11.l2.l3.get_parameter(&quot;l3&quot;))" number="342" precision="any"/><line any_info="No Anys on this line!" content="" number="343" precision="empty"/><line any_info="No Anys on this line!" content="    def test_mixed_cascaded_parameters(self):" number="344" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="345" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;&gt;##l123&quot;, &quot;l123&quot;)" number="346" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;&gt;&gt;#l23&quot;, &quot;l23&quot;)" number="347" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;#&gt;&gt;l03&quot;, &quot;l03&quot;)" number="348" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;##&gt;l013&quot;, &quot;l013&quot;)" number="349" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;&gt;#&gt;l13&quot;, &quot;l13&quot;)" number="350" precision="any"/><line any_info="No Anys on this line!" content="" number="351" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(5, len(l0.get_protected().get_parameters()))" number="352" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l03&quot;, l0.get_parameter(&quot;l03&quot;))" number="353" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l013&quot;, l0.get_parameter(&quot;l013&quot;))" number="354" precision="any"/><line any_info="No Anys on this line!" content="" number="355" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(6, len(l0.l10.get_protected().get_parameters()))" number="356" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l123&quot;, l0.l10.get_parameter(&quot;l123&quot;))" number="357" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l013&quot;, l0.l10.get_parameter(&quot;l013&quot;))" number="358" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l13&quot;, l0.l10.get_parameter(&quot;l13&quot;))" number="359" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(6, len(l0.l11.get_protected().get_parameters()))" number="360" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l123&quot;, l0.l11.get_parameter(&quot;l123&quot;))" number="361" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l013&quot;, l0.l11.get_parameter(&quot;l013&quot;))" number="362" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l13&quot;, l0.l11.get_parameter(&quot;l13&quot;))" number="363" precision="any"/><line any_info="No Anys on this line!" content="" number="364" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(5, len(l0.l10.l2.get_protected().get_parameters()))" number="365" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l123&quot;, l0.l10.l2.get_parameter(&quot;l123&quot;))" number="366" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l23&quot;, l0.l10.l2.get_parameter(&quot;l23&quot;))" number="367" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(5, len(l0.l11.l2.get_protected().get_parameters()))" number="368" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l123&quot;, l0.l11.l2.get_parameter(&quot;l123&quot;))" number="369" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l23&quot;, l0.l11.l2.get_parameter(&quot;l23&quot;))" number="370" precision="any"/><line any_info="No Anys on this line!" content="" number="371" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(8, len(l0.l10.l2.l3.get_protected().get_parameters()))" number="372" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l123&quot;, l0.l10.l2.l3.get_parameter(&quot;l123&quot;))" number="373" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l23&quot;, l0.l10.l2.l3.get_parameter(&quot;l23&quot;))" number="374" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l03&quot;, l0.l10.l2.l3.get_parameter(&quot;l03&quot;))" number="375" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l013&quot;, l0.l10.l2.l3.get_parameter(&quot;l013&quot;))" number="376" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l13&quot;, l0.l10.l2.l3.get_parameter(&quot;l13&quot;))" number="377" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(8, len(l0.l11.l2.l3.get_protected().get_parameters()))" number="378" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l123&quot;, l0.l11.l2.l3.get_parameter(&quot;l123&quot;))" number="379" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l23&quot;, l0.l11.l2.l3.get_parameter(&quot;l23&quot;))" number="380" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l03&quot;, l0.l11.l2.l3.get_parameter(&quot;l03&quot;))" number="381" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l013&quot;, l0.l11.l2.l3.get_parameter(&quot;l013&quot;))" number="382" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l13&quot;, l0.l11.l2.l3.get_parameter(&quot;l13&quot;))" number="383" precision="any"/><line any_info="No Anys on this line!" content="" number="384" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_setting_with_override(self):" number="385" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="386" precision="any"/><line any_info="No Anys on this line!" content="" number="387" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0.l10.set_parameter(&quot;l01&quot;, &quot;orig&quot;)" number="388" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0.l10.set_parameter(&quot;l01&quot;, &quot;new&quot;)" number="389" precision="any"/><line any_info="No Anys on this line!" content="" number="390" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;new&quot;, l0.l10.get_parameter(&quot;l01&quot;))" number="391" precision="any"/><line any_info="No Anys on this line!" content="" number="392" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_setting_cascaded_with_override(self):" number="393" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="394" precision="any"/><line any_info="No Anys on this line!" content="" number="395" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0.l10.set_parameter(&quot;l01&quot;, &quot;orig&quot;)" number="396" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;&gt;l01&quot;, &quot;new&quot;)" number="397" precision="any"/><line any_info="No Anys on this line!" content="" number="398" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;new&quot;, l0.l10.get_parameter(&quot;l01&quot;))" number="399" precision="any"/><line any_info="No Anys on this line!" content="" number="400" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;#l01&quot;, &quot;latest&quot;)" number="401" precision="any"/><line any_info="No Anys on this line!" content="" number="402" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;latest&quot;, l0.l10.get_parameter(&quot;l01&quot;))" number="403" precision="any"/><line any_info="No Anys on this line!" content="" number="404" precision="empty"/><line any_info="No Anys on this line!" content="    def test_missing_required_parameters(self):" number="405" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="406" precision="any"/><line any_info="No Anys on this line!" content="" number="407" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(7, len(l0.get_missing_required_parameters()))" number="408" precision="any"/><line any_info="No Anys on this line!" content="" number="409" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;###req_str&quot;, &quot;val&quot;)" number="410" precision="any"/><line any_info="No Anys on this line!" content="" number="411" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(0, len(l0.get_missing_required_parameters()))" number="412" precision="any"/><line any_info="No Anys on this line!" content="" number="413" precision="empty"/><line any_info="No Anys on this line!" content="    def test_expected_parameter_setting(self):" number="414" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="415" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;###req_str&quot;, &quot;req&quot;)" number="416" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;###opt_str&quot;, &quot;opt&quot;)" number="417" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;###optional_int&quot;, 1234)" number="418" precision="any"/><line any_info="No Anys on this line!" content="" number="419" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(&quot;req&quot;, l0.req_str)" number="420" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(&quot;opt&quot;, l0.opt_str)" number="421" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(1234, l0.opt_int)" number="422" precision="any"/><line any_info="No Anys on this line!" content="" number="423" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;req&quot;, l0.l10.req_str)" number="424" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;opt&quot;, l0.l10.opt_str)" number="425" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1234, l0.l10.opt_int)" number="426" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;req&quot;, l0.l11.req_str)" number="427" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;opt&quot;, l0.l11.opt_str)" number="428" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(1234, l0.l11.opt_int)" number="429" precision="any"/><line any_info="No Anys on this line!" content="" number="430" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;req&quot;, l0.l10.l2.req_str)" number="431" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;opt&quot;, l0.l10.l2.opt_str)" number="432" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(1234, l0.l10.l2.opt_int)" number="433" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;req&quot;, l0.l11.l2.req_str)" number="434" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;opt&quot;, l0.l11.l2.opt_str)" number="435" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(1234, l0.l11.l2.opt_int)" number="436" precision="any"/><line any_info="No Anys on this line!" content="" number="437" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;req&quot;, l0.l10.l2.l3.req_str)" number="438" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;opt&quot;, l0.l10.l2.l3.opt_str)" number="439" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(1234, l0.l10.l2.l3.opt_int)" number="440" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;req&quot;, l0.l11.l2.l3.req_str)" number="441" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;opt&quot;, l0.l11.l2.l3.opt_str)" number="442" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(1234, l0.l11.l2.l3.opt_int)" number="443" precision="any"/><line any_info="No Anys on this line!" content="" number="444" precision="empty"/><line any_info="No Anys on this line!" content="    def test_parameter_template_interpretation(self):" number="445" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PYPZ_TEST_ENV_VAR&quot;] = &quot;testValue&quot;" number="446" precision="any"/><line any_info="No Anys on this line!" content="" number="447" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="448" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;###req_str&quot;, &quot;${env:PYPZ_TEST_ENV_VAR}&quot;)" number="449" precision="any"/><line any_info="No Anys on this line!" content="" number="450" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(&quot;testValue&quot;, l0.req_str)" number="451" precision="any"/><line any_info="No Anys on this line!" content="" number="452" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;testValue&quot;, l0.l10.req_str)" number="453" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;testValue&quot;, l0.l11.req_str)" number="454" precision="any"/><line any_info="No Anys on this line!" content="" number="455" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;testValue&quot;, l0.l10.l2.req_str)" number="456" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;testValue&quot;, l0.l11.l2.req_str)" number="457" precision="any"/><line any_info="No Anys on this line!" content="" number="458" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;testValue&quot;, l0.l10.l2.l3.req_str)" number="459" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;testValue&quot;, l0.l11.l2.l3.req_str)" number="460" precision="any"/><line any_info="No Anys on this line!" content="" number="461" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_with_mismatching_name(self):" number="462" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="463" precision="any"/><line any_info="No Anys on this line!" content="" number="464" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(ValueError):" number="465" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="            l0.update(InstanceDTO(name=&quot;mismatching&quot;))" number="466" precision="any"/><line any_info="No Anys on this line!" content="" number="467" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_with_valid_spec_name(self):" number="468" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="469" precision="any"/><line any_info="No Anys on this line!" content="" number="470" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="471" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)&#10;Unimported (x2)" content="            l0.update(InstanceDTO(spec=SpecDTO(name=l0.get_protected().get_spec_name())))" number="472" precision="any"/><line any_info="No Anys on this line!" content="        except AttributeError:" number="473" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.fail()" number="474" precision="any"/><line any_info="No Anys on this line!" content="" number="475" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_with_invalid_spec_name(self):" number="476" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="477" precision="any"/><line any_info="No Anys on this line!" content="" number="478" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="479" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x2)" content="            l0.update(InstanceDTO(spec=SpecDTO(name=&quot;invalid_name&quot;)))" number="480" precision="any"/><line any_info="No Anys on this line!" content="" number="481" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_with_valid_source_types(self):" number="482" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="483" precision="any"/><line any_info="No Anys on this line!" content="" number="484" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="485" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            l0.update(&quot;{}&quot;)" number="486" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            l0.update({})" number="487" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        except AttributeError | TypeError:" number="488" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.fail()" number="489" precision="any"/><line any_info="No Anys on this line!" content="" number="490" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_with_invalid_source_types(self):" number="491" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="492" precision="any"/><line any_info="No Anys on this line!" content="" number="493" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="494" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            l0.update(0)" number="495" precision="any"/><line any_info="No Anys on this line!" content="" number="496" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_parameters(self):" number="497" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="498" precision="any"/><line any_info="No Anys on this line!" content="" number="499" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        to_update = InstanceDTO(parameters={" number="500" precision="any"/><line any_info="No Anys on this line!" content="                &quot;l0&quot;: &quot;l0&quot;," number="501" precision="any"/><line any_info="No Anys on this line!" content="                &quot;#l01&quot;: &quot;l01&quot;," number="502" precision="any"/><line any_info="No Anys on this line!" content="                &quot;##l012&quot;: &quot;l012&quot;," number="503" precision="any"/><line any_info="No Anys on this line!" content="                &quot;###l0123&quot;: &quot;l0123&quot;," number="504" precision="any"/><line any_info="No Anys on this line!" content="            })" number="505" precision="empty"/><line any_info="No Anys on this line!" content="" number="506" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0.update(to_update)" number="507" precision="any"/><line any_info="No Anys on this line!" content="" number="508" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(7, len(l0.get_protected().get_parameters()))" number="509" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0&quot;, l0.get_parameter(&quot;l0&quot;))" number="510" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l01&quot;, l0.get_parameter(&quot;l01&quot;))" number="511" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l012&quot;, l0.get_parameter(&quot;l012&quot;))" number="512" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0123&quot;, l0.get_parameter(&quot;l0123&quot;))" number="513" precision="any"/><line any_info="No Anys on this line!" content="" number="514" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(6, len(l0.l10.get_protected().get_parameters()))" number="515" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l01&quot;, l0.get_parameter(&quot;l01&quot;))" number="516" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l012&quot;, l0.get_parameter(&quot;l012&quot;))" number="517" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0123&quot;, l0.get_parameter(&quot;l0123&quot;))" number="518" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(6, len(l0.l11.get_protected().get_parameters()))" number="519" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l01&quot;, l0.get_parameter(&quot;l01&quot;))" number="520" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l012&quot;, l0.get_parameter(&quot;l012&quot;))" number="521" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0123&quot;, l0.get_parameter(&quot;l0123&quot;))" number="522" precision="any"/><line any_info="No Anys on this line!" content="" number="523" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(5, len(l0.l10.l2.get_protected().get_parameters()))" number="524" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l012&quot;, l0.get_parameter(&quot;l012&quot;))" number="525" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0123&quot;, l0.get_parameter(&quot;l0123&quot;))" number="526" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(5, len(l0.l11.l2.get_protected().get_parameters()))" number="527" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l012&quot;, l0.get_parameter(&quot;l012&quot;))" number="528" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0123&quot;, l0.get_parameter(&quot;l0123&quot;))" number="529" precision="any"/><line any_info="No Anys on this line!" content="" number="530" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(4, len(l0.l10.l2.l3.get_protected().get_parameters()))" number="531" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0123&quot;, l0.get_parameter(&quot;l0123&quot;))" number="532" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(4, len(l0.l11.l2.l3.get_protected().get_parameters()))" number="533" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;l0123&quot;, l0.get_parameter(&quot;l0123&quot;))" number="534" precision="any"/><line any_info="No Anys on this line!" content="" number="535" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_nested_instances_with_parameters_and_dependencies(self):" number="536" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassWithDifferentNestedType(&quot;base&quot;)" number="537" precision="any"/><line any_info="No Anys on this line!" content="" number="538" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x2)" content="        to_update = InstanceDTO(spec=SpecDTO(nestedInstances=[" number="539" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            InstanceDTO(name=&quot;a&quot;, parameters={&quot;updated_param&quot;: &quot;value&quot;})," number="540" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            InstanceDTO(name=&quot;b&quot;, dependsOn=[&quot;c&quot;])" number="541" precision="any"/><line any_info="No Anys on this line!" content="        ]))" number="542" precision="empty"/><line any_info="No Anys on this line!" content="" number="543" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0.update(to_update)" number="544" precision="any"/><line any_info="No Anys on this line!" content="" number="545" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;value&quot;, l0.a.get_parameter(&quot;updated_param&quot;))" number="546" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(1, len(l0.b.get_protected().get_depends_on()))" number="547" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x12)" content="        self.assertEqual(l0.c, l0.b.get_protected().get_depends_on().pop())" number="548" precision="any"/><line any_info="No Anys on this line!" content="" number="549" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_with_missing_dependency_instance(self):" number="550" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassWithDifferentNestedType(&quot;base&quot;)" number="551" precision="any"/><line any_info="No Anys on this line!" content="" number="552" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x2)" content="        to_update = InstanceDTO(spec=SpecDTO(nestedInstances=[" number="553" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            InstanceDTO(name=&quot;b&quot;, dependsOn=[&quot;missing&quot;])" number="554" precision="any"/><line any_info="No Anys on this line!" content="        ]))" number="555" precision="empty"/><line any_info="No Anys on this line!" content="" number="556" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="557" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            l0.update(to_update)" number="558" precision="any"/><line any_info="No Anys on this line!" content="" number="559" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_with_multilevel_nesting(self):" number="560" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="561" precision="any"/><line any_info="No Anys on this line!" content="" number="562" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x2)" content="        to_update = InstanceDTO(spec=SpecDTO(nestedInstances=[" number="563" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            InstanceDTO(name=&quot;l10&quot;, parameters={&quot;l10&quot;: &quot;l10&quot;}," number="564" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="                        spec=SpecDTO(nestedInstances=[" number="565" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="                            InstanceDTO(name=&quot;l2&quot;," number="566" precision="any"/><line any_info="No Anys on this line!" content="                                        parameters={&quot;l2&quot;: &quot;l2&quot;}," number="567" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="                                        spec=SpecDTO(nestedInstances=[" number="568" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="                                            InstanceDTO(name=&quot;l3&quot;," number="569" precision="any"/><line any_info="No Anys on this line!" content="                                                        parameters={&quot;l3&quot;: &quot;l3&quot;})" number="570" precision="any"/><line any_info="No Anys on this line!" content="                                        ]))" number="571" precision="empty"/><line any_info="No Anys on this line!" content="                        ]))" number="572" precision="empty"/><line any_info="No Anys on this line!" content="        ]))" number="573" precision="empty"/><line any_info="No Anys on this line!" content="" number="574" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0.update(to_update)" number="575" precision="any"/><line any_info="No Anys on this line!" content="" number="576" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        self.assertEqual(4, len(l0.l10.get_protected().get_parameters()))" number="577" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;l10&quot;, l0.l10.get_parameter(&quot;l10&quot;))" number="578" precision="any"/><line any_info="No Anys on this line!" content="" number="579" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)" content="        self.assertEqual(4, len(l0.l10.l2.get_protected().get_parameters()))" number="580" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;l2&quot;, l0.l10.l2.get_parameter(&quot;l2&quot;))" number="581" precision="any"/><line any_info="No Anys on this line!" content="" number="582" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="        self.assertEqual(4, len(l0.l10.l2.l3.get_protected().get_parameters()))" number="583" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="        self.assertEqual(&quot;l3&quot;, l0.l10.l2.l3.get_parameter(&quot;l3&quot;))" number="584" precision="any"/><line any_info="No Anys on this line!" content="" number="585" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_update_with_multilevel_cascading_parameters(self):" number="586" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="587" precision="empty"/><line any_info="No Anys on this line!" content="        The closer the parameter setting is to the actual instance" number="588" precision="empty"/><line any_info="No Anys on this line!" content="        the higher precedence it has. For example, if there is 3 levels" number="589" precision="empty"/><line any_info="No Anys on this line!" content="        0,1 and 2 and a cascading parameter is set on 0 and 1 for the" number="590" precision="empty"/><line any_info="No Anys on this line!" content="        instance 2 with the same name but different value, the cascading" number="591" precision="empty"/><line any_info="No Anys on this line!" content="        parameter on level 1 shall win over level 0. However, if there" number="592" precision="empty"/><line any_info="No Anys on this line!" content="        is a direct parameter setting on level 2, then it has the highest" number="593" precision="empty"/><line any_info="No Anys on this line!" content="        precedence." number="594" precision="empty"/><line any_info="No Anys on this line!" content="        Note that, if there is a 2x inclusive cascading parameter setting" number="595" precision="empty"/><line any_info="No Anys on this line!" content="        on level 0 and a direct parameter setting on level 1, then the" number="596" precision="empty"/><line any_info="No Anys on this line!" content="        cascading shall still &quot;pierce&quot; through to level 2." number="597" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="598" precision="empty"/><line any_info="No Anys on this line!" content="" number="599" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;l0&quot;)" number="600" precision="any"/><line any_info="No Anys on this line!" content="" number="601" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        to_update = InstanceDTO(parameters={" number="602" precision="any"/><line any_info="No Anys on this line!" content="            &quot;##param_1&quot;: &quot;cascaded_l0&quot;," number="603" precision="any"/><line any_info="No Anys on this line!" content="            &quot;##param_2&quot;: &quot;cascaded_l0&quot;" number="604" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="        }, spec=SpecDTO(nestedInstances=[" number="605" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            InstanceDTO(name=&quot;l10&quot;," number="606" precision="any"/><line any_info="No Anys on this line!" content="                        parameters={" number="607" precision="empty"/><line any_info="No Anys on this line!" content="                            &quot;#param_1&quot;: &quot;cascaded_l1&quot;," number="608" precision="any"/><line any_info="No Anys on this line!" content="                            &quot;param_2&quot;: &quot;direct&quot;" number="609" precision="any"/><line any_info="No Anys on this line!" content="                        })" number="610" precision="empty"/><line any_info="No Anys on this line!" content="        ]))" number="611" precision="empty"/><line any_info="No Anys on this line!" content="" number="612" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0.update(to_update)" number="613" precision="any"/><line any_info="No Anys on this line!" content="" number="614" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;cascaded_l0&quot;, l0.get_parameter(&quot;param_1&quot;))" number="615" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;cascaded_l0&quot;, l0.get_parameter(&quot;param_2&quot;))" number="616" precision="any"/><line any_info="No Anys on this line!" content="" number="617" precision="empty"/><line any_info="No Anys on this line!" content="        # Direct parameter setting has the highest precedence" number="618" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;cascaded_l1&quot;, l0.l10.get_parameter(&quot;param_1&quot;))" number="619" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;direct&quot;, l0.l10.get_parameter(&quot;param_2&quot;))" number="620" precision="any"/><line any_info="No Anys on this line!" content="" number="621" precision="empty"/><line any_info="No Anys on this line!" content="        # Cascaded parameter shall &quot;pierce&quot; through i.e., direct parameter" number="622" precision="empty"/><line any_info="No Anys on this line!" content="        # setting shall not stop cascading" number="623" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;cascaded_l1&quot;, l0.l10.l2.get_parameter(&quot;param_1&quot;))" number="624" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;cascaded_l0&quot;, l0.l11.l2.get_parameter(&quot;param_2&quot;))" number="625" precision="any"/><line any_info="No Anys on this line!" content="" number="626" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_retrieval_with_spec_name(self):" number="627" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;instance&quot;)" number="628" precision="any"/><line any_info="No Anys on this line!" content="" number="629" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        to_retrieve = InstanceDTO(name=&quot;instance&quot;," number="630" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)&#10;Unimported (x1)" content="                                  spec=SpecDTO(name=l0.get_protected().get_spec_name()))" number="631" precision="any"/><line any_info="No Anys on this line!" content="" number="632" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        l0_retrieved = Instance.create_from_dto(to_retrieve)" number="633" precision="any"/><line any_info="No Anys on this line!" content="" number="634" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(l0, l0_retrieved)" number="635" precision="any"/><line any_info="No Anys on this line!" content="" number="636" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_retrieval_with_missing_instance_name_expect_error(self):" number="637" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;instance&quot;)" number="638" precision="any"/><line any_info="No Anys on this line!" content="" number="639" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)&#10;Unimported (x2)" content="        to_retrieve = InstanceDTO(spec=SpecDTO(name=l0.get_protected().get_spec_name()))" number="640" precision="any"/><line any_info="No Anys on this line!" content="" number="641" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(ValueError):" number="642" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_dto(to_retrieve)" number="643" precision="any"/><line any_info="No Anys on this line!" content="" number="644" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_retrieval_with_invalid_spec_name_expect_error(self):" number="645" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        to_retrieve = InstanceDTO(name=&quot;instance&quot;," number="646" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)&#10;Unimported (x1)" content="                                  spec=SpecDTO(name=f&quot;{TestClassL0.__module__}:invalid_name&quot;))" number="647" precision="any"/><line any_info="No Anys on this line!" content="" number="648" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="649" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_dto(to_retrieve)" number="650" precision="any"/><line any_info="No Anys on this line!" content="" number="651" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_retrieval_with_retrievable_nested_instance(self):" number="652" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;instance&quot;)" number="653" precision="any"/><line any_info="No Anys on this line!" content="" number="654" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        to_retrieve = \" number="655" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            InstanceDTO(name=&quot;instance&quot;," number="656" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)&#10;Unimported (x1)" content="                        spec=SpecDTO(name=l0.l10.get_protected().get_spec_name()," number="657" precision="any"/><line any_info="No Anys on this line!" content="                                     nestedInstances=[" number="658" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="                                         InstanceDTO(name=&quot;instance&quot;," number="659" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)&#10;Unimported (x1)" content="                                                     spec=SpecDTO(name=l0.get_protected().get_spec_name()))" number="660" precision="any"/><line any_info="No Anys on this line!" content="                                     ]))" number="661" precision="empty"/><line any_info="No Anys on this line!" content="" number="662" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        l0_retrieved = Instance.create_from_dto(to_retrieve)" number="663" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertTrue(l0_retrieved.get_protected().has_nested_instance(&quot;instance&quot;))" number="664" precision="any"/><line any_info="No Anys on this line!" content="" number="665" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_object_serde(self):" number="666" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;instance&quot;)" number="667" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)" content="        l0_from_json = Instance.create_from_string(str(l0))" number="668" precision="any"/><line any_info="No Anys on this line!" content="" number="669" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(l0, l0_from_json)" number="670" precision="any"/><line any_info="No Anys on this line!" content="" number="671" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_object_serde_with_parameter_type_set(self):" number="672" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;instance&quot;)" number="673" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;set&quot;, {0, 1, 2})" number="674" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)" content="        l0_from_json = Instance.create_from_string(str(l0))" number="675" precision="any"/><line any_info="No Anys on this line!" content="" number="676" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(l0, l0_from_json)" number="677" precision="any"/><line any_info="No Anys on this line!" content="" number="678" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_object_serde_with_parameter_type_list(self):" number="679" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;instance&quot;)" number="680" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;list&quot;, [0, 1, 2])" number="681" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)" content="        l0_from_json = Instance.create_from_string(str(l0))" number="682" precision="any"/><line any_info="No Anys on this line!" content="" number="683" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(l0, l0_from_json)" number="684" precision="any"/><line any_info="No Anys on this line!" content="" number="685" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_object_serde_with_parameter_type_dict(self):" number="686" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        l0 = TestClassL0(&quot;instance&quot;)" number="687" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        l0.set_parameter(&quot;dict&quot;, {&quot;a&quot;: 0, &quot;b&quot;: 0})" number="688" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)" content="        l0_from_json = Instance.create_from_string(str(l0))" number="689" precision="any"/><line any_info="No Anys on this line!" content="" number="690" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertEqual(l0, l0_from_json)" number="691" precision="any"/><line any_info="No Anys on this line!" content="" number="692" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_from_modified_json_string(self):" number="693" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PYPZ_TEST_ENV_VAR&quot;] = &quot;testValue&quot;" number="694" precision="any"/><line any_info="No Anys on this line!" content="" number="695" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="696" precision="any"/><line any_info="No Anys on this line!" content="        {" number="697" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;l2&quot;," number="698" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="699" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="700" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="701" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="702" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="703" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;core.test.specs_tests.instance_test_resources:TestClassL2&quot;," number="704" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;location&quot;: null," number="705" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;expectedParameters&quot;: {" number="706" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;req_str&quot;: {" number="707" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;type&quot;: &quot;str&quot;," number="708" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;required&quot;: true," number="709" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;description&quot;: null," number="710" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;currentValue&quot;: null" number="711" precision="empty"/><line any_info="No Anys on this line!" content="              }," number="712" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;opt_str&quot;: {" number="713" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;type&quot;: &quot;str&quot;," number="714" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;required&quot;: false," number="715" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;description&quot;: null," number="716" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;currentValue&quot;: &quot;str&quot;" number="717" precision="empty"/><line any_info="No Anys on this line!" content="              }," number="718" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;optional_int&quot;: {" number="719" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;type&quot;: &quot;int&quot;," number="720" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;required&quot;: false," number="721" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;description&quot;: null," number="722" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;currentValue&quot;: 1234" number="723" precision="empty"/><line any_info="No Anys on this line!" content="              }" number="724" precision="empty"/><line any_info="No Anys on this line!" content="            }," number="725" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [" number="726" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="727" precision="empty"/><line any_info="No Anys on this line!" content="            ]," number="728" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;nestedInstanceType&quot;: &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;," number="729" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;nestedInstances&quot;: [" number="730" precision="empty"/><line any_info="No Anys on this line!" content="              {" number="731" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;name&quot;: &quot;l3&quot;," number="732" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;parameters&quot;: {}," number="733" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;dependsOn&quot;: []," number="734" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;spec&quot;: {" number="735" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;name&quot;: &quot;core.test.specs_tests.instance_test_resources:TestClassL3&quot;," number="736" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;location&quot;: null," number="737" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;expectedParameters&quot;: {" number="738" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;req_str&quot;: {" number="739" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="740" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: true," number="741" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="742" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: null" number="743" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="744" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;opt_str&quot;: {" number="745" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="746" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="747" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="748" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: &quot;str&quot;" number="749" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="750" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;optional_int&quot;: {" number="751" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;int&quot;," number="752" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="753" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="754" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: 1234" number="755" precision="empty"/><line any_info="No Anys on this line!" content="                    }" number="756" precision="empty"/><line any_info="No Anys on this line!" content="                  }," number="757" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;types&quot;: [" number="758" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="759" precision="empty"/><line any_info="No Anys on this line!" content="                  ]," number="760" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstanceType&quot;: null," number="761" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstances&quot;: []" number="762" precision="empty"/><line any_info="No Anys on this line!" content="                }" number="763" precision="empty"/><line any_info="No Anys on this line!" content="              }" number="764" precision="empty"/><line any_info="No Anys on this line!" content="            ]" number="765" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="766" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="767" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="768" precision="empty"/><line any_info="No Anys on this line!" content="" number="769" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        new_l2 = Instance.create_from_string(json_string)" number="770" precision="any"/><line any_info="No Anys on this line!" content="" number="771" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;testValue&quot;, new_l2.get_parameter(&quot;env&quot;))" number="772" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;testValue&quot;, new_l2.l3.get_parameter(&quot;env&quot;))" number="773" precision="any"/><line any_info="No Anys on this line!" content="" number="774" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_non_existing_spec_module_expect_error(self):" number="775" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="776" precision="any"/><line any_info="No Anys on this line!" content="        {" number="777" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="778" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="779" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="780" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="781" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="782" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="783" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="784" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [" number="785" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="786" precision="empty"/><line any_info="No Anys on this line!" content="            ]" number="787" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="788" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="789" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="790" precision="empty"/><line any_info="No Anys on this line!" content="" number="791" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(ModuleNotFoundError):" number="792" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string)" number="793" precision="any"/><line any_info="No Anys on this line!" content="" number="794" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_non_existing_spec_class_expect_error(self):" number="795" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="796" precision="any"/><line any_info="No Anys on this line!" content="        {" number="797" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="798" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="799" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="800" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="801" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="802" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="803" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;pypz:NotExistingClass&quot;," number="804" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [" number="805" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="806" precision="empty"/><line any_info="No Anys on this line!" content="            ]" number="807" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="808" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="809" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="810" precision="empty"/><line any_info="No Anys on this line!" content="" number="811" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="812" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string)" number="813" precision="any"/><line any_info="No Anys on this line!" content="" number="814" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_non_existing_spec_expect_mock(self):" number="815" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PYPZ_TEST_ENV_VAR&quot;] = &quot;testValue&quot;" number="816" precision="any"/><line any_info="No Anys on this line!" content="" number="817" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="818" precision="any"/><line any_info="No Anys on this line!" content="        {" number="819" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="820" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="821" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="822" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="823" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="824" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="825" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="826" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [" number="827" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="828" precision="empty"/><line any_info="No Anys on this line!" content="            ]" number="829" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="830" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="831" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="832" precision="empty"/><line any_info="No Anys on this line!" content="" number="833" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        instance = Instance.create_from_string(json_string, mock_nonexistent=True)" number="834" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;instance&quot;, instance.get_simple_name())" number="835" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        self.assertEqual(&quot;dummy.module:NotExistingClass&quot;, instance.get_protected().get_spec_name())" number="836" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertEqual(&quot;testValue&quot;, instance.get_parameter(&quot;env&quot;))" number="837" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)" content="        self.assertTrue(issubclass(instance.__class__, Instance))" number="838" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(instance.__class__.__dict__[&quot;mocked&quot;])" number="839" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertEqual(&quot;dummy.module&quot;, instance.__class__.__dict__[&quot;__module__&quot;])" number="840" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)&#10;Explicit (x1)" content="        self.assertTrue(isinstance(instance.__class__.__dict__[&quot;_on_interrupt&quot;], types.FunctionType))" number="841" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)&#10;Explicit (x1)" content="        self.assertTrue(isinstance(instance.__class__.__dict__[&quot;_on_error&quot;], types.FunctionType))" number="842" precision="any"/><line any_info="No Anys on this line!" content="" number="843" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_non_existing_spec_with_multiple_types_expect_mock(self):" number="844" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PYPZ_TEST_ENV_VAR&quot;] = &quot;testValue&quot;" number="845" precision="any"/><line any_info="No Anys on this line!" content="" number="846" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="847" precision="any"/><line any_info="No Anys on this line!" content="        {" number="848" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="849" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="850" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="851" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="852" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="853" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="854" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="855" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [" number="856" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;," number="857" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.plugin.Plugin'&gt;&quot;," number="858" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.plugin.PortPlugin'&gt;&quot;," number="859" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.plugin.InputPortPlugin'&gt;&quot;," number="860" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.plugin.ResourceHandlerPlugin'&gt;&quot;" number="861" precision="empty"/><line any_info="No Anys on this line!" content="            ]" number="862" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="863" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="864" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="865" precision="empty"/><line any_info="No Anys on this line!" content="" number="866" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        instance = Instance.create_from_string(json_string, mock_nonexistent=True)" number="867" precision="any"/><line any_info="No Anys on this line!" content="" number="868" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)" content="        self.assertTrue(issubclass(instance.__class__, InputPortPlugin))" number="869" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)" content="        self.assertTrue(issubclass(instance.__class__, ResourceHandlerPlugin))" number="870" precision="any"/><line any_info="No Anys on this line!" content="" number="871" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_non_existing_spec_with_existing_and_non_existing_nested_instances_expect_mock(self):" number="872" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PYPZ_TEST_ENV_VAR&quot;] = &quot;testValue&quot;" number="873" precision="any"/><line any_info="No Anys on this line!" content="" number="874" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="875" precision="any"/><line any_info="No Anys on this line!" content="        {" number="876" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="877" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="878" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="879" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="880" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="881" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="882" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="883" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [" number="884" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="885" precision="empty"/><line any_info="No Anys on this line!" content="            ]," number="886" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;nestedInstanceType&quot;: &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;," number="887" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;nestedInstances&quot;: [" number="888" precision="empty"/><line any_info="No Anys on this line!" content="              {" number="889" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;name&quot;: &quot;existing&quot;," number="890" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;parameters&quot;: {}," number="891" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;dependsOn&quot;: []," number="892" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;spec&quot;: {" number="893" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;name&quot;: &quot;core.test.specs_tests.instance_test_resources:TestClassL3&quot;," number="894" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;location&quot;: null," number="895" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;expectedParameters&quot;: {" number="896" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;req_str&quot;: {" number="897" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="898" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: true," number="899" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="900" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: null" number="901" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="902" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;opt_str&quot;: {" number="903" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="904" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="905" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="906" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: &quot;str&quot;" number="907" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="908" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;optional_int&quot;: {" number="909" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;int&quot;," number="910" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="911" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="912" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: 1234" number="913" precision="empty"/><line any_info="No Anys on this line!" content="                    }" number="914" precision="empty"/><line any_info="No Anys on this line!" content="                  }," number="915" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;types&quot;: [" number="916" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="917" precision="empty"/><line any_info="No Anys on this line!" content="                  ]," number="918" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstanceType&quot;: null," number="919" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstances&quot;: []" number="920" precision="empty"/><line any_info="No Anys on this line!" content="                }" number="921" precision="empty"/><line any_info="No Anys on this line!" content="              }," number="922" precision="empty"/><line any_info="No Anys on this line!" content="              {" number="923" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;name&quot;: &quot;nonexisting&quot;," number="924" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;parameters&quot;: {}," number="925" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;dependsOn&quot;: []," number="926" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;spec&quot;: {" number="927" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;name&quot;: &quot;core.test.specs_tests.instance_test_resources:NonExisting&quot;," number="928" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;location&quot;: null," number="929" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;expectedParameters&quot;: {" number="930" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;req_str&quot;: {" number="931" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="932" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: true," number="933" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="934" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: null" number="935" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="936" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;opt_str&quot;: {" number="937" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="938" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="939" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="940" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: &quot;str&quot;" number="941" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="942" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;optional_int&quot;: {" number="943" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;int&quot;," number="944" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="945" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="946" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: 1234" number="947" precision="empty"/><line any_info="No Anys on this line!" content="                    }" number="948" precision="empty"/><line any_info="No Anys on this line!" content="                  }," number="949" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;types&quot;: [" number="950" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="951" precision="empty"/><line any_info="No Anys on this line!" content="                  ]," number="952" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstanceType&quot;: null," number="953" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstances&quot;: []" number="954" precision="empty"/><line any_info="No Anys on this line!" content="                }" number="955" precision="empty"/><line any_info="No Anys on this line!" content="              }" number="956" precision="empty"/><line any_info="No Anys on this line!" content="            ]" number="957" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="958" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="959" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="960" precision="empty"/><line any_info="No Anys on this line!" content="" number="961" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        instance = Instance.create_from_string(json_string, mock_nonexistent=True)" number="962" precision="any"/><line any_info="No Anys on this line!" content="" number="963" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertTrue(hasattr(instance, &quot;existing&quot;))" number="964" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        existing = instance.existing" number="965" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(isinstance(existing, TestClassL3))" number="966" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertNotIn(&quot;mocked&quot;, existing.__class__.__dict__)" number="967" precision="any"/><line any_info="No Anys on this line!" content="" number="968" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="        self.assertTrue(hasattr(instance, &quot;nonexisting&quot;))" number="969" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        non_existing = instance.nonexisting" number="970" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        self.assertTrue(isinstance(non_existing, Instance))" number="971" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        self.assertIn(&quot;mocked&quot;, non_existing.__class__.__dict__)" number="972" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        self.assertTrue(non_existing.__class__.__dict__[&quot;mocked&quot;])" number="973" precision="any"/><line any_info="No Anys on this line!" content="" number="974" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_not_expected_nested_instance(self):" number="975" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PYPZ_TEST_ENV_VAR&quot;] = &quot;testValue&quot;" number="976" precision="any"/><line any_info="No Anys on this line!" content="" number="977" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="978" precision="any"/><line any_info="No Anys on this line!" content="        {" number="979" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="980" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="981" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="982" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="983" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="984" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="985" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="986" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [" number="987" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="988" precision="empty"/><line any_info="No Anys on this line!" content="            ]," number="989" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;nestedInstances&quot;: [" number="990" precision="empty"/><line any_info="No Anys on this line!" content="              {" number="991" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;name&quot;: &quot;existing&quot;," number="992" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;parameters&quot;: {}," number="993" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;dependsOn&quot;: []," number="994" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;spec&quot;: {" number="995" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;name&quot;: &quot;core.test.specs_tests.instance_test_resources:TestClassL3&quot;," number="996" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;location&quot;: null," number="997" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;expectedParameters&quot;: {" number="998" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;req_str&quot;: {" number="999" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="1000" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: true," number="1001" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="1002" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: null" number="1003" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="1004" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;opt_str&quot;: {" number="1005" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="1006" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="1007" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="1008" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: &quot;str&quot;" number="1009" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="1010" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;optional_int&quot;: {" number="1011" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;int&quot;," number="1012" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="1013" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="1014" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: 1234" number="1015" precision="empty"/><line any_info="No Anys on this line!" content="                    }" number="1016" precision="empty"/><line any_info="No Anys on this line!" content="                  }," number="1017" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;types&quot;: [" number="1018" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="1019" precision="empty"/><line any_info="No Anys on this line!" content="                  ]," number="1020" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstanceType&quot;: null," number="1021" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstances&quot;: []" number="1022" precision="empty"/><line any_info="No Anys on this line!" content="                }" number="1023" precision="empty"/><line any_info="No Anys on this line!" content="              }" number="1024" precision="empty"/><line any_info="No Anys on this line!" content="            ]" number="1025" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="1026" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1027" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1028" precision="empty"/><line any_info="No Anys on this line!" content="" number="1029" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="1030" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1031" precision="any"/><line any_info="No Anys on this line!" content="" number="1032" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_mismatching_expected_nested_instance(self):" number="1033" precision="any"/><line any_info="No Anys on this line!" content="        os.environ[&quot;PYPZ_TEST_ENV_VAR&quot;] = &quot;testValue&quot;" number="1034" precision="any"/><line any_info="No Anys on this line!" content="" number="1035" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1036" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1037" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="1038" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="1039" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="1040" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="1041" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="1042" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="1043" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="1044" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [" number="1045" precision="empty"/><line any_info="No Anys on this line!" content="              &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="1046" precision="empty"/><line any_info="No Anys on this line!" content="            ]," number="1047" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;nestedInstanceType&quot;: &quot;&lt;class 'pypz.core.specs.plugin.Plugin'&gt;&quot;," number="1048" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;nestedInstances&quot;: [" number="1049" precision="empty"/><line any_info="No Anys on this line!" content="              {" number="1050" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;name&quot;: &quot;existing&quot;," number="1051" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;parameters&quot;: {}," number="1052" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;dependsOn&quot;: []," number="1053" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;spec&quot;: {" number="1054" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;name&quot;: &quot;core.test.specs_tests.instance_test_resources:TestClassL3&quot;," number="1055" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;location&quot;: null," number="1056" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;expectedParameters&quot;: {" number="1057" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;req_str&quot;: {" number="1058" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="1059" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: true," number="1060" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="1061" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: null" number="1062" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="1063" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;opt_str&quot;: {" number="1064" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;str&quot;," number="1065" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="1066" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="1067" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: &quot;str&quot;" number="1068" precision="empty"/><line any_info="No Anys on this line!" content="                    }," number="1069" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;optional_int&quot;: {" number="1070" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;type&quot;: &quot;int&quot;," number="1071" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;required&quot;: false," number="1072" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;description&quot;: null," number="1073" precision="empty"/><line any_info="No Anys on this line!" content="                      &quot;currentValue&quot;: 1234" number="1074" precision="empty"/><line any_info="No Anys on this line!" content="                    }" number="1075" precision="empty"/><line any_info="No Anys on this line!" content="                  }," number="1076" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;types&quot;: [" number="1077" precision="empty"/><line any_info="No Anys on this line!" content="                    &quot;&lt;class 'pypz.core.specs.instance.Instance'&gt;&quot;" number="1078" precision="empty"/><line any_info="No Anys on this line!" content="                  ]," number="1079" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstanceType&quot;: null," number="1080" precision="empty"/><line any_info="No Anys on this line!" content="                  &quot;nestedInstances&quot;: []" number="1081" precision="empty"/><line any_info="No Anys on this line!" content="                }" number="1082" precision="empty"/><line any_info="No Anys on this line!" content="              }" number="1083" precision="empty"/><line any_info="No Anys on this line!" content="            ]" number="1084" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="1085" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1086" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1087" precision="empty"/><line any_info="No Anys on this line!" content="" number="1088" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="1089" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1090" precision="any"/><line any_info="No Anys on this line!" content="" number="1091" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_non_existing_spec_with_invalid_type_expect_error(self):" number="1092" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1093" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1094" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="1095" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="1096" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="1097" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="1098" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="1099" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="1100" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="1101" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: []" number="1102" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="1103" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1104" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1105" precision="empty"/><line any_info="No Anys on this line!" content="" number="1106" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="1107" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1108" precision="any"/><line any_info="No Anys on this line!" content="" number="1109" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1110" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1111" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="1112" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="1113" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="1114" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="1115" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="1116" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="1117" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;" number="1118" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="1119" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1120" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1121" precision="empty"/><line any_info="No Anys on this line!" content="" number="1122" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="1123" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1124" precision="any"/><line any_info="No Anys on this line!" content="" number="1125" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1126" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1127" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="1128" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="1129" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="1130" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="1131" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="1132" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="1133" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="1134" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [&quot;builtins.str&quot;]" number="1135" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="1136" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1137" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1138" precision="empty"/><line any_info="No Anys on this line!" content="" number="1139" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="1140" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1141" precision="any"/><line any_info="No Anys on this line!" content="" number="1142" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_non_existing_spec_with_non_existing_type_expect_error(self):" number="1143" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1144" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1145" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="1146" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="1147" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="1148" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="1149" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="1150" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="1151" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="1152" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [&quot;dummy.NonExisting&quot;]" number="1153" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="1154" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1155" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1156" precision="empty"/><line any_info="No Anys on this line!" content="" number="1157" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(ModuleNotFoundError):" number="1158" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1159" precision="any"/><line any_info="No Anys on this line!" content="" number="1160" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1161" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1162" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="1163" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;parameters&quot;: {" number="1164" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;#env&quot;: &quot;${env:PYPZ_TEST_ENV_VAR}&quot;" number="1165" precision="empty"/><line any_info="No Anys on this line!" content="          }," number="1166" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;dependsOn&quot;: []," number="1167" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="1168" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;name&quot;: &quot;dummy.module:NotExistingClass&quot;," number="1169" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;types&quot;: [&quot;pypz.NonExisting&quot;]" number="1170" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="1171" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1172" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1173" precision="empty"/><line any_info="No Anys on this line!" content="" number="1174" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="1175" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1176" precision="any"/><line any_info="No Anys on this line!" content="" number="1177" precision="empty"/><line any_info="No Anys on this line!" content="    def test_instance_creation_with_missing_required_information_spec(self):" number="1178" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1179" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1180" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1181" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1182" precision="empty"/><line any_info="No Anys on this line!" content="" number="1183" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(ValueError):" number="1184" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string)" number="1185" precision="any"/><line any_info="No Anys on this line!" content="" number="1186" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1187" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1188" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;" number="1189" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1190" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1191" precision="empty"/><line any_info="No Anys on this line!" content="" number="1192" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="1193" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1194" precision="any"/><line any_info="No Anys on this line!" content="" number="1195" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        json_string = &quot;&quot;&quot;" number="1196" precision="any"/><line any_info="No Anys on this line!" content="        {" number="1197" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;name&quot;: &quot;instance&quot;," number="1198" precision="empty"/><line any_info="No Anys on this line!" content="          &quot;spec&quot;: {" number="1199" precision="empty"/><line any_info="No Anys on this line!" content="          }" number="1200" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="1201" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="1202" precision="empty"/><line any_info="No Anys on this line!" content="" number="1203" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="1204" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="            Instance.create_from_string(json_string, mock_nonexistent=True)" number="1205" precision="any"/></mypy-report-file>