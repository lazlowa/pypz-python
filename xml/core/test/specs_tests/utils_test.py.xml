<?xml-stylesheet type="text/xsl" href="../../../../mypy-html.xslt"?><mypy-report-file name="core\test\specs_tests\utils_test.py" module="core.test.specs_tests.utils_test"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import unittest" number="16" precision="precise"/><line any_info="No Anys on this line!" content="" number="17" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.commons.utils import is_type_allowed" number="18" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.instance import Instance" number="19" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.operator import Operator" number="20" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.plugin import InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin, Plugin, \" number="21" precision="any"/><line any_info="No Anys on this line!" content="    PortPlugin" number="22" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.specs.utils import remove_super_classes, load_class_by_name" number="23" precision="any"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="No Anys on this line!" content="" number="25" precision="empty"/><line any_info="No Anys on this line!" content="class UtilsTest(unittest.TestCase):" number="26" precision="precise"/><line any_info="No Anys on this line!" content="    def test_load_class_by_name_with_valid_class_name(self):" number="27" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        cls = load_class_by_name(&quot;pypz.core.specs.instance.Instance&quot;)" number="28" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertEqual(cls, Instance)" number="29" precision="any"/><line any_info="No Anys on this line!" content="" number="30" precision="empty"/><line any_info="No Anys on this line!" content="    def test_load_class_by_name_with_valid_nested_class_name(self):" number="31" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="        cls = load_class_by_name(&quot;pypz.core.specs.operator.Operator.Logger&quot;)" number="32" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="        self.assertEqual(cls, Operator.Logger)" number="33" precision="any"/><line any_info="No Anys on this line!" content="" number="34" precision="empty"/><line any_info="No Anys on this line!" content="    def test_load_class_by_name_with_invalid_class_name_expect_error(self):" number="35" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(ValueError):" number="36" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            load_class_by_name(&quot;Logger&quot;)" number="37" precision="any"/><line any_info="No Anys on this line!" content="" number="38" precision="empty"/><line any_info="No Anys on this line!" content="    def test_load_class_by_name_with_invalid_class_type_expect_error(self):" number="39" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(TypeError):" number="40" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            load_class_by_name(&quot;pypz.core.specs.instance&quot;)" number="41" precision="any"/><line any_info="No Anys on this line!" content="" number="42" precision="empty"/><line any_info="No Anys on this line!" content="    def test_load_class_by_name_with_non_existent_module(self):" number="43" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(ModuleNotFoundError):" number="44" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            load_class_by_name(&quot;nonexistent.DummyClass&quot;)" number="45" precision="any"/><line any_info="No Anys on this line!" content="" number="46" precision="empty"/><line any_info="No Anys on this line!" content="    def test_load_class_by_name_with_non_existent_class(self):" number="47" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        with self.assertRaises(AttributeError):" number="48" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x1)" content="            load_class_by_name(&quot;pypz.DummyClass&quot;)" number="49" precision="any"/><line any_info="No Anys on this line!" content="" number="50" precision="empty"/><line any_info="No Anys on this line!" content="    def test_remove_super_classes_cases(self):" number="51" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x4)" content="        self.assertEqual({InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin}," number="52" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x6)" content="                         remove_super_classes({Instance, Plugin, PortPlugin, InputPortPlugin, OutputPortPlugin," number="53" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                               ResourceHandlerPlugin, ServicePlugin}))" number="54" precision="any"/><line any_info="No Anys on this line!" content="" number="55" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x4)" content="        self.assertEqual({InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin}," number="56" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x5)" content="                         remove_super_classes({Plugin, PortPlugin, InputPortPlugin, OutputPortPlugin," number="57" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                                               ResourceHandlerPlugin, ServicePlugin, Instance}))" number="58" precision="any"/><line any_info="No Anys on this line!" content="" number="59" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x4)" content="        self.assertEqual({InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin}," number="60" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x5)" content="                         remove_super_classes({PortPlugin, InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin," number="61" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                                               ServicePlugin, Instance, Plugin}))" number="62" precision="any"/><line any_info="No Anys on this line!" content="" number="63" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x4)" content="        self.assertEqual({InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin}," number="64" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x4)" content="                         remove_super_classes({InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin," number="65" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="                                               ServicePlugin, Instance, Plugin, PortPlugin}))" number="66" precision="any"/><line any_info="No Anys on this line!" content="" number="67" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x4)" content="        self.assertEqual({InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin}," number="68" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x5)" content="                         remove_super_classes({OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin, Instance," number="69" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                                               Plugin, PortPlugin, InputPortPlugin}))" number="70" precision="any"/><line any_info="No Anys on this line!" content="" number="71" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x4)" content="        self.assertEqual({InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin}," number="72" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x6)" content="                         remove_super_classes({ResourceHandlerPlugin, ServicePlugin, Instance, Plugin, PortPlugin," number="73" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                               InputPortPlugin, OutputPortPlugin}))" number="74" precision="any"/><line any_info="No Anys on this line!" content="" number="75" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x4)" content="        self.assertEqual({InputPortPlugin, OutputPortPlugin, ResourceHandlerPlugin, ServicePlugin}," number="76" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Unimported (x6)" content="                         remove_super_classes({ServicePlugin, Instance, Plugin, PortPlugin, InputPortPlugin," number="77" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                               OutputPortPlugin, ResourceHandlerPlugin}))" number="78" precision="any"/><line any_info="No Anys on this line!" content="" number="79" precision="empty"/><line any_info="No Anys on this line!" content="    def test_is_type_allowed_with_simple_types(self):" number="80" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_type_allowed(&quot;string&quot;, (str, int, float)))" number="81" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_type_allowed(1, (str, int, float)))" number="82" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_type_allowed(1.0, (str, int, float)))" number="83" precision="any"/><line any_info="No Anys on this line!" content="" number="84" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)&#10;Explicit (x2)" content="        self.assertFalse(is_type_allowed(&quot;string&quot;, (type(None),)))" number="85" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)&#10;Explicit (x2)" content="        self.assertFalse(is_type_allowed(1, (type(None),)))" number="86" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)&#10;Explicit (x2)" content="        self.assertFalse(is_type_allowed(1.0, (type(None),)))" number="87" precision="any"/><line any_info="No Anys on this line!" content="" number="88" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)&#10;Explicit (x2)" content="        self.assertFalse(is_type_allowed(dict(), (type(None),)))" number="89" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)&#10;Omitted Generics (x3)&#10;Explicit (x2)" content="        self.assertFalse(is_type_allowed(list(), (type(None),)))" number="90" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Unimported (x1)&#10;Omitted Generics (x3)&#10;Explicit (x2)" content="        self.assertFalse(is_type_allowed(set(), (type(None),)))" number="91" precision="any"/><line any_info="No Anys on this line!" content="" number="92" precision="empty"/><line any_info="No Anys on this line!" content="    def test_is_type_allowed_with_complex_types_list(self):" number="93" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertTrue(is_type_allowed(&quot;string&quot;, (str, list)))" number="94" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertTrue(is_type_allowed([&quot;string&quot;], (str, list)))" number="95" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertTrue(is_type_allowed([&quot;string&quot;, 0.0], (str, list, float)))" number="96" precision="any"/><line any_info="No Anys on this line!" content="" number="97" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertFalse(is_type_allowed([&quot;string&quot;, 0], (str, list)))" number="98" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertFalse(is_type_allowed({&quot;string&quot;}, (str, list)))" number="99" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertFalse(is_type_allowed([{&quot;string&quot;}], (str, list)))" number="100" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertFalse(is_type_allowed({&quot;0&quot;: &quot;string&quot;}, (str, list)))" number="101" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertFalse(is_type_allowed([{&quot;0&quot;: &quot;string&quot;}], (str, list)))" number="102" precision="any"/><line any_info="No Anys on this line!" content="" number="103" precision="empty"/><line any_info="No Anys on this line!" content="    def test_is_type_allowed_with_complex_types_set(self):" number="104" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertTrue(is_type_allowed(0, (int, set)))" number="105" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertTrue(is_type_allowed({0, 1, 2}, (int, set)))" number="106" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertTrue(is_type_allowed({0, 0.0}, (int, set, float)))" number="107" precision="any"/><line any_info="No Anys on this line!" content="" number="108" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertFalse(is_type_allowed({0, &quot;string&quot;}, (int, set)))" number="109" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x3)" content="        self.assertFalse(is_type_allowed([0, 1, 2], (int, set)))" number="110" precision="any"/><line any_info="No Anys on this line!" content="" number="111" precision="empty"/><line any_info="No Anys on this line!" content="    def test_is_type_allowed_with_complex_types_dict(self):" number="112" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x18)" content="        self.assertTrue(is_type_allowed(0.0, (float, dict)))" number="113" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x18)" content="        self.assertTrue(is_type_allowed({&quot;0.0&quot;: 0.0}, (float, dict)))" number="114" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x18)" content="        self.assertTrue(is_type_allowed({&quot;0.0&quot;: 0.0, &quot;0&quot;: 0}, (int, dict, float)))" number="115" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x21)" content="        self.assertTrue(is_type_allowed({&quot;0&quot;: [0.0, 1.0]}, (float, dict, list)))" number="116" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x21)" content="        self.assertTrue(is_type_allowed({&quot;0&quot;: {0.0, 1.0}}, (float, dict, set)))" number="117" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x18)" content="        self.assertTrue(is_type_allowed({&quot;0&quot;: {&quot;0&quot;: 0.0, &quot;1&quot;: 1.0}}, (float, dict)))" number="118" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertTrue(is_type_allowed({&quot;0&quot;: {&quot;0&quot;: [0.0], &quot;1&quot;: {1.0}}}, (float, dict, list, set)))" number="119" precision="any"/><line any_info="No Anys on this line!" content="" number="120" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x21)" content="        self.assertFalse(is_type_allowed({&quot;0&quot;: {&quot;0&quot;: [0.0], &quot;1&quot;: {1.0}}}, (float, dict, list)))" number="121" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x21)" content="        self.assertFalse(is_type_allowed({&quot;0&quot;: {&quot;0&quot;: [0.0], &quot;1&quot;: {1.0}}}, (float, dict, set)))" number="122" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertFalse(is_type_allowed({&quot;0&quot;: {&quot;0&quot;: [0.0], &quot;1&quot;: {1}}}, (float, dict, list, set)))" number="123" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertFalse(is_type_allowed({&quot;0&quot;: {&quot;0&quot;: [0.0], &quot;1&quot;: {&quot;1&quot;}}}, (float, dict, list, set)))" number="124" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x18)" content="        self.assertFalse(is_type_allowed(0, (float, dict)))" number="125" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x18)" content="        self.assertFalse(is_type_allowed({&quot;0&quot;: 0}, (float, dict)))" number="126" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x18)" content="        self.assertFalse(is_type_allowed({&quot;0&quot;: [0.0, 0]}, (float, dict)))" number="127" precision="any"/><line any_info="No Anys on this line!" content="" number="128" precision="empty"/><line any_info="No Anys on this line!" content="    def test_is_type_allowed_with_complex_types_mixed(self):" number="129" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertTrue(is_type_allowed(0, (str, int, float, set, list, dict)))" number="130" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertTrue(is_type_allowed(0.0, (str, int, float, set, list, dict)))" number="131" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertTrue(is_type_allowed(&quot;0&quot;, (str, int, float, set, list, dict)))" number="132" precision="any"/><line any_info="No Anys on this line!" content="" number="133" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertTrue(is_type_allowed([0, 0.0, &quot;0&quot;], (str, int, float, set, list, dict)))" number="134" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertTrue(is_type_allowed({0, 0.0, &quot;0&quot;}, (str, int, float, set, list, dict)))" number="135" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertTrue(is_type_allowed({&quot;a&quot;: 0, &quot;b&quot;: 0.0, &quot;c&quot;: &quot;0&quot;}, (str, int, float, set, list, dict)))" number="136" precision="any"/><line any_info="No Anys on this line!" content="" number="137" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertTrue(is_type_allowed([{0, 0.0, &quot;0&quot;}], (str, int, float, set, list, dict)))" number="138" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_type_allowed({&quot;a&quot;: [0, 0.0, &quot;0&quot;], &quot;b&quot;: {0, 0.0, &quot;0&quot;}, &quot;c&quot;: {&quot;a&quot;: 0, &quot;b&quot;: 0.0, &quot;c&quot;: &quot;0&quot;}}," number="139" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x24)" content="                                        (str, int, float, set, list, dict)))" number="140" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_type_allowed({&quot;c&quot;: {&quot;a&quot;: {0, 0.0, &quot;0&quot;}, &quot;b&quot;: [0, 0.0, &quot;0&quot;], &quot;c&quot;: &quot;0&quot;}}," number="141" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x24)" content="                                        (str, int, float, set, list, dict)))" number="142" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertTrue(is_type_allowed([{&quot;c&quot;: {&quot;a&quot;: {0, 0.0, &quot;0&quot;}, &quot;b&quot;: [0, 0.0, &quot;0&quot;], &quot;c&quot;: &quot;0&quot;}}]," number="143" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x24)" content="                                        (str, int, float, set, list, dict)))" number="144" precision="precise"/><line any_info="No Anys on this line!" content="" number="145" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertFalse(is_type_allowed((0, 0.0, &quot;0&quot;), (str, int, float, set, list, dict)))" number="146" precision="any"/><line any_info="No Anys on this line!" content="" number="147" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        self.assertFalse(is_type_allowed([(0, 0.0, &quot;0&quot;),], (str, int, float, set, list, dict)))" number="148" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_type_allowed({&quot;a&quot;: [0, 0.0, &quot;0&quot;], &quot;b&quot;: (0, 0.0, &quot;0&quot;), &quot;c&quot;: {&quot;a&quot;: 0, &quot;b&quot;: 0.0, &quot;c&quot;: &quot;0&quot;}}," number="149" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x24)" content="                                         (str, int, float, set, list, dict)))" number="150" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_type_allowed({&quot;c&quot;: {&quot;a&quot;: {0, 0.0, &quot;0&quot;}, &quot;b&quot;: (0, 0.0, &quot;0&quot;), &quot;c&quot;: &quot;0&quot;}}," number="151" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x24)" content="                                         (str, int, float, set, list, dict)))" number="152" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="        self.assertFalse(is_type_allowed([{&quot;c&quot;: {&quot;a&quot;: {0, 0.0, &quot;0&quot;}, &quot;b&quot;: (0, 0.0, &quot;0&quot;), &quot;c&quot;: &quot;0&quot;}}]," number="153" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x24)" content="                                         (str, int, float, set, list, dict)))" number="154" precision="precise"/></mypy-report-file>