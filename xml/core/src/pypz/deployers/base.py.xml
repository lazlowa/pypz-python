<?xml-stylesheet type="text/xsl" href="../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\deployers\base.py" module="core.src.pypz.deployers.base"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import enum" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import time" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from abc import ABC, abstractmethod" number="18" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Callable, Optional" number="19" precision="precise"/><line any_info="No Anys on this line!" content="" number="20" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.specs.operator import Operator" number="21" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.pipeline import Pipeline" number="22" precision="any"/><line any_info="No Anys on this line!" content="from pypz.executors.commons import ExecutionMode" number="23" precision="any"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="No Anys on this line!" content="" number="25" precision="empty"/><line any_info="No Anys on this line!" content="class DeploymentState(enum.Enum):" number="26" precision="precise"/><line any_info="No Anys on this line!" content="    Open = &quot;Open&quot;," number="27" precision="precise"/><line any_info="No Anys on this line!" content="    Running = &quot;Running&quot;," number="28" precision="precise"/><line any_info="No Anys on this line!" content="    Completed = &quot;Completed&quot;," number="29" precision="precise"/><line any_info="No Anys on this line!" content="    Failed = &quot;Failed&quot;," number="30" precision="precise"/><line any_info="No Anys on this line!" content="    Unknown = &quot;Unknown&quot;," number="31" precision="precise"/><line any_info="No Anys on this line!" content="    NotExisting = &quot;NotExisting&quot;" number="32" precision="precise"/><line any_info="No Anys on this line!" content="" number="33" precision="empty"/><line any_info="No Anys on this line!" content="" number="34" precision="empty"/><line any_info="No Anys on this line!" content="class Deployer(ABC):" number="35" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="36" precision="empty"/><line any_info="No Anys on this line!" content="    This is the base class for every deployer implementations. If you want to" number="37" precision="empty"/><line any_info="No Anys on this line!" content="    develop your own deployer with your own choice of technology, then you need" number="38" precision="empty"/><line any_info="No Anys on this line!" content="    to implement this interface." number="39" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="40" precision="empty"/><line any_info="No Anys on this line!" content="" number="41" precision="empty"/><line any_info="No Anys on this line!" content="    # ================== abstract methods ====================" number="42" precision="empty"/><line any_info="No Anys on this line!" content="" number="43" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="44" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    def deploy(self, pipeline: Pipeline," number="45" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="               execution_mode: ExecutionMode = ExecutionMode.Standard," number="46" precision="any"/><line any_info="No Anys on this line!" content="               ignore_operators: list[Operator] = None," number="47" precision="precise"/><line any_info="No Anys on this line!" content="               wait: bool = True) -&gt; None:" number="48" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="49" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to deploy a pipeline by its instance." number="50" precision="empty"/><line any_info="No Anys on this line!" content="" number="51" precision="empty"/><line any_info="No Anys on this line!" content="        :param pipeline: pipeline instance to be deployed" number="52" precision="empty"/><line any_info="No Anys on this line!" content="        :param execution_mode: execution mode of the operators (check ExecutionMode for details)" number="53" precision="empty"/><line any_info="No Anys on this line!" content="        :param ignore_operators: list of operator instance to be excluded from the deployment" number="54" precision="empty"/><line any_info="No Anys on this line!" content="        :param wait: True - block until completion; False - don't block until completion" number="55" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="56" precision="empty"/><line any_info="No Anys on this line!" content="" number="57" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="58" precision="precise"/><line any_info="No Anys on this line!" content="" number="59" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="60" precision="empty"/><line any_info="No Anys on this line!" content="    def destroy(self, pipeline_name: str, force: bool = False, wait: bool = True) -&gt; None:" number="61" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="62" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to destroy a pipeline by its name." number="63" precision="empty"/><line any_info="No Anys on this line!" content="" number="64" precision="empty"/><line any_info="No Anys on this line!" content="        :param pipeline_name: name of the deployed pipeline entity" number="65" precision="empty"/><line any_info="No Anys on this line!" content="        :param force: True - kill without grace period; False - with grace period" number="66" precision="empty"/><line any_info="No Anys on this line!" content="        :param wait: True - block until completion; False - don't block until completion" number="67" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="68" precision="empty"/><line any_info="No Anys on this line!" content="" number="69" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="70" precision="precise"/><line any_info="No Anys on this line!" content="" number="71" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="72" precision="empty"/><line any_info="No Anys on this line!" content="    def restart_operator(self, operator_full_name: str, force: bool = False, wait: bool = True) -&gt; None:" number="73" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="74" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to restart a single operator in a pipeline by its name." number="75" precision="empty"/><line any_info="No Anys on this line!" content="        If the operator does not exist, it shall rather create it without throwing an exception." number="76" precision="empty"/><line any_info="No Anys on this line!" content="" number="77" precision="empty"/><line any_info="No Anys on this line!" content="        :param operator_full_name: full name of the deployed operator" number="78" precision="empty"/><line any_info="No Anys on this line!" content="        :param force: True - kill without grace period; False - with grace period" number="79" precision="empty"/><line any_info="No Anys on this line!" content="        :param wait: True - block until completion; False - don't block until completion" number="80" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="81" precision="empty"/><line any_info="No Anys on this line!" content="" number="82" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="83" precision="precise"/><line any_info="No Anys on this line!" content="" number="84" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="85" precision="empty"/><line any_info="No Anys on this line!" content="    def destroy_operator(self, operator_full_name: str, force: bool = False, wait: bool = True) -&gt; None:" number="86" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="87" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to destroy a single operator by its name." number="88" precision="empty"/><line any_info="No Anys on this line!" content="" number="89" precision="empty"/><line any_info="No Anys on this line!" content="        :param operator_full_name: full name of the deployed operator" number="90" precision="empty"/><line any_info="No Anys on this line!" content="        :param force: True - kill without grace period; False - with grace period" number="91" precision="empty"/><line any_info="No Anys on this line!" content="        :param wait: True - block until completion; False - don't block until completion" number="92" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="93" precision="empty"/><line any_info="No Anys on this line!" content="" number="94" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="95" precision="precise"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="97" precision="empty"/><line any_info="No Anys on this line!" content="    def is_deployed(self, pipeline_name: str) -&gt; bool:" number="98" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="99" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to check, if a pipeline with the specified name has been deployed." number="100" precision="empty"/><line any_info="No Anys on this line!" content="" number="101" precision="empty"/><line any_info="No Anys on this line!" content="        :param pipeline_name: name of the pipeline to check" number="102" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True, if deployed, False if not" number="103" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="104" precision="empty"/><line any_info="No Anys on this line!" content="" number="105" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="106" precision="precise"/><line any_info="No Anys on this line!" content="" number="107" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="108" precision="empty"/><line any_info="No Anys on this line!" content="    def retrieve_pipeline_deployments(self) -&gt; set[str]:" number="109" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="110" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to get the names of all deployed pipelines." number="111" precision="empty"/><line any_info="No Anys on this line!" content="" number="112" precision="empty"/><line any_info="No Anys on this line!" content="        :return: set of names of the deployed pipelines" number="113" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="114" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="115" precision="precise"/><line any_info="No Anys on this line!" content="" number="116" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="117" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def retrieve_deployed_pipeline(self, pipeline_name: str) -&gt; Optional[Pipeline]:" number="118" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="119" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to retrieve and create the deployed pipeline instance by its name." number="120" precision="empty"/><line any_info="No Anys on this line!" content="" number="121" precision="empty"/><line any_info="No Anys on this line!" content="        :param pipeline_name: name of the pipeline" number="122" precision="empty"/><line any_info="No Anys on this line!" content="        :return: Pipeline object, if existing, None if not existing" number="123" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="124" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="125" precision="precise"/><line any_info="No Anys on this line!" content="" number="126" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="127" precision="empty"/><line any_info="No Anys on this line!" content="    def retrieve_operator_state(self, operator_full_name: str) -&gt; DeploymentState:" number="128" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="129" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to retrieve the state of a single operator by its name." number="130" precision="empty"/><line any_info="No Anys on this line!" content="" number="131" precision="empty"/><line any_info="No Anys on this line!" content="        :param operator_full_name: full name of the deployed operator" number="132" precision="empty"/><line any_info="No Anys on this line!" content="        :return: check DeploymentState for details" number="133" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="134" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="135" precision="precise"/><line any_info="No Anys on this line!" content="" number="136" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="137" precision="empty"/><line any_info="No Anys on this line!" content="    def retrieve_operator_logs(self, operator_full_name: str) -&gt; Optional[str]:" number="138" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="139" precision="empty"/><line any_info="No Anys on this line!" content="        Shall implement the logic to retrieve the logs from a deployed operator by its name." number="140" precision="empty"/><line any_info="No Anys on this line!" content="" number="141" precision="empty"/><line any_info="No Anys on this line!" content="        :param operator_full_name: full name of the deployed operator" number="142" precision="empty"/><line any_info="No Anys on this line!" content="        :return: operator logs as string" number="143" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="144" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="145" precision="precise"/><line any_info="No Anys on this line!" content="" number="146" precision="empty"/><line any_info="No Anys on this line!" content="    # ================== public methods ====================" number="147" precision="empty"/><line any_info="No Anys on this line!" content="" number="148" precision="empty"/><line any_info="No Anys on this line!" content="    def retrieve_pipeline_state(self, pipeline_name: str) -&gt; dict[str, DeploymentState]:" number="149" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="150" precision="empty"/><line any_info="No Anys on this line!" content="        This method retrieves and collects all the operators' states in the deployed pipeline." number="151" precision="empty"/><line any_info="No Anys on this line!" content="" number="152" precision="empty"/><line any_info="No Anys on this line!" content="        :param pipeline_name: name of the deployed pipeline entity" number="153" precision="empty"/><line any_info="No Anys on this line!" content="        :return: a dict, where key is the name of the operator and the value is the corresponding state object" number="154" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="155" precision="empty"/><line any_info="No Anys on this line!" content="" number="156" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        pipeline: Pipeline = self.retrieve_deployed_pipeline(pipeline_name)" number="157" precision="any"/><line any_info="No Anys on this line!" content="" number="158" precision="empty"/><line any_info="No Anys on this line!" content="        operator_states = dict()" number="159" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        for operator in pipeline.get_protected().get_nested_instances().values():" number="160" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x7)" content="            operator_states[operator.get_full_name()] = self.retrieve_operator_state(operator.get_full_name())" number="161" precision="any"/><line any_info="No Anys on this line!" content="" number="162" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return operator_states" number="163" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="164" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    def is_any_operator_in_state(self, pipeline_name: str, *state: DeploymentState):" number="165" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="166" precision="empty"/><line any_info="No Anys on this line!" content="        This method checks, if **any** of the operators in the deployed pipeline is in **any** of the" number="167" precision="empty"/><line any_info="No Anys on this line!" content="        specified states." number="168" precision="empty"/><line any_info="No Anys on this line!" content="" number="169" precision="empty"/><line any_info="No Anys on this line!" content="        :param pipeline_name: name of the deployed pipeline entity" number="170" precision="empty"/><line any_info="No Anys on this line!" content="        :param state: list of states in OR condition" number="171" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="172" precision="empty"/><line any_info="No Anys on this line!" content="" number="173" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        pipeline: Pipeline = self.retrieve_deployed_pipeline(pipeline_name)" number="174" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        for operator in pipeline.get_protected().get_nested_instances().values():" number="175" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            operator_state = self.retrieve_operator_state(operator.get_full_name())" number="176" precision="any"/><line any_info="No Anys on this line!" content="            if operator_state in state:" number="177" precision="precise"/><line any_info="No Anys on this line!" content="                return True" number="178" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="179" precision="precise"/><line any_info="No Anys on this line!" content="" number="180" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    def is_all_operator_in_state(self, pipeline_name: str, *state: DeploymentState):" number="181" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="182" precision="empty"/><line any_info="No Anys on this line!" content="        This method checks, if **all** the operators in the deployed pipeline is in **any** of the" number="183" precision="empty"/><line any_info="No Anys on this line!" content="        specified states." number="184" precision="empty"/><line any_info="No Anys on this line!" content="" number="185" precision="empty"/><line any_info="No Anys on this line!" content="        :param pipeline_name: name of the deployed pipeline entity" number="186" precision="empty"/><line any_info="No Anys on this line!" content="        :param state: list of states in OR condition" number="187" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="188" precision="empty"/><line any_info="No Anys on this line!" content="" number="189" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        pipeline: Pipeline = self.retrieve_deployed_pipeline(pipeline_name)" number="190" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        for operator in pipeline.get_protected().get_nested_instances().values():" number="191" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            operator_state = self.retrieve_operator_state(operator.get_full_name())" number="192" precision="any"/><line any_info="No Anys on this line!" content="            if operator_state not in state:" number="193" precision="precise"/><line any_info="No Anys on this line!" content="                return False" number="194" precision="precise"/><line any_info="No Anys on this line!" content="        return True" number="195" precision="precise"/><line any_info="No Anys on this line!" content="" number="196" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def attach(self, pipeline_name: str," number="197" precision="precise"/><line any_info="No Anys on this line!" content="               on_operator_state_change: Callable[[Operator, DeploymentState], None] = None) -&gt; None:" number="198" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="199" precision="empty"/><line any_info="No Anys on this line!" content="        This method attaches itself to a deployed pipeline and remains attached until the pipeline is" number="200" precision="empty"/><line any_info="No Anys on this line!" content="        not finished. It is possible to specify callback functions to hook into certain state" number="201" precision="empty"/><line any_info="No Anys on this line!" content="        changes. If that state change happens, then the callback gets the Operator instance and" number="202" precision="empty"/><line any_info="No Anys on this line!" content="        the corresponding state provided." number="203" precision="empty"/><line any_info="No Anys on this line!" content="" number="204" precision="empty"/><line any_info="No Anys on this line!" content="        :param pipeline_name: name of the deployed pipeline entity" number="205" precision="empty"/><line any_info="No Anys on this line!" content="        :param on_operator_state_change: callback to hook into state changes" number="206" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="207" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        pipeline: Pipeline = self.retrieve_deployed_pipeline(pipeline_name)" number="208" precision="any"/><line any_info="No Anys on this line!" content="" number="209" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        operator_states: dict[Operator, DeploymentState] = \" number="210" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x9)" content="            {operator: DeploymentState.Unknown for operator in pipeline.get_protected().get_nested_instances().values()}" number="211" precision="any"/><line any_info="No Anys on this line!" content="" number="212" precision="empty"/><line any_info="No Anys on this line!" content="        finished: bool = False" number="213" precision="precise"/><line any_info="No Anys on this line!" content="" number="214" precision="empty"/><line any_info="No Anys on this line!" content="        while not finished:" number="215" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="            for operator in pipeline.get_protected().get_nested_instances().values():" number="216" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                operator_state = self.retrieve_operator_state(operator.get_full_name())" number="217" precision="any"/><line any_info="No Anys on this line!" content="" number="218" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                if operator_state != operator_states[operator]:" number="219" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                    operator_states[operator] = operator_state" number="220" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                    if on_operator_state_change is not None:" number="221" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                        on_operator_state_change(operator, operator_state)" number="222" precision="any"/><line any_info="No Anys on this line!" content="" number="223" precision="empty"/><line any_info="No Anys on this line!" content="            if any((DeploymentState.Open == state) or" number="224" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                   (DeploymentState.Running == state) for state in operator_states.values()):" number="225" precision="imprecise"/><line any_info="No Anys on this line!" content="                time.sleep(2)" number="226" precision="precise"/><line any_info="No Anys on this line!" content="            else:" number="227" precision="empty"/><line any_info="No Anys on this line!" content="                finished = True" number="228" precision="precise"/></mypy-report-file>