<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\core\commons\loggers.py" module="core.src.pypz.core.commons.loggers"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import logging" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import sys" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from abc import ABC, abstractmethod" number="18" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Any, Optional" number="19" precision="precise"/><line any_info="No Anys on this line!" content="" number="20" precision="empty"/><line any_info="No Anys on this line!" content="" number="21" precision="empty"/><line any_info="No Anys on this line!" content="class ContextLoggerInterface(ABC):" number="22" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="23" precision="empty"/><line any_info="No Anys on this line!" content="    This interface provides the necessary methods to be able to implement" number="24" precision="empty"/><line any_info="No Anys on this line!" content="    the context logging functionality. Context logging means that there" number="25" precision="empty"/><line any_info="No Anys on this line!" content="    is exactly one logger, which will be (re)used in the given context." number="26" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="27" precision="empty"/><line any_info="No Anys on this line!" content="" number="28" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="29" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _error(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="30" precision="any"/><line any_info="No Anys on this line!" content="        pass" number="31" precision="precise"/><line any_info="No Anys on this line!" content="" number="32" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="33" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _warn(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="34" precision="any"/><line any_info="No Anys on this line!" content="        pass" number="35" precision="precise"/><line any_info="No Anys on this line!" content="" number="36" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="37" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _info(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="38" precision="any"/><line any_info="No Anys on this line!" content="        pass" number="39" precision="precise"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="41" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _debug(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="42" precision="any"/><line any_info="No Anys on this line!" content="        pass" number="43" precision="precise"/><line any_info="No Anys on this line!" content="" number="44" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def set_log_level(self, log_level: Any) -&gt; None:" number="45" precision="any"/><line any_info="No Anys on this line!" content="        pass" number="46" precision="precise"/><line any_info="No Anys on this line!" content="" number="47" precision="empty"/><line any_info="No Anys on this line!" content="" number="48" precision="empty"/><line any_info="No Anys on this line!" content="class ContextLogger(ContextLoggerInterface):" number="49" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="50" precision="empty"/><line any_info="No Anys on this line!" content="    This class has the responsibility to provide a simple logging interface, which" number="51" precision="empty"/><line any_info="No Anys on this line!" content="    hides the complexity of maintaining the context information. The user can" number="52" precision="empty"/><line any_info="No Anys on this line!" content="    call the familiar methods without knowing, how the context information are" number="53" precision="empty"/><line any_info="No Anys on this line!" content="    handled by the protected methods." number="54" precision="empty"/><line any_info="No Anys on this line!" content="" number="55" precision="empty"/><line any_info="No Anys on this line!" content="    By expecting a logger in the constructor we are allowing to reuse existing loggers" number="56" precision="empty"/><line any_info="No Anys on this line!" content="    from higher contexts i.e., a top-level instance can provide it's logger to the" number="57" precision="empty"/><line any_info="No Anys on this line!" content="    nested instances along with the context information. The nested instance can" number="58" precision="empty"/><line any_info="No Anys on this line!" content="    further forward to it's nested instances and so on. Each instance provides itself" number="59" precision="empty"/><line any_info="No Anys on this line!" content="    to the context stack so, if a logger method of the actual context will be called," number="60" precision="empty"/><line any_info="No Anys on this line!" content="    then the logger itself will get the context information automatically." number="61" precision="empty"/><line any_info="No Anys on this line!" content="" number="62" precision="empty"/><line any_info="No Anys on this line!" content="    :param logger: a logger implementation that will be used to route the messages to" number="63" precision="empty"/><line any_info="No Anys on this line!" content="    :param context_stack: the information about the current and previous contexts" number="64" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="65" precision="empty"/><line any_info="No Anys on this line!" content="" number="66" precision="empty"/><line any_info="No Anys on this line!" content="    def __init__(self, logger: ContextLoggerInterface, *context_stack: str):" number="67" precision="precise"/><line any_info="No Anys on this line!" content="        self._logger: ContextLoggerInterface = logger" number="68" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="69" precision="empty"/><line any_info="No Anys on this line!" content="        The provided logger to use on this context" number="70" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="71" precision="empty"/><line any_info="No Anys on this line!" content="" number="72" precision="empty"/><line any_info="No Anys on this line!" content="        self._context_stack: list[str] = [*context_stack]" number="73" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="74" precision="empty"/><line any_info="No Anys on this line!" content="        The context stack, which contains the actual and all parent contexts" number="75" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="76" precision="empty"/><line any_info="No Anys on this line!" content="" number="77" precision="empty"/><line any_info="No Anys on this line!" content="    def get_context_stack(self) -&gt; list[str]:" number="78" precision="precise"/><line any_info="No Anys on this line!" content="        return self._context_stack" number="79" precision="precise"/><line any_info="No Anys on this line!" content="" number="80" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _error(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="81" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        self._logger._error(event, context_stack, *args, **kw)" number="82" precision="any"/><line any_info="No Anys on this line!" content="" number="83" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _warn(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="84" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        self._logger._warn(event, context_stack, *args, **kw)" number="85" precision="any"/><line any_info="No Anys on this line!" content="" number="86" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _info(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="87" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        self._logger._info(event, context_stack, *args, **kw)" number="88" precision="any"/><line any_info="No Anys on this line!" content="" number="89" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _debug(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="90" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        self._logger._debug(event, context_stack, *args, **kw)" number="91" precision="any"/><line any_info="No Anys on this line!" content="" number="92" precision="empty"/><line any_info="No Anys on this line!" content="    def set_log_level(self, log_level: str | int) -&gt; None:" number="93" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="        self._logger.set_log_level(log_level)" number="94" precision="any"/><line any_info="No Anys on this line!" content="" number="95" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def error(self, event: Optional[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="96" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        self._error(event, self._context_stack, *args, **kw)" number="97" precision="any"/><line any_info="No Anys on this line!" content="" number="98" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def warn(self, event: Optional[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="99" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        self._warn(event, self._context_stack, *args, **kw)" number="100" precision="any"/><line any_info="No Anys on this line!" content="" number="101" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def info(self, event: Optional[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="102" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        self._info(event, self._context_stack, *args, **kw)" number="103" precision="any"/><line any_info="No Anys on this line!" content="" number="104" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def debug(self, event: Optional[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="105" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        self._debug(event, self._context_stack, *args, **kw)" number="106" precision="any"/><line any_info="No Anys on this line!" content="" number="107" precision="empty"/><line any_info="No Anys on this line!" content="" number="108" precision="empty"/><line any_info="No Anys on this line!" content="class DefaultContextLogger(ContextLoggerInterface):" number="109" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="110" precision="empty"/><line any_info="No Anys on this line!" content="    The default implementation of the" number="111" precision="empty"/><line any_info="No Anys on this line!" content="    :class:`ContextLoggerInterface &lt;pypz.core.commons.loggers.ContextLoggerInterface&gt;`," number="112" precision="empty"/><line any_info="No Anys on this line!" content="    which will send log messages to the standard out." number="113" precision="empty"/><line any_info="No Anys on this line!" content="" number="114" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="115" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="116" precision="empty"/><line any_info="No Anys on this line!" content="" number="117" precision="empty"/><line any_info="No Anys on this line!" content="    class ColoredFormatter(logging.Formatter):" number="118" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="119" precision="empty"/><line any_info="No Anys on this line!" content="        This class overrides the default logging Formatter class to be able to" number="120" precision="empty"/><line any_info="No Anys on this line!" content="        colorize log records. It applies to the entire record not just to" number="121" precision="empty"/><line any_info="No Anys on this line!" content="        the log message." number="122" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="123" precision="empty"/><line any_info="No Anys on this line!" content="" number="124" precision="empty"/><line any_info="No Anys on this line!" content="        RESET = '\033[0m'" number="125" precision="precise"/><line any_info="No Anys on this line!" content="        RED = '\033[31m'" number="126" precision="precise"/><line any_info="No Anys on this line!" content="        GREEN = '\033[32m'" number="127" precision="precise"/><line any_info="No Anys on this line!" content="        YELLOW = '\033[33m'" number="128" precision="precise"/><line any_info="No Anys on this line!" content="        BLUE = '\033[34m'" number="129" precision="precise"/><line any_info="No Anys on this line!" content="        PURPLE = '\033[35m'" number="130" precision="precise"/><line any_info="No Anys on this line!" content="        CYAN = '\033[36m'" number="131" precision="precise"/><line any_info="No Anys on this line!" content="        WHITE = '\033[37m'" number="132" precision="precise"/><line any_info="No Anys on this line!" content="        LIGHT_GRAY = '\033[37m'" number="133" precision="precise"/><line any_info="No Anys on this line!" content="" number="134" precision="empty"/><line any_info="No Anys on this line!" content="        def format(self, record):" number="135" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            if record.levelno == logging.ERROR:" number="136" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Explicit (x1)" content="                record.color = DefaultContextLogger.ColoredFormatter.RED" number="137" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            elif record.levelno == logging.WARNING:" number="138" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Explicit (x1)" content="                record.color = DefaultContextLogger.ColoredFormatter.YELLOW" number="139" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            elif record.levelno == logging.INFO:" number="140" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Explicit (x1)" content="                record.color = DefaultContextLogger.ColoredFormatter.LIGHT_GRAY" number="141" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            elif record.levelno == logging.DEBUG:" number="142" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Explicit (x1)" content="                record.color = DefaultContextLogger.ColoredFormatter.BLUE" number="143" precision="any"/><line any_info="No Anys on this line!" content="            else:" number="144" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Explicit (x1)" content="                record.color = DefaultContextLogger.ColoredFormatter.RESET" number="145" precision="any"/><line any_info="No Anys on this line!" content="" number="146" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            formatted_record = super().format(record)" number="147" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x12)&#10;Explicit (x1)" content="            return f&quot;{record.color}{formatted_record}{DefaultContextLogger.ColoredFormatter.RESET}&quot;" number="148" precision="any"/><line any_info="No Anys on this line!" content="" number="149" precision="empty"/><line any_info="No Anys on this line!" content="    def __init__(self, name: str = None):" number="150" precision="precise"/><line any_info="No Anys on this line!" content="        logging.basicConfig()" number="151" precision="precise"/><line any_info="No Anys on this line!" content="        self._logger: logging.Logger = logging.getLogger(name)" number="152" precision="precise"/><line any_info="No Anys on this line!" content="        self._logger.propagate = False" number="153" precision="precise"/><line any_info="No Anys on this line!" content="" number="154" precision="empty"/><line any_info="No Anys on this line!" content="        if not self._logger.handlers:" number="155" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            handler = logging.StreamHandler(sys.stdout)" number="156" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="            formatter = DefaultContextLogger.ColoredFormatter(" number="157" precision="precise"/><line any_info="No Anys on this line!" content="                &quot;%(levelname)s | %(asctime)s | %(name)s | %(context)s | %(message)s&quot;" number="158" precision="precise"/><line any_info="No Anys on this line!" content="            )" number="159" precision="empty"/><line any_info="No Anys on this line!" content="            handler.setFormatter(formatter)" number="160" precision="precise"/><line any_info="No Anys on this line!" content="            self._logger.addHandler(handler)" number="161" precision="precise"/><line any_info="No Anys on this line!" content="" number="162" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _error(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="163" precision="any"/><line any_info="No Anys on this line!" content="        self._logger.error(event," number="164" precision="precise"/><line any_info="No Anys on this line!" content="                           extra={" number="165" precision="empty"/><line any_info="No Anys on this line!" content="                               &quot;context&quot;: &quot; | &quot;.join(context_stack) if context_stack is not None else None" number="166" precision="precise"/><line any_info="No Anys on this line!" content="                           }," number="167" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                           *args, **kw)" number="168" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="169" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _warn(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="170" precision="any"/><line any_info="No Anys on this line!" content="        self._logger.warning(event," number="171" precision="precise"/><line any_info="No Anys on this line!" content="                             extra={" number="172" precision="empty"/><line any_info="No Anys on this line!" content="                                 &quot;context&quot;: &quot; | &quot;.join(context_stack) if context_stack is not None else None" number="173" precision="precise"/><line any_info="No Anys on this line!" content="                             }," number="174" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                             *args, **kw)" number="175" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="176" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _info(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="177" precision="any"/><line any_info="No Anys on this line!" content="        self._logger.info(event," number="178" precision="precise"/><line any_info="No Anys on this line!" content="                          extra={" number="179" precision="empty"/><line any_info="No Anys on this line!" content="                              &quot;context&quot;: &quot; | &quot;.join(context_stack) if context_stack is not None else None" number="180" precision="precise"/><line any_info="No Anys on this line!" content="                          }," number="181" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                          *args, **kw)" number="182" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="183" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="    def _debug(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="184" precision="any"/><line any_info="No Anys on this line!" content="        self._logger.debug(event," number="185" precision="precise"/><line any_info="No Anys on this line!" content="                           extra={" number="186" precision="empty"/><line any_info="No Anys on this line!" content="                               &quot;context&quot;: &quot; | &quot;.join(context_stack) if context_stack is not None else None" number="187" precision="precise"/><line any_info="No Anys on this line!" content="                           }," number="188" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="                           *args, **kw)" number="189" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="190" precision="empty"/><line any_info="No Anys on this line!" content="    def set_log_level(self, log_level: str | int) -&gt; None:" number="191" precision="precise"/><line any_info="No Anys on this line!" content="        if isinstance(log_level, str):" number="192" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="            self._logger.setLevel(logging.getLevelName(log_level.upper()))" number="193" precision="any"/><line any_info="No Anys on this line!" content="        elif isinstance(log_level, int):" number="194" precision="precise"/><line any_info="No Anys on this line!" content="            self._logger.setLevel(log_level)" number="195" precision="precise"/><line any_info="No Anys on this line!" content="        else:" number="196" precision="empty"/><line any_info="No Anys on this line!" content="            raise TypeError(f&quot;Invalid log_level type: {log_level}&quot;)" number="197" precision="unanalyzed"/></mypy-report-file>