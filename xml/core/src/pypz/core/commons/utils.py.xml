<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\core\commons\utils.py" module="core.src.pypz.core.commons.utils"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import os" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import re" number="17" precision="precise"/><line any_info="No Anys on this line!" content="import threading" number="18" precision="precise"/><line any_info="No Anys on this line!" content="import time" number="19" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Generic, TypeVar, Any" number="20" precision="precise"/><line any_info="No Anys on this line!" content="" number="21" precision="empty"/><line any_info="No Anys on this line!" content="" number="22" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="def ensure_type(value, expected_type: type):" number="23" precision="any"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="24" precision="empty"/><line any_info="No Anys on this line!" content="    Convenience method to ensure that the value has the expected type." number="25" precision="empty"/><line any_info="No Anys on this line!" content="" number="26" precision="empty"/><line any_info="No Anys on this line!" content="    :param value: value to check" number="27" precision="empty"/><line any_info="No Anys on this line!" content="    :param expected_type: expected type" number="28" precision="empty"/><line any_info="No Anys on this line!" content="" number="29" precision="empty"/><line any_info="No Anys on this line!" content="    :raises: TypeError" number="30" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="31" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    if not isinstance(value, expected_type):" number="32" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x2)&#10;Unannotated (x1)" content="        raise TypeError(f&quot;Expected type {expected_type} got {type(value)} instead&quot;)" number="33" precision="any"/><line any_info="No Anys on this line!" content="" number="34" precision="empty"/><line any_info="No Anys on this line!" content="    return value" number="35" precision="precise"/><line any_info="No Anys on this line!" content="" number="36" precision="empty"/><line any_info="No Anys on this line!" content="" number="37" precision="empty"/><line any_info="No Anys on this line!" content="def current_time_millis() -&gt; int:" number="38" precision="precise"/><line any_info="No Anys on this line!" content="    return int(time.time() * 1000)" number="39" precision="precise"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="No Anys on this line!" content="" number="41" precision="empty"/><line any_info="No Anys on this line!" content="ReferenceType = TypeVar('ReferenceType')" number="42" precision="empty"/><line any_info="No Anys on this line!" content="" number="43" precision="empty"/><line any_info="No Anys on this line!" content="" number="44" precision="empty"/><line any_info="No Anys on this line!" content="class SynchronizedReference(Generic[ReferenceType]):" number="45" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="46" precision="empty"/><line any_info="No Anys on this line!" content="    This class realizes a synchronized reference i.e., it locks the object during" number="47" precision="empty"/><line any_info="No Anys on this line!" content="    read and write to avoid race conditions. This class is intended to safeguard" number="48" precision="empty"/><line any_info="No Anys on this line!" content="    pypz for the time after GIL has been removed for good." number="49" precision="empty"/><line any_info="No Anys on this line!" content="" number="50" precision="empty"/><line any_info="No Anys on this line!" content="    :param reference: the reference to the object with the generic type ReferenceType" number="51" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="52" precision="empty"/><line any_info="No Anys on this line!" content="" number="53" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def __init__(self, reference: ReferenceType):" number="54" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)" content="        self.__reference: ReferenceType = reference" number="55" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        self.__lock = threading.Lock()" number="56" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="57" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def get(self) -&gt; ReferenceType:" number="58" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        with self.__lock:" number="59" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            return self.__reference" number="60" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="61" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def set(self, reference: ReferenceType) -&gt; None:" number="62" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        with self.__lock:" number="63" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="            self.__reference = reference" number="64" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="65" precision="empty"/><line any_info="No Anys on this line!" content="" number="66" precision="empty"/><line any_info="No Anys on this line!" content="class TemplateResolver:" number="67" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="68" precision="empty"/><line any_info="No Anys on this line!" content="    This class realizes the logic to resolve templates in strings. As of 02/2024 only" number="69" precision="empty"/><line any_info="No Anys on this line!" content="    environment variables can be resolved." number="70" precision="empty"/><line any_info="No Anys on this line!" content="" number="71" precision="empty"/><line any_info="No Anys on this line!" content="    :param left_template_boundary: the start of the template" number="72" precision="empty"/><line any_info="No Anys on this line!" content="    :param right_template_boundary: the end of the template" number="73" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="74" precision="empty"/><line any_info="No Anys on this line!" content="" number="75" precision="empty"/><line any_info="No Anys on this line!" content="    def __init__(self, left_template_boundary: str, right_template_boundary: str):" number="76" precision="precise"/><line any_info="No Anys on this line!" content="" number="77" precision="empty"/><line any_info="No Anys on this line!" content="        self.m_templatePattern = re.escape(left_template_boundary) + r'.*?' + re.escape(right_template_boundary)" number="78" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="79" precision="empty"/><line any_info="No Anys on this line!" content="        Regex to find the template pattern" number="80" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="81" precision="empty"/><line any_info="No Anys on this line!" content="" number="82" precision="empty"/><line any_info="No Anys on this line!" content="        self.m_envVarPattern = r'(?&lt;=' + re.escape(left_template_boundary) + r'env:)' \" number="83" precision="precise"/><line any_info="No Anys on this line!" content="                               r'(.*?)(?=' + re.escape(right_template_boundary) + r')'" number="84" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="85" precision="empty"/><line any_info="No Anys on this line!" content="        Regex to find the env var specifier pattern in the template pattern" number="86" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="87" precision="empty"/><line any_info="No Anys on this line!" content="" number="88" precision="empty"/><line any_info="No Anys on this line!" content="    def resolve(self, lookup_object):" number="89" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="90" precision="empty"/><line any_info="No Anys on this line!" content="        This method attempts to recursively resolve template strings in either a Map or Collection" number="91" precision="empty"/><line any_info="No Anys on this line!" content="        or a normal String." number="92" precision="empty"/><line any_info="No Anys on this line!" content="" number="93" precision="empty"/><line any_info="No Anys on this line!" content="        :param lookup_object: input object, where the resolution shall take place" number="94" precision="empty"/><line any_info="No Anys on this line!" content="        :return: the modified object" number="95" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="96" precision="empty"/><line any_info="No Anys on this line!" content="" number="97" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x18)" content="        if isinstance(lookup_object, dict):" number="98" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            new_map = dict()" number="99" precision="any"/><line any_info="No Anys on this line!" content="" number="100" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            for key in lookup_object.keys():" number="101" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="                new_map[key] = self.resolve(lookup_object[key])" number="102" precision="any"/><line any_info="No Anys on this line!" content="" number="103" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            return new_map" number="104" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x3)" content="        elif isinstance(lookup_object, list):" number="105" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x3)" content="            new_list = list()" number="106" precision="any"/><line any_info="No Anys on this line!" content="" number="107" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            for element in lookup_object:" number="108" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="                new_list.append(self.resolve(element))" number="109" precision="any"/><line any_info="No Anys on this line!" content="" number="110" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            return new_list" number="111" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x3)" content="        elif isinstance(lookup_object, set):" number="112" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x3)" content="            new_set = set()" number="113" precision="any"/><line any_info="No Anys on this line!" content="" number="114" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            for element in lookup_object:" number="115" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="                new_set.add(self.resolve(element))" number="116" precision="any"/><line any_info="No Anys on this line!" content="" number="117" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            return new_set" number="118" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        elif isinstance(lookup_object, str):" number="119" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            lookup_string = str(lookup_object)" number="120" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            resolved_string = lookup_object" number="121" precision="any"/><line any_info="No Anys on this line!" content="" number="122" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Explicit (x2)" content="            template_matches = re.findall(self.m_templatePattern, lookup_string)" number="123" precision="any"/><line any_info="No Anys on this line!" content="" number="124" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            for templateMatch in template_matches:" number="125" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                resolved = None" number="126" precision="any"/><line any_info="No Anys on this line!" content="" number="127" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Explicit (x2)" content="                env_var_matches = re.findall(self.m_envVarPattern, templateMatch)" number="128" precision="any"/><line any_info="No Anys on this line!" content="" number="129" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="                if 0 &lt; len(env_var_matches):" number="130" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x2)" content="                    resolved = os.getenv(env_var_matches[0])" number="131" precision="any"/><line any_info="No Anys on this line!" content="" number="132" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="                resolved_string = resolved_string.replace(templateMatch, &quot;&quot; if resolved is None else resolved)" number="133" precision="any"/><line any_info="No Anys on this line!" content="" number="134" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            return resolved_string" number="135" precision="any"/><line any_info="No Anys on this line!" content="        else:" number="136" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            return lookup_object" number="137" precision="any"/><line any_info="No Anys on this line!" content="" number="138" precision="empty"/><line any_info="No Anys on this line!" content="" number="139" precision="empty"/><line any_info="No Anys on this line!" content="class InterruptableTimer:" number="140" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="141" precision="empty"/><line any_info="No Anys on this line!" content="    This is a utility timer that can be interrupted in thread safe manner." number="142" precision="empty"/><line any_info="No Anys on this line!" content="    Note that this should not be used in cases, where accuracy matters." number="143" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="144" precision="empty"/><line any_info="No Anys on this line!" content="" number="145" precision="empty"/><line any_info="No Anys on this line!" content="    def __init__(self):" number="146" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x2)" content="        self.__interrupted: SynchronizedReference[bool] = SynchronizedReference(False)" number="147" precision="any"/><line any_info="No Anys on this line!" content="" number="148" precision="empty"/><line any_info="No Anys on this line!" content="    def interrupt(self):" number="149" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.__interrupted.set(True)" number="150" precision="any"/><line any_info="No Anys on this line!" content="" number="151" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    def sleep(self, seconds: float):" number="152" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)" content="        millis = round(seconds * 1000.0)" number="153" precision="precise"/><line any_info="No Anys on this line!" content="        start_time = current_time_millis()" number="154" precision="precise"/><line any_info="No Anys on this line!" content="" number="155" precision="empty"/><line any_info="No Anys on this line!" content="        while ((not self.__interrupted.get()) and" number="156" precision="precise"/><line any_info="No Anys on this line!" content="               (millis &gt;= (current_time_millis() - start_time))):" number="157" precision="precise"/><line any_info="No Anys on this line!" content="            pass" number="158" precision="precise"/><line any_info="No Anys on this line!" content="" number="159" precision="empty"/><line any_info="No Anys on this line!" content="" number="160" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="def convert_to_dict(obj: Any) -&gt; Any:" number="161" precision="any"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="162" precision="empty"/><line any_info="No Anys on this line!" content="    This method attempts to convert an object recursively to a dictionary." number="163" precision="empty"/><line any_info="No Anys on this line!" content="" number="164" precision="empty"/><line any_info="No Anys on this line!" content="    :param obj: any object that can be converted to dict" number="165" precision="empty"/><line any_info="No Anys on this line!" content="    :return: resulted dict or the object, if no valid conversion available (necessary due to the recursion)" number="166" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="167" precision="empty"/><line any_info="No Anys on this line!" content="" number="168" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Omitted Generics (x3)" content="    if isinstance(obj, list):" number="169" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        return [convert_to_dict(item) for item in obj]" number="170" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Omitted Generics (x2)" content="    elif isinstance(obj, tuple):" number="171" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x6)" content="        return tuple(convert_to_dict(item) for item in obj)" number="172" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Omitted Generics (x3)" content="    elif isinstance(obj, set):" number="173" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        return {convert_to_dict(item) for item in obj}" number="174" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Omitted Generics (x18)" content="    elif isinstance(obj, dict):" number="175" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        return {key: convert_to_dict(value) for key, value in obj.items()}" number="176" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    elif hasattr(obj, '__dict__'):" number="177" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x11)" content="        return {key: convert_to_dict(value) for key, value in obj.__dict__.items()}" number="178" precision="any"/><line any_info="No Anys on this line!" content="    else:" number="179" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="        return obj" number="180" precision="any"/><line any_info="No Anys on this line!" content="" number="181" precision="empty"/><line any_info="No Anys on this line!" content="" number="182" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x1)" content="def is_type_allowed(obj, allowed_types: tuple) -&gt; bool:" number="183" precision="any"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="184" precision="empty"/><line any_info="No Anys on this line!" content="    This convenience function checks if the type of the provided object is allowed given" number="185" precision="empty"/><line any_info="No Anys on this line!" content="    the tuple of allowed types provided as argument." number="186" precision="empty"/><line any_info="No Anys on this line!" content="" number="187" precision="empty"/><line any_info="No Anys on this line!" content="    :param obj: object to check" number="188" precision="empty"/><line any_info="No Anys on this line!" content="    :param allowed_types: allowed types" number="189" precision="empty"/><line any_info="No Anys on this line!" content="" number="190" precision="empty"/><line any_info="No Anys on this line!" content="    :return: True if allowed, False otherwise" number="191" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="192" precision="empty"/><line any_info="No Anys on this line!" content="" number="193" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x1)" content="    if not isinstance(obj, allowed_types):" number="194" precision="any"/><line any_info="No Anys on this line!" content="        return False" number="195" precision="precise"/><line any_info="No Anys on this line!" content="" number="196" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x3)" content="    if isinstance(obj, list):" number="197" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Unannotated (x1)" content="        return all(is_type_allowed(item, allowed_types) for item in obj)" number="198" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x2)" content="    elif isinstance(obj, tuple):" number="199" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Unannotated (x1)" content="        return all(is_type_allowed(item, allowed_types) for item in obj)" number="200" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x3)" content="    elif isinstance(obj, set):" number="201" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Unannotated (x1)" content="        return all(is_type_allowed(item, allowed_types) for item in obj)" number="202" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x18)" content="    elif isinstance(obj, dict):" number="203" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Unannotated (x1)" content="        return all(is_type_allowed(value, allowed_types) for value in obj.values())" number="204" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    elif hasattr(obj, '__dict__'):" number="205" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)&#10;Omitted Generics (x2)" content="        return all(is_type_allowed(value, allowed_types) for value in obj.__dict__.values())" number="206" precision="any"/><line any_info="No Anys on this line!" content="" number="207" precision="empty"/><line any_info="No Anys on this line!" content="    return True" number="208" precision="precise"/></mypy-report-file>