<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\core\commons\parameters.py" module="core.src.pypz.core.commons.parameters"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="from __future__ import annotations" number="16" precision="precise"/><line any_info="No Anys on this line!" content="from types import GenericAlias" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Generic, TypeVar, Type, Any, Callable, Optional" number="18" precision="precise"/><line any_info="No Anys on this line!" content="" number="19" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.commons.utils import is_type_allowed" number="20" precision="any"/><line any_info="No Anys on this line!" content="" number="21" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x48)&#10;Explicit (x2)" content="allowed_param_types = (str, int, float, set, list, dict, type(None))" number="22" precision="precise"/><line any_info="No Anys on this line!" content="" number="23" precision="empty"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="No Anys on this line!" content="ParameterType = TypeVar(&quot;ParameterType&quot;)" number="25" precision="empty"/><line any_info="No Anys on this line!" content="" number="26" precision="empty"/><line any_info="No Anys on this line!" content="" number="27" precision="empty"/><line any_info="No Anys on this line!" content="class ExpectedParameter(Generic[ParameterType]):" number="28" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="29" precision="empty"/><line any_info="No Anys on this line!" content="    This is a descriptor class, which describes an instance parameter. To do that" number="30" precision="empty"/><line any_info="No Anys on this line!" content="    you need to describe the parameter on class level (which shall be one of the" number="31" precision="empty"/><line any_info="No Anys on this line!" content="    RegisteredInterface) then you need to refer with the same name as instance variable." number="32" precision="empty"/><line any_info="No Anys on this line!" content="    Usage:" number="33" precision="empty"/><line any_info="No Anys on this line!" content="" number="34" precision="empty"/><line any_info="No Anys on this line!" content="    .. code-block:: python" number="35" precision="empty"/><line any_info="No Anys on this line!" content="" number="36" precision="empty"/><line any_info="No Anys on this line!" content="       class TestImpl(Instance):" number="37" precision="empty"/><line any_info="No Anys on this line!" content="           required_param = ExpectedParameter(required=True, parameter_type=str)" number="38" precision="empty"/><line any_info="No Anys on this line!" content="           optional_param = ExpectedParameter(required=False, parameter_type=str)" number="39" precision="empty"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="No Anys on this line!" content="           def __init__(self):" number="41" precision="empty"/><line any_info="No Anys on this line!" content="               self.required_param = None" number="42" precision="empty"/><line any_info="No Anys on this line!" content="               self.optional_param = &quot;defaultValue&quot;" number="43" precision="empty"/><line any_info="No Anys on this line!" content="" number="44" precision="empty"/><line any_info="No Anys on this line!" content="    This is equivalent to:" number="45" precision="empty"/><line any_info="No Anys on this line!" content="" number="46" precision="empty"/><line any_info="No Anys on this line!" content="    .. code-block:: python" number="47" precision="empty"/><line any_info="No Anys on this line!" content="" number="48" precision="empty"/><line any_info="No Anys on this line!" content="       class TestImpl(Instance):" number="49" precision="empty"/><line any_info="No Anys on this line!" content="           required_param = RequiredParameter(str)" number="50" precision="empty"/><line any_info="No Anys on this line!" content="           optional_param = OptionalParameter(str)" number="51" precision="empty"/><line any_info="No Anys on this line!" content="" number="52" precision="empty"/><line any_info="No Anys on this line!" content="           def __init__(self):" number="53" precision="empty"/><line any_info="No Anys on this line!" content="               self.required_param = None" number="54" precision="empty"/><line any_info="No Anys on this line!" content="               self.optional_param = &quot;defaultValue&quot;" number="55" precision="empty"/><line any_info="No Anys on this line!" content="" number="56" precision="empty"/><line any_info="No Anys on this line!" content="    :param required: true, if parameter required, false if not" number="57" precision="empty"/><line any_info="No Anys on this line!" content="    :param parameter_type: (str, int, float, set, list, dict, type(None))" number="58" precision="empty"/><line any_info="No Anys on this line!" content="    :param alt_name: alternative name for the parameter, if specified it acts as reference to the parameter" number="59" precision="empty"/><line any_info="No Anys on this line!" content="    :param on_update: callback to react on value update" number="60" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="61" precision="empty"/><line any_info="No Anys on this line!" content="" number="62" precision="empty"/><line any_info="No Anys on this line!" content="    NamePrefix = &quot;__private_instance_parameter__&quot;" number="63" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="64" precision="empty"/><line any_info="No Anys on this line!" content="    This prefix is used to prefix the actual variables created by this descriptor" number="65" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="66" precision="empty"/><line any_info="No Anys on this line!" content="" number="67" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Explicit (x1)" content="    def __init__(self," number="68" precision="imprecise"/><line any_info="No Anys on this line!" content="                 required: bool," number="69" precision="empty"/><line any_info="No Anys on this line!" content="                 parameter_type: Type[ParameterType]," number="70" precision="empty"/><line any_info="No Anys on this line!" content="                 alt_name: Optional[str] = None," number="71" precision="precise"/><line any_info="No Anys on this line!" content="                 description: Optional[str] = None," number="72" precision="precise"/><line any_info="No Anys on this line!" content="                 on_update: Callable[[Any], None] = None):" number="73" precision="precise"/><line any_info="No Anys on this line!" content="" number="74" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        if parameter_type is None:" number="75" precision="imprecise"/><line any_info="No Anys on this line!" content="            raise TypeError(&quot;Parameter type must be specified&quot;)" number="76" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="77" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        if &quot;typing&quot; == parameter_type.__module__:" number="78" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="            raise TypeError(f&quot;Type description not allowed: {parameter_type}&quot;)" number="79" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="80" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)" content="        self.parameter_type: Type[ParameterType] = parameter_type \" number="81" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Explicit (x1)&#10;Error (x1)" content="            if not isinstance(parameter_type, GenericAlias) else parameter_type.__origin__" number="82" precision="any"/><line any_info="No Anys on this line!" content="" number="83" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        self.generic_types: list[type] = None \" number="84" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Explicit (x1)&#10;Error (x1)" content="            if not isinstance(parameter_type, GenericAlias) else parameter_type.__args__" number="85" precision="any"/><line any_info="No Anys on this line!" content="" number="86" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x26)" content="        if not issubclass(self.parameter_type, allowed_param_types):" number="87" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x26)" content="            raise TypeError(f&quot;Invalid parameter type: {self.parameter_type}. Allowed types are: {allowed_param_types}&quot;)" number="88" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="89" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        self.required: bool = required" number="90" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="91" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        self.name: Optional[str] = alt_name" number="92" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="93" precision="empty"/><line any_info="No Anys on this line!" content="        Alternative name for the parameter. It can be used to define the actual" number="94" precision="empty"/><line any_info="No Anys on this line!" content="        parameter name with having a different variable name." number="95" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="96" precision="empty"/><line any_info="No Anys on this line!" content="" number="97" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        self.description: Optional[str] = description" number="98" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="99" precision="empty"/><line any_info="No Anys on this line!" content="        Short description of the parameter and its intended usage" number="100" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="101" precision="empty"/><line any_info="No Anys on this line!" content="" number="102" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x5)&#10;Omitted Generics (x1)" content="        self.on_update: Callable[[Any, Any], None] = on_update" number="103" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="104" precision="empty"/><line any_info="No Anys on this line!" content="        Callback to execute a specific logic, if the value is changed" number="105" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="106" precision="empty"/><line any_info="No Anys on this line!" content="" number="107" precision="empty"/><line any_info="No Anys on this line!" content="    def __set_name__(self, owner, name):" number="108" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="        if name.startswith(f&quot;_{owner.__name__}__&quot;):" number="109" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            raise TypeError(&quot;Parameters cannot be defined for private scope&quot;)" number="110" precision="any"/><line any_info="No Anys on this line!" content="" number="111" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x1)" content="        if self.name is None:" number="112" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x1)" content="            self.name = name" number="113" precision="any"/><line any_info="No Anys on this line!" content="" number="114" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x3)&#10;Explicit (x1)" content="        self.internal_name = ExpectedParameter.NamePrefix + name" number="115" precision="any"/><line any_info="No Anys on this line!" content="" number="116" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Unannotated (x2)" content="    def __get__(self, instance, owner) -&gt; ParameterType:" number="117" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x1)" content="        if not hasattr(instance, self.internal_name):" number="118" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Omitted Generics (x1)" content="            raise AttributeError(f&quot;'{owner.__name__}' has no attribute '{self.name}'&quot;)" number="119" precision="any"/><line any_info="No Anys on this line!" content="" number="120" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x13)&#10;Omitted Generics (x3)&#10;Unannotated (x2)" content="        return getattr(instance, self.internal_name)" number="121" precision="any"/><line any_info="No Anys on this line!" content="" number="122" precision="empty"/><line any_info="No Anys on this line!" content="    def __set__(self, instance, value):" number="123" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)&#10;Omitted Generics (x24)" content="        if not is_type_allowed(value, allowed_param_types):" number="124" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x12)&#10;Omitted Generics (x25)&#10;Explicit (x2)" content="            raise TypeError(f&quot;Invalid parameter value type for '{self.name}': {type(value)}. &quot;" number="125" precision="any"/><line any_info="No Anys on this line!" content="                            f&quot;Allowed types: {allowed_param_types}&quot;)" number="126" precision="empty"/><line any_info="No Anys on this line!" content="" number="127" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        if (value is not None) and \" number="128" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x1)" content="                (self.parameter_type is not None) and \" number="129" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Omitted Generics (x1)" content="                (not isinstance(value, self.parameter_type)):" number="130" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x13)&#10;Omitted Generics (x1)&#10;Explicit (x2)" content="            raise TypeError(f&quot;Invalid parameter value type for '{self.name}': {type(value)}. &quot;" number="131" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="                            f&quot;Expected: {self.parameter_type}&quot;)" number="132" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="133" precision="empty"/><line any_info="No Anys on this line!" content="        # TODO - evtl. checking against generic parameters" number="134" precision="empty"/><line any_info="No Anys on this line!" content="" number="135" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)&#10;Omitted Generics (x2)" content="        if (not hasattr(instance, self.internal_name)) and (self.name not in instance.get_protected().get_parameters()):" number="136" precision="any"/><line any_info="No Anys on this line!" content="            &quot;&quot;&quot; This is the normal init path, where an object has just been constructed and" number="137" precision="empty"/><line any_info="No Anys on this line!" content="                the parameters' initial value is set &quot;&quot;&quot;" number="138" precision="empty"/><line any_info="No Anys on this line!" content="" number="139" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Explicit (x1)&#10;Omitted Generics (x1)" content="            setattr(instance, self.internal_name, value)" number="140" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)&#10;Omitted Generics (x1)" content="            instance.get_protected().get_parameters()[self.name] = value" number="141" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x1)" content="            if self.on_update is not None:" number="142" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x1)" content="                self.on_update(instance, value)" number="143" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)&#10;Omitted Generics (x2)" content="        elif (not hasattr(instance, self.internal_name)) and (self.name in instance.get_protected().get_parameters()):" number="144" precision="any"/><line any_info="No Anys on this line!" content="            &quot;&quot;&quot; This path usually represents the case, where a replica is created. The parameter in the dict is" number="145" precision="empty"/><line any_info="No Anys on this line!" content="                already set through the original, but the actual parameter attribute is not yet set in the replica." number="146" precision="empty"/><line any_info="No Anys on this line!" content="                In this case it does not matter, what the value is, since the one in the param dict has precedence. &quot;&quot;&quot;" number="147" precision="empty"/><line any_info="No Anys on this line!" content="" number="148" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x10)&#10;Explicit (x1)&#10;Omitted Generics (x2)" content="            setattr(instance, self.internal_name, instance.get_protected().get_parameters()[self.name])" number="149" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x1)" content="            if self.on_update is not None:" number="150" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x1)" content="                self.on_update(instance, value)" number="151" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x10)&#10;Omitted Generics (x2)" content="        elif (hasattr(instance, self.internal_name)) and (self.name in instance.get_protected().get_parameters()):" number="152" precision="any"/><line any_info="No Anys on this line!" content="            &quot;&quot;&quot; This is the normal update path for both the normal and the replicated case. Logic shall be" number="153" precision="empty"/><line any_info="No Anys on this line!" content="                executed only, if there is value difference. &quot;&quot;&quot;" number="154" precision="empty"/><line any_info="No Anys on this line!" content="" number="155" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Explicit (x12)&#10;Omitted Generics (x3)" content="            if getattr(instance, self.internal_name) != value:" number="156" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Explicit (x1)&#10;Omitted Generics (x1)" content="                setattr(instance, self.internal_name, value)" number="157" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x1)" content="                if self.on_update is not None:" number="158" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x1)" content="                    self.on_update(instance, value)" number="159" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Omitted Generics (x1)" content="            if instance.get_protected().get_parameters()[self.name] != value:" number="160" precision="any"/><line any_info="No Anys on this line!" content="                &quot;&quot;&quot; Note that if parameter has been set directly on the attribute, then" number="161" precision="empty"/><line any_info="No Anys on this line!" content="                    we need to update it in the parameters as well. Notice that" number="162" precision="empty"/><line any_info="No Anys on this line!" content="                    we cause recurrence, since this __set__ will be called again. This" number="163" precision="empty"/><line any_info="No Anys on this line!" content="                    will not cause any trouble however, since this path is not executed" number="164" precision="empty"/><line any_info="No Anys on this line!" content="                    if the new value equals old value, which it does, since we set the" number="165" precision="empty"/><line any_info="No Anys on this line!" content="                    value in the just before. Recursion is not nice, but still it is" number="166" precision="empty"/><line any_info="No Anys on this line!" content="                    the least complex solution to ensure consistency between parameters" number="167" precision="empty"/><line any_info="No Anys on this line!" content="                    and ExpectedParameter attributes. &quot;&quot;&quot;" number="168" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)&#10;Omitted Generics (x1)" content="                instance.get_protected().get_parameters()[self.name] = value" number="169" precision="any"/><line any_info="No Anys on this line!" content="        else:" number="170" precision="empty"/><line any_info="No Anys on this line!" content="            &quot;&quot;&quot; This path shall actually never be executed, since there is no case, where the value is set, but" number="171" precision="empty"/><line any_info="No Anys on this line!" content="                the parameter dict is not updated. This is ensured by the first path. &quot;&quot;&quot;" number="172" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            raise AttributeError(&quot;Parameter value is missing from the parameter dict. This should not happen.&quot;" number="173" precision="any"/><line any_info="No Anys on this line!" content="                                 &quot;Please contact the devs.&quot;)" number="174" precision="empty"/><line any_info="No Anys on this line!" content="" number="175" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="    def __eq__(self, other: object) -&gt; bool:" number="176" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        if self is other:" number="177" precision="imprecise"/><line any_info="No Anys on this line!" content="            return True" number="178" precision="precise"/><line any_info="No Anys on this line!" content="" number="179" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Explicit (x2)" content="        return isinstance(other, type(self)) and \" number="180" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            (self.required == other.required) and \" number="181" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)" content="            (self.parameter_type == other.parameter_type) and \" number="182" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            (self.name == other.name) and \" number="183" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            (self.description == other.description) and \" number="184" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            (self.generic_types == other.generic_types)" number="185" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="186" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)&#10;Unannotated (x1)" content="    def to_dict(self, instance=None) -&gt; dict:" number="187" precision="any"/><line any_info="No Anys on this line!" content="        return {" number="188" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="            self.name: {" number="189" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                'type': None if self.parameter_type is None else" number="190" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)&#10;Explicit (x1)&#10;Error (x1)" content="                self.parameter_type.__origin__ if isinstance(self.parameter_type, GenericAlias)" number="191" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                else self.parameter_type.__name__," number="192" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="                'required': self.required," number="193" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="                'description': self.description," number="194" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Omitted Generics (x3)" content="                'currentValue': None if instance is None else self.__get__(instance, None)" number="195" precision="any"/><line any_info="No Anys on this line!" content="            }" number="196" precision="empty"/><line any_info="No Anys on this line!" content="        }" number="197" precision="empty"/><line any_info="No Anys on this line!" content="" number="198" precision="empty"/><line any_info="No Anys on this line!" content="" number="199" precision="empty"/><line any_info="No Anys on this line!" content="class RequiredParameter(ExpectedParameter[ParameterType]):" number="200" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="201" precision="empty"/><line any_info="No Anys on this line!" content="    Convenience class to represent a required parameter" number="202" precision="empty"/><line any_info="No Anys on this line!" content="    Usage:" number="203" precision="empty"/><line any_info="No Anys on this line!" content="" number="204" precision="empty"/><line any_info="No Anys on this line!" content="    .. code-block::" number="205" precision="empty"/><line any_info="No Anys on this line!" content="" number="206" precision="empty"/><line any_info="No Anys on this line!" content="       class TestImpl(Instance):" number="207" precision="empty"/><line any_info="No Anys on this line!" content="           required_param = RequiredParameter(str)" number="208" precision="empty"/><line any_info="No Anys on this line!" content="           optional_param = OptionalParameter(str)" number="209" precision="empty"/><line any_info="No Anys on this line!" content="           def __init__(self):" number="210" precision="empty"/><line any_info="No Anys on this line!" content="               self.required_param = None" number="211" precision="empty"/><line any_info="No Anys on this line!" content="               self.optional_param = &quot;defaultValue&quot;" number="212" precision="empty"/><line any_info="No Anys on this line!" content="" number="213" precision="empty"/><line any_info="No Anys on this line!" content="    :param parameter_type: (str, int, float, set, list, dict, type(None))" number="214" precision="empty"/><line any_info="No Anys on this line!" content="    :param alt_name: alternative name for the parameter, if specified it acts as reference to the parameter" number="215" precision="empty"/><line any_info="No Anys on this line!" content="    :param on_update: callback to react on value update" number="216" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="217" precision="empty"/><line any_info="No Anys on this line!" content="" number="218" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Explicit (x1)" content="    def __init__(self," number="219" precision="imprecise"/><line any_info="No Anys on this line!" content="                 parameter_type: Type[ParameterType] = None," number="220" precision="precise"/><line any_info="No Anys on this line!" content="                 alt_name: str = None," number="221" precision="precise"/><line any_info="No Anys on this line!" content="                 description: Optional[str] = None," number="222" precision="precise"/><line any_info="No Anys on this line!" content="                 on_update: Callable[[Any], None] = None):" number="223" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)&#10;Explicit (x1)" content="        super().__init__(True, parameter_type, alt_name, description, on_update)" number="224" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="225" precision="empty"/><line any_info="No Anys on this line!" content="" number="226" precision="empty"/><line any_info="No Anys on this line!" content="class OptionalParameter(ExpectedParameter[ParameterType]):" number="227" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="228" precision="empty"/><line any_info="No Anys on this line!" content="    Convenience class to represent an optional parameter" number="229" precision="empty"/><line any_info="No Anys on this line!" content="    Usage:" number="230" precision="empty"/><line any_info="No Anys on this line!" content="" number="231" precision="empty"/><line any_info="No Anys on this line!" content="    .. code-block::" number="232" precision="empty"/><line any_info="No Anys on this line!" content="" number="233" precision="empty"/><line any_info="No Anys on this line!" content="       class TestImpl(Instance):" number="234" precision="empty"/><line any_info="No Anys on this line!" content="           required_param = RequiredParameter(str)" number="235" precision="empty"/><line any_info="No Anys on this line!" content="           optional_param = OptionalParameter(str)" number="236" precision="empty"/><line any_info="No Anys on this line!" content="           def __init__(self):" number="237" precision="empty"/><line any_info="No Anys on this line!" content="               self.required_param = None" number="238" precision="empty"/><line any_info="No Anys on this line!" content="               self.optional_param = &quot;defaultValue&quot;" number="239" precision="empty"/><line any_info="No Anys on this line!" content="" number="240" precision="empty"/><line any_info="No Anys on this line!" content="    :param parameter_type: (str, int, float, set, list, dict, type(None))" number="241" precision="empty"/><line any_info="No Anys on this line!" content="    :param alt_name: alternative name for the parameter, if specified it acts as reference to the parameter" number="242" precision="empty"/><line any_info="No Anys on this line!" content="    :param on_update: callback to react on value update" number="243" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="244" precision="empty"/><line any_info="No Anys on this line!" content="" number="245" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Explicit (x1)" content="    def __init__(self," number="246" precision="imprecise"/><line any_info="No Anys on this line!" content="                 parameter_type: Type[ParameterType] = None," number="247" precision="precise"/><line any_info="No Anys on this line!" content="                 alt_name: str = None," number="248" precision="precise"/><line any_info="No Anys on this line!" content="                 description: Optional[str] = None," number="249" precision="precise"/><line any_info="No Anys on this line!" content="                 on_update: Callable[[Any], None] = None):" number="250" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)&#10;Explicit (x1)" content="        super().__init__(False, parameter_type, alt_name, description, on_update)" number="251" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="252" precision="empty"/><line any_info="No Anys on this line!" content="" number="253" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x2)" content="def retrieve_parameters(input_val, parameter_type: Type[ExpectedParameter]) -&gt; dict[str, ExpectedParameter]:" number="254" precision="any"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="255" precision="empty"/><line any_info="No Anys on this line!" content="    This method attempts to retrieve all described parameters with" number="256" precision="empty"/><line any_info="No Anys on this line!" content="    either public or protected scope. Private scoped parameters are" number="257" precision="empty"/><line any_info="No Anys on this line!" content="    ignored." number="258" precision="empty"/><line any_info="No Anys on this line!" content="" number="259" precision="empty"/><line any_info="No Anys on this line!" content="    :param input_val: object or class to be mapped" number="260" precision="empty"/><line any_info="No Anys on this line!" content="    :param parameter_type: parameter type to look for" number="261" precision="empty"/><line any_info="No Anys on this line!" content="    :return: dict of parameter names to parameter objects" number="262" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="263" precision="empty"/><line any_info="No Anys on this line!" content="" number="264" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Explicit (x2)" content="    object_class = input_val.__class__ if not isinstance(input_val, type) else input_val" number="265" precision="any"/><line any_info="No Anys on this line!" content="" number="266" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="    result: dict[str, ExpectedParameter] = dict()" number="267" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="268" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="    for implemented_class in object_class.__mro__:" number="269" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="        for param_name, param in implemented_class.__dict__.items():" number="270" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)&#10;Omitted Generics (x1)" content="            if isinstance(param, parameter_type) and \" number="271" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="                    (not param_name.startswith(f&quot;_{implemented_class.__name__}__&quot;)):  # privates ignored" number="272" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                if param.name in result:" number="273" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)&#10;Unannotated (x1)" content="                    raise AttributeError(f&quot;Parameter '{param.name}' is already &quot;" number="274" precision="any"/><line any_info="No Anys on this line!" content="                                         f&quot;declared in '{implemented_class}'&quot;)" number="275" precision="empty"/><line any_info="No Anys on this line!" content="" number="276" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="                result[param.name] = param" number="277" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="278" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="    return result" number="279" precision="imprecise"/></mypy-report-file>