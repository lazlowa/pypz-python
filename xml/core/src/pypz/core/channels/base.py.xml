<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\core\channels\base.py" module="core.src.pypz.core.channels.base"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import logging" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import threading" number="17" precision="precise"/><line any_info="No Anys on this line!" content="import time" number="18" precision="precise"/><line any_info="No Anys on this line!" content="import traceback" number="19" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Callable, Any, TYPE_CHECKING, Optional" number="20" precision="precise"/><line any_info="No Anys on this line!" content="from abc import ABC, abstractmethod" number="21" precision="precise"/><line any_info="No Anys on this line!" content="import concurrent.futures" number="22" precision="precise"/><line any_info="No Anys on this line!" content="import json" number="23" precision="precise"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.channels.status import ChannelStatusMonitor, ChannelFilter, ChannelStatusMessage, ChannelStatus, \" number="25" precision="any"/><line any_info="No Anys on this line!" content="    NameSeparator" number="26" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.commons.loggers import ContextLogger" number="27" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.commons.utils import ensure_type, current_time_millis, SynchronizedReference" number="28" precision="any"/><line any_info="No Anys on this line!" content="" number="29" precision="empty"/><line any_info="No Anys on this line!" content="if TYPE_CHECKING:" number="30" precision="precise"/><line any_info="No Anys on this line!" content="    from pypz.core.specs.plugin import PortPlugin" number="31" precision="any"/><line any_info="No Anys on this line!" content="" number="32" precision="empty"/><line any_info="No Anys on this line!" content="" number="33" precision="empty"/><line any_info="No Anys on this line!" content="class ChannelMetric:" number="34" precision="precise"/><line any_info="No Anys on this line!" content="    def __init__(self, elapsedTimeSinceLastIO, recordCountInLastIO):" number="35" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        self.elapsedTimeSinceLastIO = elapsedTimeSinceLastIO" number="36" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        self.recordCountInLastIO = recordCountInLastIO" number="37" precision="any"/><line any_info="No Anys on this line!" content="" number="38" precision="empty"/><line any_info="No Anys on this line!" content="" number="39" precision="empty"/><line any_info="No Anys on this line!" content="class ChannelBase(ABC):" number="40" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="41" precision="empty"/><line any_info="No Anys on this line!" content="    The abstract base for the :class:`ChannelReader &lt;pypz.core.channels.io.ChannelReader&gt;` and the" number="42" precision="empty"/><line any_info="No Anys on this line!" content="    :class:`ChannelWriter &lt;pypz.core.channels.io.ChannelWriter&gt;` classes. It contains the common" number="43" precision="empty"/><line any_info="No Anys on this line!" content="    logic to be used in both classes' implementations." number="44" precision="empty"/><line any_info="No Anys on this line!" content="" number="45" precision="empty"/><line any_info="No Anys on this line!" content="    :param channel_name: name of the channel" number="46" precision="empty"/><line any_info="No Anys on this line!" content="    :param context: the :class:`PortPlugin &lt;pypz.core.specs.plugin.PortPlugin&gt;`, which operates this channel" number="47" precision="empty"/><line any_info="No Anys on this line!" content="    :param executor: an external ThreadPoolExecutor, if not provided, on will be created internally" number="48" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="49" precision="empty"/><line any_info="No Anys on this line!" content="" number="50" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= Static fields =======================" number="51" precision="empty"/><line any_info="No Anys on this line!" content="" number="52" precision="empty"/><line any_info="No Anys on this line!" content="    DefaultStatusThreadIntervalInMs = 2000" number="53" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="54" precision="empty"/><line any_info="No Anys on this line!" content="    This value defines in how many ms the status messages (health check) will be sent to the" number="55" precision="empty"/><line any_info="No Anys on this line!" content="    counterpart channel." number="56" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="57" precision="empty"/><line any_info="No Anys on this line!" content="" number="58" precision="empty"/><line any_info="No Anys on this line!" content="    ControlLoopExceptionTimeoutInMs = 60000" number="59" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="60" precision="empty"/><line any_info="No Anys on this line!" content="    This value defines the timeout for having unhandled exception in the control loop." number="61" precision="empty"/><line any_info="No Anys on this line!" content="    After expiration, the control loop will be terminated." number="62" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="63" precision="empty"/><line any_info="No Anys on this line!" content="" number="64" precision="empty"/><line any_info="No Anys on this line!" content="    ParamKeyLogLevel = &quot;logLevel&quot;" number="65" precision="precise"/><line any_info="No Anys on this line!" content="    ParamKeyMetricsEnabled = &quot;metricsEnabled&quot;" number="66" precision="precise"/><line any_info="No Anys on this line!" content="" number="67" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= Ctor =======================" number="68" precision="empty"/><line any_info="No Anys on this line!" content="" number="69" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x1)" content="    def __init__(self, channel_name: str," number="70" precision="any"/><line any_info="No Anys on this line!" content="                 context: 'PortPlugin'," number="71" precision="empty"/><line any_info="No Anys on this line!" content="                 executor: Optional[concurrent.futures.ThreadPoolExecutor] = None," number="72" precision="precise"/><line any_info="No Anys on this line!" content="                 **kwargs):" number="73" precision="empty"/><line any_info="No Anys on this line!" content="" number="74" precision="empty"/><line any_info="No Anys on this line!" content="        if channel_name is None:" number="75" precision="precise"/><line any_info="No Anys on this line!" content="            raise ValueError(&quot;Channel name must be provided&quot;)" number="76" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="77" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        if context is None:" number="78" precision="any"/><line any_info="No Anys on this line!" content="            raise ValueError(&quot;Context instance must be provided&quot;)" number="79" precision="precise"/><line any_info="No Anys on this line!" content="" number="80" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self.__silent_mode: bool = kwargs[&quot;silent_mode&quot;] if &quot;silent_mode&quot; in kwargs else False" number="81" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="82" precision="empty"/><line any_info="No Anys on this line!" content="        If this flag is set, then this channel will not send status messages. One use-case is," number="83" precision="empty"/><line any_info="No Anys on this line!" content="        if a channelRW is created to sniff the status of channels." number="84" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="85" precision="empty"/><line any_info="No Anys on this line!" content="" number="86" precision="empty"/><line any_info="No Anys on this line!" content="        self._channel_name: str = channel_name" number="87" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="88" precision="empty"/><line any_info="No Anys on this line!" content="        This member stores the name of the channel, which normally reflects to the resource's name." number="89" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="90" precision="empty"/><line any_info="No Anys on this line!" content="" number="91" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self._context: PortPlugin = context" number="92" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="93" precision="empty"/><line any_info="No Anys on this line!" content="        The context of this channel, which shall be an object of PortPlugin type" number="94" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="95" precision="empty"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        self._unique_name: str = f&quot;{self._channel_name}{NameSeparator}{self._context.get_full_name()}&quot;" number="97" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="98" precision="empty"/><line any_info="No Anys on this line!" content="        This name identifies the channel in its context. It is necessary, since channel name on" number="99" precision="empty"/><line any_info="No Anys on this line!" content="        its own is not unique, can be reused by different owners." number="100" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="101" precision="empty"/><line any_info="No Anys on this line!" content="" number="102" precision="empty"/><line any_info="No Anys on this line!" content="        self._location: str | None = None" number="103" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="104" precision="empty"/><line any_info="No Anys on this line!" content="        This member stores the location string of the channel. The location depends on the technology. It can refer" number="105" precision="empty"/><line any_info="No Anys on this line!" content="        to either a remote or a local URL as well." number="106" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="107" precision="empty"/><line any_info="No Anys on this line!" content="" number="108" precision="empty"/><line any_info="No Anys on this line!" content="        self._channel_opened: bool = False" number="109" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="110" precision="empty"/><line any_info="No Anys on this line!" content="        This member is a flag to signalize, whether a channel is open and ready to use." number="111" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="112" precision="empty"/><line any_info="No Anys on this line!" content="" number="113" precision="empty"/><line any_info="No Anys on this line!" content="        self._channel_started: bool = False" number="114" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="115" precision="empty"/><line any_info="No Anys on this line!" content="        Status flag to signalize, whether the channel has been started." number="116" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="117" precision="empty"/><line any_info="No Anys on this line!" content="" number="118" precision="empty"/><line any_info="No Anys on this line!" content="        self._channel_stopped: bool = False" number="119" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="120" precision="empty"/><line any_info="No Anys on this line!" content="        Status flag to signalize, whether the channel has been stopped. Note that this additional flag is" number="121" precision="empty"/><line any_info="No Anys on this line!" content="        necessary, since having the _channel_started on false does not necessarily mean that the" number="122" precision="empty"/><line any_info="No Anys on this line!" content="        output was ever started and is now finished." number="123" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="124" precision="empty"/><line any_info="No Anys on this line!" content="" number="125" precision="empty"/><line any_info="No Anys on this line!" content="        self._resources_created: bool = False" number="126" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="127" precision="empty"/><line any_info="No Anys on this line!" content="        Status flag to signalize that the channel's resources are created" number="128" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="129" precision="empty"/><line any_info="No Anys on this line!" content="" number="130" precision="empty"/><line any_info="No Anys on this line!" content="        self._resources_deleted: bool = False" number="131" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="132" precision="empty"/><line any_info="No Anys on this line!" content="        Status flag to signalize that the channel's resources are deleted" number="133" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="134" precision="empty"/><line any_info="No Anys on this line!" content="" number="135" precision="empty"/><line any_info="No Anys on this line!" content="        self._executor_started: bool = False" number="136" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="137" precision="empty"/><line any_info="No Anys on this line!" content="        Flag to signalize, whether the executor thread started" number="138" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="139" precision="empty"/><line any_info="No Anys on this line!" content="" number="140" precision="empty"/><line any_info="No Anys on this line!" content="        self._stopping_executor: bool = False" number="141" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="142" precision="empty"/><line any_info="No Anys on this line!" content="        Flag to signalize the termination attempt of the executor thread" number="143" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="144" precision="empty"/><line any_info="No Anys on this line!" content="" number="145" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        self._executor_stopped: SynchronizedReference[bool] = SynchronizedReference(False)" number="146" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="147" precision="empty"/><line any_info="No Anys on this line!" content="        Flag to signalize that the executor thread has been terminated. This flag is necessary along wi" number="148" precision="empty"/><line any_info="No Anys on this line!" content="        _stopping_executor to synchronize the termination. Otherwise it can happen that the" number="149" precision="empty"/><line any_info="No Anys on this line!" content="        thread did not terminate yet, but the channel has already been closed resulting in exceptions." number="150" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="151" precision="empty"/><line any_info="No Anys on this line!" content="" number="152" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x6)" content="        self._configuration: dict = dict()" number="153" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="154" precision="empty"/><line any_info="No Anys on this line!" content="        This member stores the configuration string of the channel. This is a kind of serialized storage, since" number="155" precision="empty"/><line any_info="No Anys on this line!" content="        the configuration can be an arbitrary type with arbitrary schema as long as the interpretation is knonw." number="156" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="157" precision="empty"/><line any_info="No Anys on this line!" content="" number="158" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self._status_map: dict[str, ChannelStatusMonitor] = dict()" number="159" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="160" precision="empty"/><line any_info="No Anys on this line!" content="        This map stores the health statuses of all connected channels" number="161" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="162" precision="empty"/><line any_info="No Anys on this line!" content="" number="163" precision="empty"/><line any_info="No Anys on this line!" content="        self._executor: Optional[concurrent.futures.ThreadPoolExecutor] = executor" number="164" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="165" precision="empty"/><line any_info="No Anys on this line!" content="        This executor is used to execute the background thread, which will invoke the sendHealthStatus method" number="166" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="167" precision="empty"/><line any_info="No Anys on this line!" content="" number="168" precision="empty"/><line any_info="No Anys on this line!" content="        self._control_loop_exception_timer: int = 0" number="169" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="170" precision="empty"/><line any_info="No Anys on this line!" content="        Control loop is, where the control information are sent to the counter channel. Should" number="171" precision="empty"/><line any_info="No Anys on this line!" content="        there an exception occur, we need to make sure that we give some time to recover, before" number="172" precision="empty"/><line any_info="No Anys on this line!" content="        terminating the channel. This timer defines that grace period." number="173" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="174" precision="empty"/><line any_info="No Anys on this line!" content="" number="175" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        self._health_check_payload: dict[str, Any] = dict()" number="176" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="177" precision="empty"/><line any_info="No Anys on this line!" content="        It is possible to send additional information along with health check events. This" number="178" precision="empty"/><line any_info="No Anys on this line!" content="        member serves as the storage of this additional payload." number="179" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="180" precision="empty"/><line any_info="No Anys on this line!" content="" number="181" precision="empty"/><line any_info="No Anys on this line!" content="        self._metrics_enabled: bool = False" number="182" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="183" precision="empty"/><line any_info="No Anys on this line!" content="        Enables metric calculation i.e., to calculate additional i/o related information" number="184" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="185" precision="empty"/><line any_info="No Anys on this line!" content="" number="186" precision="empty"/><line any_info="No Anys on this line!" content="        self._channel_state_update_lock = threading.Lock()" number="187" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="188" precision="empty"/><line any_info="No Anys on this line!" content="        This lock is used to synchronize the logic that updates channel states" number="189" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="190" precision="empty"/><line any_info="No Anys on this line!" content="" number="191" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x3)" content="        self._on_status_message_received_callbacks: set[Callable[[list[ChannelStatusMessage]], None]] = set()" number="192" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="193" precision="empty"/><line any_info="No Anys on this line!" content="        Stores the callbacks, which will be executed, if status messages received" number="194" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="195" precision="empty"/><line any_info="No Anys on this line!" content="" number="196" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)" content="        self._logger: ContextLogger = ContextLogger(self._context.get_logger()," number="197" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                                                    self._context.get_full_name()," number="198" precision="any"/><line any_info="No Anys on this line!" content="                                                    self._channel_name)" number="199" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="200" precision="empty"/><line any_info="No Anys on this line!" content="        Channel logger" number="201" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="202" precision="empty"/><line any_info="No Anys on this line!" content="" number="203" precision="empty"/><line any_info="No Anys on this line!" content="        self._log_level: str = &quot;DEBUG&quot;" number="204" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="205" precision="empty"/><line any_info="No Anys on this line!" content="        Default log level. This is ok to set here, since if Operator's context logger is present," number="206" precision="empty"/><line any_info="No Anys on this line!" content="        its log level cannot be overriden, but if not, the DefaultContextLogger's can be." number="207" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="208" precision="empty"/><line any_info="No Anys on this line!" content="" number="209" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self._logger.set_log_level(logging.DEBUG)" number="210" precision="any"/><line any_info="No Anys on this line!" content="" number="211" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= Abstract methods =======================" number="212" precision="empty"/><line any_info="No Anys on this line!" content="" number="213" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="214" precision="empty"/><line any_info="No Anys on this line!" content="    def _create_resources(self) -&gt; bool:" number="215" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="216" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic of creating resources of the channel." number="217" precision="empty"/><line any_info="No Anys on this line!" content="        IMPORTANT NOTE - this method shall be invoked before the open_channel() to make sure that the resources" number="218" precision="empty"/><line any_info="No Anys on this line!" content="        are existing beforehand." number="219" precision="empty"/><line any_info="No Anys on this line!" content="" number="220" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True, if done, False if it is still in progress" number="221" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="222" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="223" precision="precise"/><line any_info="No Anys on this line!" content="" number="224" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="225" precision="empty"/><line any_info="No Anys on this line!" content="    def _delete_resources(self) -&gt; bool:" number="226" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="227" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic of deleting resources of the channel." number="228" precision="empty"/><line any_info="No Anys on this line!" content="        IMPORTANT NOTE - this method shall be invoked after the close_channel()" number="229" precision="empty"/><line any_info="No Anys on this line!" content="" number="230" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True, if done, False if it is still in progress" number="231" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="232" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="233" precision="precise"/><line any_info="No Anys on this line!" content="" number="234" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="235" precision="empty"/><line any_info="No Anys on this line!" content="    def _open_channel(self) -&gt; bool:" number="236" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="237" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to open a channel. The meaning of 'open' however is to be defined" number="238" precision="empty"/><line any_info="No Anys on this line!" content="        by the actual implementation. One developer can define it like an opened connection, other as created file etc." number="239" precision="empty"/><line any_info="No Anys on this line!" content="" number="240" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True, if done, False if it is still in progress" number="241" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="242" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="243" precision="precise"/><line any_info="No Anys on this line!" content="" number="244" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="245" precision="empty"/><line any_info="No Anys on this line!" content="    def _close_channel(self) -&gt; bool:" number="246" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="247" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to close a channel. Normally closing a channel is the last step so" number="248" precision="empty"/><line any_info="No Anys on this line!" content="        clean up of used resource shall happen here as well." number="249" precision="empty"/><line any_info="No Anys on this line!" content="" number="250" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True, if done, False if it is still in progress" number="251" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="252" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="253" precision="precise"/><line any_info="No Anys on this line!" content="" number="254" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="255" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def _configure_channel(self, channel_configuration: dict) -&gt; None:" number="256" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="257" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to interpret the provided configuration." number="258" precision="empty"/><line any_info="No Anys on this line!" content="" number="259" precision="empty"/><line any_info="No Anys on this line!" content="        :param channel_configuration: config string" number="260" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="261" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="262" precision="precise"/><line any_info="No Anys on this line!" content="" number="263" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="264" precision="empty"/><line any_info="No Anys on this line!" content="    def _send_status_message(self, message: str) -&gt; None:" number="265" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="266" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic that publishes the channel's state to the counterpart channel. The" number="267" precision="empty"/><line any_info="No Anys on this line!" content="        state string is provided by the channel itself. Note that there is defined schema, how and what will be" number="268" precision="empty"/><line any_info="No Anys on this line!" content="        provided by the channel as string, however you can append your own custom information, you only need to" number="269" precision="empty"/><line any_info="No Anys on this line!" content="        append as string separated by StateMessageSeparatorChar." number="270" precision="empty"/><line any_info="No Anys on this line!" content="" number="271" precision="empty"/><line any_info="No Anys on this line!" content="        :param message: message that shall be sent" number="272" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="273" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="274" precision="precise"/><line any_info="No Anys on this line!" content="" number="275" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="276" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="    def _retrieve_status_messages(self) -&gt; list:" number="277" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="278" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic that retrieves the status messages published by the counterpart" number="279" precision="empty"/><line any_info="No Anys on this line!" content="        channel. Notice that in case of ChannelWriter, there can be multiple InputChannels sending messages and" number="280" precision="empty"/><line any_info="No Anys on this line!" content="        in case of ChannelReader there can be multiple messages sent by the ChannelWriter, therefore this method" number="281" precision="empty"/><line any_info="No Anys on this line!" content="        shall return a list of messages. Note as well that in case you are using callbacks for your technology," number="282" precision="empty"/><line any_info="No Anys on this line!" content="        you can directly use the method onStatusMessageReceived. In this case simply return null from this method" number="283" precision="empty"/><line any_info="No Anys on this line!" content="        to ensure that it will be ignored." number="284" precision="empty"/><line any_info="No Anys on this line!" content="" number="285" precision="empty"/><line any_info="No Anys on this line!" content="        :return: list of retrieved status messages or null if method is not used" number="286" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="287" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="288" precision="precise"/><line any_info="No Anys on this line!" content="" number="289" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= Getter/setter/invoker methods =======================" number="290" precision="empty"/><line any_info="No Anys on this line!" content="" number="291" precision="empty"/><line any_info="No Anys on this line!" content="    def get_logger(self):" number="292" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._logger" number="293" precision="any"/><line any_info="No Anys on this line!" content="" number="294" precision="empty"/><line any_info="No Anys on this line!" content="    def get_channel_name(self):" number="295" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._channel_name" number="296" precision="any"/><line any_info="No Anys on this line!" content="" number="297" precision="empty"/><line any_info="No Anys on this line!" content="    def get_unique_name(self):" number="298" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._unique_name" number="299" precision="any"/><line any_info="No Anys on this line!" content="" number="300" precision="empty"/><line any_info="No Anys on this line!" content="    def get_location(self):" number="301" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._location" number="302" precision="any"/><line any_info="No Anys on this line!" content="" number="303" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_context(self) -&gt; 'PortPlugin':" number="304" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return self._context" number="305" precision="any"/><line any_info="No Anys on this line!" content="" number="306" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def get_configuration(self) -&gt; dict:" number="307" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="        return self._configuration" number="308" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="309" precision="empty"/><line any_info="No Anys on this line!" content="    def is_channel_open(self):" number="310" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._channel_opened" number="311" precision="any"/><line any_info="No Anys on this line!" content="" number="312" precision="empty"/><line any_info="No Anys on this line!" content="    def is_channel_started(self):" number="313" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._channel_started" number="314" precision="any"/><line any_info="No Anys on this line!" content="" number="315" precision="empty"/><line any_info="No Anys on this line!" content="    def is_channel_stopped(self):" number="316" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._channel_stopped" number="317" precision="any"/><line any_info="No Anys on this line!" content="" number="318" precision="empty"/><line any_info="No Anys on this line!" content="    def is_resource_created(self):" number="319" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._resources_created" number="320" precision="any"/><line any_info="No Anys on this line!" content="" number="321" precision="empty"/><line any_info="No Anys on this line!" content="    def is_resource_deleted(self):" number="322" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._resources_deleted" number="323" precision="any"/><line any_info="No Anys on this line!" content="" number="324" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="    def set_location(self, channel_location: str):" number="325" precision="any"/><line any_info="No Anys on this line!" content="        self._location = channel_location" number="326" precision="precise"/><line any_info="No Anys on this line!" content="" number="327" precision="empty"/><line any_info="No Anys on this line!" content="    def retrieve_all_connected_channel_count(self) -&gt; int:" number="328" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="329" precision="empty"/><line any_info="No Anys on this line!" content="        Returns the number of tracked input channels. This can be used to synchronize some activities like starting" number="330" precision="empty"/><line any_info="No Anys on this line!" content="        the output." number="331" precision="empty"/><line any_info="No Anys on this line!" content="" number="332" precision="empty"/><line any_info="No Anys on this line!" content="        :return: number of tracked input channels" number="333" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="334" precision="empty"/><line any_info="No Anys on this line!" content="" number="335" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return len(self._status_map)" number="336" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="337" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Omitted Generics (x1)" content="    def retrieve_connected_channel_unique_names(" number="338" precision="imprecise"/><line any_info="No Anys on this line!" content="            self," number="339" precision="empty"/><line any_info="No Anys on this line!" content="            filter_function: Optional[Callable[[ChannelFilter], bool]] = None" number="340" precision="precise"/><line any_info="No Anys on this line!" content="    ) -&gt; set:" number="341" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="342" precision="empty"/><line any_info="No Anys on this line!" content="        This method returns a set of connected channel names given the evaluation" number="343" precision="empty"/><line any_info="No Anys on this line!" content="        criteria passed as argument." number="344" precision="empty"/><line any_info="No Anys on this line!" content="" number="345" precision="empty"/><line any_info="No Anys on this line!" content="        :param filter_function: check_function check the ChannelFilter for more details (nullable)" number="346" precision="empty"/><line any_info="No Anys on this line!" content="        :return: Set of channel names that passes the given evaluation" number="347" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="348" precision="empty"/><line any_info="No Anys on this line!" content="" number="349" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        connected_channel_names = set()" number="350" precision="precise"/><line any_info="No Anys on this line!" content="" number="351" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        for key, val in self._status_map.items():" number="352" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="            if filter_function is not None:" number="353" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                if filter_function(val):" number="354" precision="any"/><line any_info="No Anys on this line!" content="                    connected_channel_names.add(key)" number="355" precision="precise"/><line any_info="No Anys on this line!" content="            else:" number="356" precision="empty"/><line any_info="No Anys on this line!" content="                connected_channel_names.add(key)" number="357" precision="precise"/><line any_info="No Anys on this line!" content="" number="358" precision="empty"/><line any_info="No Anys on this line!" content="        return connected_channel_names" number="359" precision="precise"/><line any_info="No Anys on this line!" content="" number="360" precision="empty"/><line any_info="No Anys on this line!" content="    def retrieve_healthy_connected_channel_count(self) -&gt; int:" number="361" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="362" precision="empty"/><line any_info="No Anys on this line!" content="        Returns the number of healthy tracked input channels." number="363" precision="empty"/><line any_info="No Anys on this line!" content="        This can be used to synchronize some activities like starting the output." number="364" precision="empty"/><line any_info="No Anys on this line!" content="" number="365" precision="empty"/><line any_info="No Anys on this line!" content="        :return: number of healthy tracked input channels" number="366" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="367" precision="empty"/><line any_info="No Anys on this line!" content="" number="368" precision="empty"/><line any_info="No Anys on this line!" content="        healthy_connected_channel_count = 0" number="369" precision="precise"/><line any_info="No Anys on this line!" content="" number="370" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)&#10;Omitted Generics (x3)" content="        for statusMonitor in list(self._status_map.values()):" number="371" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if statusMonitor.is_channel_healthy():" number="372" precision="any"/><line any_info="No Anys on this line!" content="                healthy_connected_channel_count += 1" number="373" precision="precise"/><line any_info="No Anys on this line!" content="" number="374" precision="empty"/><line any_info="No Anys on this line!" content="        return healthy_connected_channel_count" number="375" precision="precise"/><line any_info="No Anys on this line!" content="" number="376" precision="empty"/><line any_info="No Anys on this line!" content="    def is_any_connected_channel_healthy_and_not_stopped(self) -&gt; bool:" number="377" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="378" precision="empty"/><line any_info="No Anys on this line!" content="        This method realises the question &quot;Is there any connected channel that is healthy, but not" number="379" precision="empty"/><line any_info="No Anys on this line!" content="        stopped?&quot;. This can be seen as opposite of &quot;Is all connected channels stopped or unhealthy?&quot;" number="380" precision="empty"/><line any_info="No Anys on this line!" content="        with the strong difference that the latter does not give a proper answer if there is no" number="381" precision="empty"/><line any_info="No Anys on this line!" content="        connected channels at all." number="382" precision="empty"/><line any_info="No Anys on this line!" content="" number="383" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if there is any channel healthy, but not stopped, False if not or no connected channel" number="384" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="385" precision="empty"/><line any_info="No Anys on this line!" content="" number="386" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)&#10;Omitted Generics (x3)" content="        for status_monitor in list(self._status_map.values()):" number="387" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x7)" content="            if status_monitor.is_channel_healthy() and not status_monitor.is_channel_stopped():" number="388" precision="any"/><line any_info="No Anys on this line!" content="                return True" number="389" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="390" precision="precise"/><line any_info="No Anys on this line!" content="" number="391" precision="empty"/><line any_info="No Anys on this line!" content="    def is_any_connected_channel_healthy_and_not_closed(self) -&gt; bool:" number="392" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="393" precision="empty"/><line any_info="No Anys on this line!" content="        This method realises the question &quot;Is there any connected channel that is healthy, but not" number="394" precision="empty"/><line any_info="No Anys on this line!" content="        closed?&quot;. This can be seen as opposite of &quot;Is all connected channels closed or unhealthy?&quot;" number="395" precision="empty"/><line any_info="No Anys on this line!" content="        with the strong difference that the latter does not give a proper answer if there is no" number="396" precision="empty"/><line any_info="No Anys on this line!" content="        connected channels at all." number="397" precision="empty"/><line any_info="No Anys on this line!" content="" number="398" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if there is any channel healthy, but not closed, False if not or no connected channel" number="399" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="400" precision="empty"/><line any_info="No Anys on this line!" content="" number="401" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)&#10;Omitted Generics (x3)" content="        for status_monitor in list(self._status_map.values()):" number="402" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x7)" content="            if status_monitor.is_channel_healthy() and not status_monitor.is_channel_closed():" number="403" precision="any"/><line any_info="No Anys on this line!" content="                return True" number="404" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="405" precision="precise"/><line any_info="No Anys on this line!" content="" number="406" precision="empty"/><line any_info="No Anys on this line!" content="    def is_any_connected_channel_healthy_and_not_stopped_and_not_closed(self) -&gt; bool:" number="407" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="408" precision="empty"/><line any_info="No Anys on this line!" content="        This method realises the question &quot;Is there any connected channel that is healthy, but not" number="409" precision="empty"/><line any_info="No Anys on this line!" content="        stopped and not closed?&quot;. This can be seen as opposite of &quot;Is all connected channels closed or" number="410" precision="empty"/><line any_info="No Anys on this line!" content="        stopped or unhealthy?&quot; with the strong difference that the latter does not give a proper" number="411" precision="empty"/><line any_info="No Anys on this line!" content="        answer if there is no connected channels at all." number="412" precision="empty"/><line any_info="No Anys on this line!" content="" number="413" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if there is any channel healthy, but not stopped and not closed," number="414" precision="empty"/><line any_info="No Anys on this line!" content="                 False if not or no connected channel" number="415" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="416" precision="empty"/><line any_info="No Anys on this line!" content="" number="417" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)&#10;Omitted Generics (x3)" content="        for status_monitor in list(self._status_map.values()):" number="418" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="            if status_monitor.is_channel_healthy() and \" number="419" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                    not status_monitor.is_channel_stopped() and \" number="420" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                    not status_monitor.is_channel_closed():" number="421" precision="any"/><line any_info="No Anys on this line!" content="                return True" number="422" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="423" precision="precise"/><line any_info="No Anys on this line!" content="" number="424" precision="empty"/><line any_info="No Anys on this line!" content="    def is_any_connected_channels_unhealthy(self) -&gt; bool:" number="425" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="426" precision="empty"/><line any_info="No Anys on this line!" content="        This method realises the question &quot;Is there any connected channels unhealthy?&quot;. This can be seen" number="427" precision="empty"/><line any_info="No Anys on this line!" content="        as opposite of &quot;Is all connected channels healthy?&quot; with the strong difference that the latter" number="428" precision="empty"/><line any_info="No Anys on this line!" content="        does not give a proper answer if there is no connected channels at all." number="429" precision="empty"/><line any_info="No Anys on this line!" content="" number="430" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if there is any channel unhealthy, False if not or no connected channels" number="431" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="432" precision="empty"/><line any_info="No Anys on this line!" content="" number="433" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)&#10;Omitted Generics (x3)" content="        for status_monitor in list(self._status_map.values()):" number="434" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if not status_monitor.is_channel_healthy():" number="435" precision="any"/><line any_info="No Anys on this line!" content="                return True" number="436" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="437" precision="precise"/><line any_info="No Anys on this line!" content="" number="438" precision="empty"/><line any_info="No Anys on this line!" content="    def is_any_connected_channels_healthy(self) -&gt; bool:" number="439" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="440" precision="empty"/><line any_info="No Anys on this line!" content="        This method realises the question &quot;Is there any channel healthy?&quot;. This can be seen as opposite" number="441" precision="empty"/><line any_info="No Anys on this line!" content="        of &quot;Is all channels unhealthy?&quot; with the strong difference that the latter does not give a proper" number="442" precision="empty"/><line any_info="No Anys on this line!" content="        answer if there is no connected channels at all." number="443" precision="empty"/><line any_info="No Anys on this line!" content="" number="444" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if there is any channel healthy, False if not or no connected channel" number="445" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="446" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)&#10;Omitted Generics (x3)" content="        for status_monitor in list(self._status_map.values()):" number="447" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if status_monitor.is_channel_healthy():" number="448" precision="any"/><line any_info="No Anys on this line!" content="                return True" number="449" precision="precise"/><line any_info="No Anys on this line!" content="        return False" number="450" precision="precise"/><line any_info="No Anys on this line!" content="" number="451" precision="empty"/><line any_info="No Anys on this line!" content="    def start_channel(self, send_status_message: bool = True) -&gt; None:" number="452" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="453" precision="empty"/><line any_info="No Anys on this line!" content="        This method sets the corresponding flags and sends the corresponding status message to signalize that" number="454" precision="empty"/><line any_info="No Anys on this line!" content="        the channel has been started." number="455" precision="empty"/><line any_info="No Anys on this line!" content="" number="456" precision="empty"/><line any_info="No Anys on this line!" content="        :param send_status_message: if True the status message sending will be called" number="457" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="458" precision="empty"/><line any_info="No Anys on this line!" content="" number="459" precision="empty"/><line any_info="No Anys on this line!" content="        if send_status_message:" number="460" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unimported (x3)" content="            self.invoke_sync_send_status_message(ChannelStatus.Started)" number="461" precision="any"/><line any_info="No Anys on this line!" content="" number="462" precision="empty"/><line any_info="No Anys on this line!" content="        self._channel_started = True" number="463" precision="precise"/><line any_info="No Anys on this line!" content="        self._channel_stopped = False" number="464" precision="precise"/><line any_info="No Anys on this line!" content="" number="465" precision="empty"/><line any_info="No Anys on this line!" content="    def stop_channel(self, send_status_message: bool = True) -&gt; None:" number="466" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="467" precision="empty"/><line any_info="No Anys on this line!" content="        This method sets the corresponding flags and sends the corresponding status message to signalize that" number="468" precision="empty"/><line any_info="No Anys on this line!" content="        the channel has been stopped." number="469" precision="empty"/><line any_info="No Anys on this line!" content="" number="470" precision="empty"/><line any_info="No Anys on this line!" content="        :param send_status_message: if True the status message sending will be called" number="471" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="472" precision="empty"/><line any_info="No Anys on this line!" content="        self._channel_started = False" number="473" precision="precise"/><line any_info="No Anys on this line!" content="        self._channel_stopped = True" number="474" precision="precise"/><line any_info="No Anys on this line!" content="" number="475" precision="empty"/><line any_info="No Anys on this line!" content="        if send_status_message:" number="476" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unimported (x3)" content="            self.invoke_sync_send_status_message(ChannelStatus.Stopped)" number="477" precision="any"/><line any_info="No Anys on this line!" content="" number="478" precision="empty"/><line any_info="No Anys on this line!" content="    def can_close(self) -&gt; bool:" number="479" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="480" precision="empty"/><line any_info="No Anys on this line!" content="        This method can implement the logic to determine, if the channel can" number="481" precision="empty"/><line any_info="No Anys on this line!" content="        be closed or not." number="482" precision="empty"/><line any_info="No Anys on this line!" content="" number="483" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if the channel can be closed, False otherwise" number="484" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="485" precision="empty"/><line any_info="No Anys on this line!" content="        return not self.is_any_connected_channel_healthy_and_not_closed()" number="486" precision="precise"/><line any_info="No Anys on this line!" content="" number="487" precision="empty"/><line any_info="No Anys on this line!" content="    def invoke_resource_creation(self) -&gt; bool:" number="488" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="489" precision="empty"/><line any_info="No Anys on this line!" content="        An invoker method that encapsulates the actual implementation. This method" number="490" precision="empty"/><line any_info="No Anys on this line!" content="        MUST be called instead of the implemented method directly to ensure proper" number="491" precision="empty"/><line any_info="No Anys on this line!" content="        channel functionality." number="492" precision="empty"/><line any_info="No Anys on this line!" content="" number="493" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if operation done, False if still in progress" number="494" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="495" precision="empty"/><line any_info="No Anys on this line!" content="" number="496" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        self._resources_created = ensure_type(self._create_resources(), bool)" number="497" precision="any"/><line any_info="No Anys on this line!" content="        return self._resources_created" number="498" precision="precise"/><line any_info="No Anys on this line!" content="" number="499" precision="empty"/><line any_info="No Anys on this line!" content="    def invoke_resource_deletion(self) -&gt; bool:" number="500" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="501" precision="empty"/><line any_info="No Anys on this line!" content="        An invoker method that encapsulates the actual implementation. This method" number="502" precision="empty"/><line any_info="No Anys on this line!" content="        MUST be called instead of the implemented method directly to ensure proper" number="503" precision="empty"/><line any_info="No Anys on this line!" content="        channel functionality." number="504" precision="empty"/><line any_info="No Anys on this line!" content="" number="505" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if operation done, False if still in progress" number="506" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="507" precision="empty"/><line any_info="No Anys on this line!" content="" number="508" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        self._resources_deleted = ensure_type(self._delete_resources(), bool)" number="509" precision="any"/><line any_info="No Anys on this line!" content="        return self._resources_deleted" number="510" precision="precise"/><line any_info="No Anys on this line!" content="" number="511" precision="empty"/><line any_info="No Anys on this line!" content="    def invoke_open_channel(self) -&gt; bool:" number="512" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="513" precision="empty"/><line any_info="No Anys on this line!" content="        An invoker method that encapsulates the actual implementation. This method" number="514" precision="empty"/><line any_info="No Anys on this line!" content="        MUST be called instead of the implemented method directly to ensure proper" number="515" precision="empty"/><line any_info="No Anys on this line!" content="        channel functionality." number="516" precision="empty"/><line any_info="No Anys on this line!" content="" number="517" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if operation done, False if still in progress" number="518" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="519" precision="empty"/><line any_info="No Anys on this line!" content="" number="520" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        if not ensure_type(self._open_channel(), bool):" number="521" precision="any"/><line any_info="No Anys on this line!" content="            return False" number="522" precision="precise"/><line any_info="No Anys on this line!" content="" number="523" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unimported (x3)" content="        self.invoke_sync_send_status_message(ChannelStatus.Opened)" number="524" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        self.invoke_sync_status_update()" number="525" precision="any"/><line any_info="No Anys on this line!" content="" number="526" precision="empty"/><line any_info="No Anys on this line!" content="        if (not self._executor_started) and (not self.__silent_mode):" number="527" precision="precise"/><line any_info="No Anys on this line!" content="            if self._executor is None:" number="528" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)&#10;Unannotated (x2)" content="                self._executor = concurrent.futures.ThreadPoolExecutor(thread_name_prefix=self.get_unique_name())" number="529" precision="any"/><line any_info="No Anys on this line!" content="" number="530" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            self._executor.submit(self.__executor_thread_handler)" number="531" precision="imprecise"/><line any_info="No Anys on this line!" content="            self._executor_started = True" number="532" precision="precise"/><line any_info="No Anys on this line!" content="" number="533" precision="empty"/><line any_info="No Anys on this line!" content="        self._channel_opened = True" number="534" precision="precise"/><line any_info="No Anys on this line!" content="" number="535" precision="empty"/><line any_info="No Anys on this line!" content="        return True" number="536" precision="precise"/><line any_info="No Anys on this line!" content="" number="537" precision="empty"/><line any_info="No Anys on this line!" content="    def invoke_close_channel(self) -&gt; bool:" number="538" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="539" precision="empty"/><line any_info="No Anys on this line!" content="        An invoker method that encapsulates the actual implementation. This method" number="540" precision="empty"/><line any_info="No Anys on this line!" content="        MUST be called instead of the implemented method directly to ensure proper" number="541" precision="empty"/><line any_info="No Anys on this line!" content="        channel functionality." number="542" precision="empty"/><line any_info="No Anys on this line!" content="" number="543" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if operation done, False if still in progress" number="544" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="545" precision="empty"/><line any_info="No Anys on this line!" content="" number="546" precision="empty"/><line any_info="No Anys on this line!" content="        if not self._channel_opened:" number="547" precision="precise"/><line any_info="No Anys on this line!" content="            return True" number="548" precision="precise"/><line any_info="No Anys on this line!" content="" number="549" precision="empty"/><line any_info="No Anys on this line!" content="        if self._executor_started:" number="550" precision="precise"/><line any_info="No Anys on this line!" content="            self._stopping_executor = True" number="551" precision="precise"/><line any_info="No Anys on this line!" content="" number="552" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self._logger.debug(&quot;Stopping executor thread ...&quot;)" number="553" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            while not self._executor_stopped.get():" number="554" precision="any"/><line any_info="No Anys on this line!" content="                pass" number="555" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self._logger.debug(&quot;Executor thread stopped&quot;)" number="556" precision="any"/><line any_info="No Anys on this line!" content="" number="557" precision="empty"/><line any_info="No Anys on this line!" content="            if self._executor is not None:" number="558" precision="precise"/><line any_info="No Anys on this line!" content="                self._executor.shutdown()" number="559" precision="precise"/><line any_info="No Anys on this line!" content="                self._executor = None" number="560" precision="precise"/><line any_info="No Anys on this line!" content="" number="561" precision="empty"/><line any_info="No Anys on this line!" content="        if self._channel_started and not self._channel_stopped:" number="562" precision="precise"/><line any_info="No Anys on this line!" content="            try:" number="563" precision="empty"/><line any_info="No Anys on this line!" content="                self.stop_channel()" number="564" precision="precise"/><line any_info="No Anys on this line!" content="            except Exception:" number="565" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                self._logger.error(&quot;Exception at channel stopping, status message will not be sent.&quot;)" number="566" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                self._logger.error(traceback.format_exc())" number="567" precision="any"/><line any_info="No Anys on this line!" content="                self.stop_channel(False)" number="568" precision="precise"/><line any_info="No Anys on this line!" content="" number="569" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="570" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unimported (x3)" content="            self.invoke_sync_send_status_message(ChannelStatus.Closed)" number="571" precision="any"/><line any_info="No Anys on this line!" content="        except Exception:" number="572" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self._logger.error(&quot;Exception at channel closing, status message will not be sent.&quot;)" number="573" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self._logger.error(traceback.format_exc())" number="574" precision="any"/><line any_info="No Anys on this line!" content="" number="575" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="576" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            self.invoke_sync_status_update()" number="577" precision="any"/><line any_info="No Anys on this line!" content="        except Exception:" number="578" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self._logger.error(&quot;Exception at status update in closing.&quot;)" number="579" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self._logger.error(traceback.format_exc())" number="580" precision="any"/><line any_info="No Anys on this line!" content="" number="581" precision="empty"/><line any_info="No Anys on this line!" content="        # If implemented logic is unfinished then channel is still open" number="582" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        self._channel_opened = not ensure_type(self._close_channel(), bool)" number="583" precision="any"/><line any_info="No Anys on this line!" content="" number="584" precision="empty"/><line any_info="No Anys on this line!" content="        # If channel is still open then the closing procedure is unfinished" number="585" precision="empty"/><line any_info="No Anys on this line!" content="        return not self._channel_opened" number="586" precision="precise"/><line any_info="No Anys on this line!" content="" number="587" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def invoke_configure_channel(self, channel_configuration: dict) -&gt; None:" number="588" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="589" precision="empty"/><line any_info="No Anys on this line!" content="        An invoker method that encapsulates the actual implementation. This method" number="590" precision="empty"/><line any_info="No Anys on this line!" content="        MUST be called instead of the implemented method directly to ensure proper" number="591" precision="empty"/><line any_info="No Anys on this line!" content="        channel functionality." number="592" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="593" precision="empty"/><line any_info="No Anys on this line!" content="" number="594" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x11)" content="        self._configuration.update(channel_configuration)" number="595" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="596" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)" content="        self._configure_channel(channel_configuration)" number="597" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="598" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x1)&#10;Omitted Generics (x2)" content="        if ChannelBase.ParamKeyMetricsEnabled in self._configuration:" number="599" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)&#10;Unimported (x1)&#10;Unannotated (x1)" content="            self._metrics_enabled = self._configuration[ChannelBase.ParamKeyMetricsEnabled]" number="600" precision="any"/><line any_info="No Anys on this line!" content="" number="601" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x1)&#10;Omitted Generics (x2)" content="        if ChannelBase.ParamKeyLogLevel in self._configuration:" number="602" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)&#10;Unimported (x1)&#10;Unannotated (x1)" content="            self._log_level = self._configuration[ChannelBase.ParamKeyLogLevel]" number="603" precision="any"/><line any_info="No Anys on this line!" content="" number="604" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Explicit (x2)" content="        self._logger.set_log_level(logging.getLevelName(self._log_level))" number="605" precision="any"/><line any_info="No Anys on this line!" content="" number="606" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Explicit (x1)" content="    def invoke_sync_send_status_message(self, status: ChannelStatus, payload: Any = None) -&gt; None:" number="607" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="608" precision="empty"/><line any_info="No Anys on this line!" content="        An invoker method that encapsulates the actual implementation. This method" number="609" precision="empty"/><line any_info="No Anys on this line!" content="        MUST be called instead of the implemented method directly to ensure proper" number="610" precision="empty"/><line any_info="No Anys on this line!" content="        channel functionality." number="611" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="612" precision="empty"/><line any_info="No Anys on this line!" content="" number="613" precision="empty"/><line any_info="No Anys on this line!" content="        if not self.__silent_mode:" number="614" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            self._send_status_message(str(ChannelStatusMessage(self._channel_name," number="615" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                                                               self._context.get_full_name()," number="616" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                                                               self._context.get_group_name()," number="617" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                                                               self._context.get_group_index()," number="618" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Explicit (x1)" content="                                                               status, payload)))" number="619" precision="any"/><line any_info="No Anys on this line!" content="" number="620" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="621" precision="empty"/><line any_info="No Anys on this line!" content="    This invoker is just for being consistent with the Java part, since in Java this method is synchronized due" number="622" precision="empty"/><line any_info="No Anys on this line!" content="    to the fact that it can be invoked from different threads. In python however this should not be an issue." number="623" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="624" precision="empty"/><line any_info="No Anys on this line!" content="    def invoke_sync_status_update(self):" number="625" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="626" precision="empty"/><line any_info="No Anys on this line!" content="        An invoker method that encapsulates the actual implementation. This method" number="627" precision="empty"/><line any_info="No Anys on this line!" content="        MUST be called instead of the implemented method directly to ensure proper" number="628" precision="empty"/><line any_info="No Anys on this line!" content="        channel functionality." number="629" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="630" precision="empty"/><line any_info="No Anys on this line!" content="" number="631" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        string_status_messages = self._retrieve_status_messages()" number="632" precision="any"/><line any_info="No Anys on this line!" content="" number="633" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)&#10;Unannotated (x1)&#10;Omitted Generics (x3)" content="        status_messages: list[ChannelStatusMessage] = list()" number="634" precision="any"/><line any_info="No Anys on this line!" content="" number="635" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if string_status_messages is not None:" number="636" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            with self._channel_state_update_lock:" number="637" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                for string_status_message in string_status_messages:" number="638" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="                    status_message = ChannelStatusMessage.create_from_json(string_status_message)" number="639" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="                    status_messages.append(status_message)" number="640" precision="any"/><line any_info="No Anys on this line!" content="" number="641" precision="empty"/><line any_info="No Anys on this line!" content="                    # Needs to be made sure that we don't maintain a monitor for ourselves" number="642" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="                    if (status_message.channel_name != self._channel_name) or \" number="643" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="                            (status_message.channel_context_name != self._context.get_full_name()):" number="644" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="                        if status_message.get_channel_unique_name() not in self._status_map:" number="645" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="                            self._status_map[status_message.get_channel_unique_name()] = \" number="646" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="                                ChannelStatusMonitor(status_message.channel_name," number="647" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                                                     status_message.channel_context_name," number="648" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                                                     status_message.channel_group_name," number="649" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                                                     self._logger)" number="650" precision="any"/><line any_info="No Anys on this line!" content="" number="651" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                            self.on_new_channel_status_monitor(" number="652" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="                                self._status_map[status_message.get_channel_unique_name()])" number="653" precision="any"/><line any_info="No Anys on this line!" content="" number="654" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="                        self._status_map[status_message.get_channel_unique_name()].update(status_message)" number="655" precision="any"/><line any_info="No Anys on this line!" content="" number="656" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            for callback in self._on_status_message_received_callbacks:" number="657" precision="any"/><line any_info="No Anys on this line!" content="                try:" number="658" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="                    callback(status_messages)" number="659" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                except Exception as e:" number="660" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="                    self._logger.error(f&quot;Error at status message callback: {e}&quot;)" number="661" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="                    self._logger.error(f&quot;{traceback.format_exc()}&quot;)" number="662" precision="any"/><line any_info="No Anys on this line!" content="" number="663" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def on_status_message_received(self, callback: Callable[[list[ChannelStatusMessage]], None]) -&gt; None:" number="664" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="665" precision="empty"/><line any_info="No Anys on this line!" content="        Adds a callback to the set of callbacks, which will be executed upon status" number="666" precision="empty"/><line any_info="No Anys on this line!" content="        message received." number="667" precision="empty"/><line any_info="No Anys on this line!" content="" number="668" precision="empty"/><line any_info="No Anys on this line!" content="        :param callback: callback Callable[[list[str]], None]" number="669" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="670" precision="empty"/><line any_info="No Anys on this line!" content="" number="671" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self._on_status_message_received_callbacks.add(callback)" number="672" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="673" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def on_new_channel_status_monitor(self, status_monitor: ChannelStatusMonitor) -&gt; None:" number="674" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="675" precision="empty"/><line any_info="No Anys on this line!" content="        This method can be overridden to handle the creation of the new ChannelStatusMonitor e.g." number="676" precision="empty"/><line any_info="No Anys on this line!" content="        registering callbacks." number="677" precision="empty"/><line any_info="No Anys on this line!" content="" number="678" precision="empty"/><line any_info="No Anys on this line!" content="        :param status_monitor: ChannelStatusMonitor object newly created" number="679" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="680" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="681" precision="precise"/><line any_info="No Anys on this line!" content="" number="682" precision="empty"/><line any_info="No Anys on this line!" content="    def on_status_message_send(self):" number="683" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="684" precision="empty"/><line any_info="No Anys on this line!" content="        This method can be implemented to hook into the event of sending status message." number="685" precision="empty"/><line any_info="No Anys on this line!" content="        For example one can use it to calculate aggregated metrics between 2 sending and" number="686" precision="empty"/><line any_info="No Anys on this line!" content="        attach the metrics to the healthCheckPayload." number="687" precision="empty"/><line any_info="No Anys on this line!" content="        VERY IMPORTANT NOTE: keep the runtime as low as possible, because the higher the" number="688" precision="empty"/><line any_info="No Anys on this line!" content="        runtime the more load on the status message sender thread, which might cause" number="689" precision="empty"/><line any_info="No Anys on this line!" content="        double activation." number="690" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="691" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="692" precision="any"/><line any_info="No Anys on this line!" content="" number="693" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= Meant to be private methods =======================" number="694" precision="empty"/><line any_info="No Anys on this line!" content="" number="695" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="696" precision="empty"/><line any_info="No Anys on this line!" content="    This method implements the logic to be executed in the background thread." number="697" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="698" precision="empty"/><line any_info="No Anys on this line!" content="    def __executor_thread_handler(self):" number="699" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self._logger.debug(&quot;Starting status sender thread ...&quot;)" number="700" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        while not self._stopping_executor:" number="701" precision="any"/><line any_info="No Anys on this line!" content="" number="702" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="            control_loop_start_time = current_time_millis()" number="703" precision="any"/><line any_info="No Anys on this line!" content="" number="704" precision="empty"/><line any_info="No Anys on this line!" content="            try:" number="705" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.on_status_message_send()" number="706" precision="any"/><line any_info="No Anys on this line!" content="" number="707" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="                self.invoke_sync_send_status_message(ChannelStatus.HealthCheck, self._health_check_payload)" number="708" precision="any"/><line any_info="No Anys on this line!" content="" number="709" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                if self._metrics_enabled:" number="710" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Explicit (x4)" content="                    self._logger.debug(f&quot;Metrics: {json.dumps(self._health_check_payload)}&quot;)" number="711" precision="any"/><line any_info="No Anys on this line!" content="" number="712" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                self.invoke_sync_status_update()" number="713" precision="any"/><line any_info="No Anys on this line!" content="" number="714" precision="empty"/><line any_info="No Anys on this line!" content="                # Resetting the patience timer" number="715" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                self._control_loop_exception_timer = 0" number="716" precision="any"/><line any_info="No Anys on this line!" content="            except Exception:" number="717" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                if 0 == self._control_loop_exception_timer:" number="718" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="                    self._control_loop_exception_timer = current_time_millis()" number="719" precision="any"/><line any_info="No Anys on this line!" content="" number="720" precision="empty"/><line any_info="No Anys on this line!" content="                # Note that we ignore all exceptions here, since we cannot risk to close this loop" number="721" precision="empty"/><line any_info="No Anys on this line!" content="                # upon a recoverable exception. Hence, we are only plotting the error." number="722" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x11)" content="                self._logger.error(f&quot;Unhandled exception in control loop. Timeout in &quot;" number="723" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="                                   f&quot;{current_time_millis() - self._control_loop_exception_timer}/&quot;" number="724" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x1)" content="                                   f&quot;{ChannelBase.ControlLoopExceptionTimeoutInMs}&quot;)" number="725" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="                self._logger.error(traceback.format_exc())" number="726" precision="any"/><line any_info="No Anys on this line!" content="" number="727" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="                if ChannelBase.ControlLoopExceptionTimeoutInMs &lt; \" number="728" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)&#10;Unimported (x1)" content="                        (current_time_millis() - self._control_loop_exception_timer):" number="729" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                    self._stopping_executor = True" number="730" precision="any"/><line any_info="No Anys on this line!" content="            finally:" number="731" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="                control_loop_duration = current_time_millis() - control_loop_start_time" number="732" precision="any"/><line any_info="No Anys on this line!" content="" number="733" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;&quot;&quot;" number="734" precision="empty"/><line any_info="No Anys on this line!" content="                Calculating the necessary sleep time for the loop. This is necessary in" number="735" precision="empty"/><line any_info="No Anys on this line!" content="                order not to block to long, since if the implementation takes 2 sec and" number="736" precision="empty"/><line any_info="No Anys on this line!" content="                the loop waits additional 2 secs, then it can miss important information." number="737" precision="empty"/><line any_info="No Anys on this line!" content="                So, we consider the implementation's runtime e.g. if it took 1500ms then," number="738" precision="empty"/><line any_info="No Anys on this line!" content="                the sleep will wait 2000-1500=500ms. Notice that it can never gol below 0." number="739" precision="empty"/><line any_info="No Anys on this line!" content="                &quot;&quot;&quot;" number="740" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="                if ChannelBase.DefaultStatusThreadIntervalInMs &gt; control_loop_duration:" number="741" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)&#10;Unimported (x1)" content="                    time.sleep((ChannelBase.DefaultStatusThreadIntervalInMs - control_loop_duration) / 1000.0)" number="742" precision="any"/><line any_info="No Anys on this line!" content="" number="743" precision="empty"/><line any_info="No Anys on this line!" content="        try:" number="744" precision="empty"/><line any_info="No Anys on this line!" content="            # Sending one last status message to make sure that all relevant payloads are transferred." number="745" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)&#10;Unimported (x1)" content="            self.invoke_sync_send_status_message(ChannelStatus.HealthCheck, self._health_check_payload)" number="746" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        except Exception as ignored:" number="747" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="            self._logger.debug(str(ignored))" number="748" precision="any"/><line any_info="No Anys on this line!" content="" number="749" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self._executor_stopped.set(True)" number="750" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        self._stopping_executor = False" number="751" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        self._executor_started = False" number="752" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self._logger.debug(&quot;Status sender thread stopped.&quot;)" number="753" precision="any"/></mypy-report-file>