<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\core\specs\plugin.py" module="core.src.pypz.core.specs.plugin"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import logging" number="16" precision="precise"/><line any_info="No Anys on this line!" content="from abc import ABC, abstractmethod" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Any, TYPE_CHECKING, cast, Optional" number="18" precision="precise"/><line any_info="No Anys on this line!" content="" number="19" precision="empty"/><line any_info="No Anys on this line!" content="import yaml" number="20" precision="precise"/><line any_info="No Anys on this line!" content="" number="21" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.commons.loggers import ContextLoggerInterface, DefaultContextLogger, ContextLogger" number="22" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.dtos import PluginInstanceDTO, PluginSpecDTO" number="23" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.instance import RegisteredInterface, Instance, InstanceGroup" number="24" precision="any"/><line any_info="No Anys on this line!" content="" number="25" precision="empty"/><line any_info="No Anys on this line!" content="if TYPE_CHECKING:" number="26" precision="precise"/><line any_info="No Anys on this line!" content="    from pypz.core.specs.operator import Operator" number="27" precision="any"/><line any_info="No Anys on this line!" content="" number="28" precision="empty"/><line any_info="No Anys on this line!" content="" number="29" precision="empty"/><line any_info="No Anys on this line!" content="class Plugin(Instance[None], InstanceGroup, RegisteredInterface, ABC):" number="30" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="31" precision="empty"/><line any_info="No Anys on this line!" content="    This interface has the only purpose to separate the plugin interfaces" number="32" precision="empty"/><line any_info="No Anys on this line!" content="    from other interfaces like the Operator. It is necessary to avoid the" number="33" precision="empty"/><line any_info="No Anys on this line!" content="    case, where an Operator could be nested into other Operators. All" number="34" precision="empty"/><line any_info="No Anys on this line!" content="    plugin interfaces shall extend this one." number="35" precision="empty"/><line any_info="No Anys on this line!" content="" number="36" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="37" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="38" precision="empty"/><line any_info="No Anys on this line!" content="" number="39" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str = None, *args, **kwargs):" number="40" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, None, *args, **kwargs)" number="41" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="42" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        self.__logger: Optional[ContextLogger] = \" number="43" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="            ContextLogger(self.get_context().get_logger(), self.get_full_name()) \" number="44" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            if self.get_context() is not None else \" number="45" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="            ContextLogger(DefaultContextLogger(self.get_full_name()))" number="46" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="47" precision="empty"/><line any_info="No Anys on this line!" content="        Context logger, which is the Operator's logger if Operator context existing, otherwise" number="48" precision="empty"/><line any_info="No Anys on this line!" content="        it defaults back to the DefaultContextLogger. Note that Plugin without Operator" number="49" precision="empty"/><line any_info="No Anys on this line!" content="        context makes only sense in test cases, hence the default log level is set to DEBUG." number="50" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="51" precision="empty"/><line any_info="No Anys on this line!" content="" number="52" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self.__logger.set_log_level(logging.DEBUG)" number="53" precision="any"/><line any_info="No Anys on this line!" content="" number="54" precision="empty"/><line any_info="No Anys on this line!" content="    # ==================== public methods =======================" number="55" precision="empty"/><line any_info="No Anys on this line!" content="" number="56" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_context(self) -&gt; 'Operator':" number="57" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return cast('Operator', super().get_context())" number="58" precision="any"/><line any_info="No Anys on this line!" content="" number="59" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_logger(self) -&gt; ContextLogger:" number="60" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return self.__logger" number="61" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="62" precision="empty"/><line any_info="No Anys on this line!" content="    def get_group_size(self) -&gt; int:" number="63" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="        return 1 if self.get_context() is None else self.get_context().get_group_size()" number="64" precision="any"/><line any_info="No Anys on this line!" content="" number="65" precision="empty"/><line any_info="No Anys on this line!" content="    def get_group_index(self) -&gt; int:" number="66" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="        return 0 if self.get_context() is None else self.get_context().get_group_index()" number="67" precision="any"/><line any_info="No Anys on this line!" content="" number="68" precision="empty"/><line any_info="No Anys on this line!" content="    def get_group_name(self) -&gt; Optional[str]:" number="69" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="        return None if self.get_group_principal() is None else self.get_group_principal().get_full_name()" number="70" precision="any"/><line any_info="No Anys on this line!" content="" number="71" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_group_principal(self) -&gt; Optional[Instance]:" number="72" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="        if (self.get_context() is None) or (self.get_context().get_group_principal() is None):" number="73" precision="any"/><line any_info="No Anys on this line!" content="            return None" number="74" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        return self.get_context().get_group_principal().get_protected().get_nested_instance(self.get_simple_name())" number="75" precision="any"/><line any_info="No Anys on this line!" content="" number="76" precision="empty"/><line any_info="No Anys on this line!" content="    def is_principal(self) -&gt; bool:" number="77" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="        return True if self.get_context() is None else self.get_context().is_principal()" number="78" precision="any"/><line any_info="No Anys on this line!" content="" number="79" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_dto(self) -&gt; PluginInstanceDTO:" number="80" precision="any"/><line any_info="No Anys on this line!" content="        instance_dto = super().get_dto()" number="81" precision="precise"/><line any_info="No Anys on this line!" content="" number="82" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        return PluginInstanceDTO(name=instance_dto.name," number="83" precision="any"/><line any_info="No Anys on this line!" content="                                 parameters=instance_dto.parameters," number="84" precision="precise"/><line any_info="No Anys on this line!" content="                                 dependsOn=instance_dto.dependsOn," number="85" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                 spec=PluginSpecDTO(**instance_dto.spec.__dict__))" number="86" precision="any"/><line any_info="No Anys on this line!" content="" number="87" precision="empty"/><line any_info="No Anys on this line!" content="    @staticmethod" number="88" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="    def create_from_string(source, *args, **kwargs) -&gt; 'Plugin':" number="89" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Unannotated (x7)&#10;Explicit (x2)" content="        return Plugin.create_from_dto(PluginInstanceDTO(**yaml.safe_load(source)), *args, **kwargs)" number="90" precision="any"/><line any_info="No Anys on this line!" content="" number="91" precision="empty"/><line any_info="No Anys on this line!" content="    @staticmethod" number="92" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x2)" content="    def create_from_dto(instance_dto: 'PluginInstanceDTO', *args, **kwargs) -&gt; 'Plugin':" number="93" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)&#10;Unannotated (x2)" content="        return cast(Plugin, Instance.create_from_dto(instance_dto, *args, **kwargs))" number="94" precision="any"/><line any_info="No Anys on this line!" content="" number="95" precision="empty"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="No Anys on this line!" content="class ResourceHandlerPlugin(Plugin, RegisteredInterface, ABC):" number="97" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="98" precision="empty"/><line any_info="No Anys on this line!" content="    This plugin interface allows to implement resource management related" number="99" precision="empty"/><line any_info="No Anys on this line!" content="    functionalities. The respective methods will be called at specific" number="100" precision="empty"/><line any_info="No Anys on this line!" content="    times during the execution. Check :ref:`executor` for more information." number="101" precision="empty"/><line any_info="No Anys on this line!" content="" number="102" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="103" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="104" precision="empty"/><line any_info="No Anys on this line!" content="" number="105" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str = None, *args, **kwargs):" number="106" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, None, *args, **kwargs)" number="107" precision="any"/><line any_info="No Anys on this line!" content="" number="108" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="109" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_resource_creation(self) -&gt; bool:" number="110" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="111" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to create an arbitrary resource" number="112" precision="empty"/><line any_info="No Anys on this line!" content="        of any type." number="113" precision="empty"/><line any_info="No Anys on this line!" content="" number="114" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True succeeded, False if more iteration required (to not block the execution)" number="115" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="116" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="117" precision="precise"/><line any_info="No Anys on this line!" content="" number="118" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="119" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_resource_deletion(self) -&gt; bool:" number="120" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="121" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to destroy the created resource." number="122" precision="empty"/><line any_info="No Anys on this line!" content="" number="123" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True succeeded, False if more iteration required (to not block the execution)" number="124" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="125" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="126" precision="precise"/><line any_info="No Anys on this line!" content="" number="127" precision="empty"/><line any_info="No Anys on this line!" content="" number="128" precision="empty"/><line any_info="No Anys on this line!" content="# ====================================== Port Plugins ======================================" number="129" precision="empty"/><line any_info="No Anys on this line!" content="" number="130" precision="empty"/><line any_info="No Anys on this line!" content="" number="131" precision="empty"/><line any_info="No Anys on this line!" content="class PortPlugin(Plugin, RegisteredInterface, ABC):" number="132" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="133" precision="empty"/><line any_info="No Anys on this line!" content="    This plugin interface allows to implement common methods for" number="134" precision="empty"/><line any_info="No Anys on this line!" content="    port both input and output port plugins." number="135" precision="empty"/><line any_info="No Anys on this line!" content="" number="136" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="137" precision="empty"/><line any_info="No Anys on this line!" content="    :param schema: the schema of the port plugin, which will be used to send/retrieve data" number="138" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="139" precision="empty"/><line any_info="No Anys on this line!" content="" number="140" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="    def __init__(self, name: Optional[str] = None," number="141" precision="any"/><line any_info="No Anys on this line!" content="                 schema: Any = None," number="142" precision="precise"/><line any_info="No Anys on this line!" content="                 *args, **kwargs):" number="143" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, *args, **kwargs)" number="144" precision="any"/><line any_info="No Anys on this line!" content="" number="145" precision="empty"/><line any_info="No Anys on this line!" content="        self.__connected_ports: set[PortPlugin] = self.get_protected().get_reference().__connected_ports \" number="146" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="            if self.get_protected().get_reference() is not None else set()" number="147" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="148" precision="empty"/><line any_info="No Anys on this line!" content="        This member holds the information about the connected ports, where" number="149" precision="empty"/><line any_info="No Anys on this line!" content="        the key is the replication group names and the value is a list of" number="150" precision="empty"/><line any_info="No Anys on this line!" content="        connected ports." number="151" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="152" precision="empty"/><line any_info="No Anys on this line!" content="" number="153" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        self.__schema: Any = schema" number="154" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="155" precision="empty"/><line any_info="No Anys on this line!" content="        The port's schema, which is used to identify the format of the data" number="156" precision="empty"/><line any_info="No Anys on this line!" content="        sent through the port." number="157" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="158" precision="empty"/><line any_info="No Anys on this line!" content="" number="159" precision="empty"/><line any_info="No Anys on this line!" content="    # ==================== public methods ====================" number="160" precision="empty"/><line any_info="No Anys on this line!" content="" number="161" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def set_schema(self, schema: Any) -&gt; None:" number="162" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        self.__schema = schema" number="163" precision="any"/><line any_info="No Anys on this line!" content="" number="164" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def get_schema(self) -&gt; Any:" number="165" precision="any"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="        return self.__schema" number="166" precision="any"/><line any_info="No Anys on this line!" content="" number="167" precision="empty"/><line any_info="No Anys on this line!" content="    def get_connected_ports(self) -&gt; set['PortPlugin']:" number="168" precision="precise"/><line any_info="No Anys on this line!" content="        return self.__connected_ports" number="169" precision="precise"/><line any_info="No Anys on this line!" content="" number="170" precision="empty"/><line any_info="No Anys on this line!" content="    def connect(self, other_port: 'PortPlugin') -&gt; None:" number="171" precision="precise"/><line any_info="No Anys on this line!" content="        # Sanity checks" number="172" precision="empty"/><line any_info="No Anys on this line!" content="        # =============" number="173" precision="empty"/><line any_info="No Anys on this line!" content="" number="174" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="        if isinstance(other_port, type(self)):" number="175" precision="precise"/><line any_info="No Anys on this line!" content="            raise TypeError(&quot;Invalid connection attempt: ports of same type cannot be connected&quot;)" number="176" precision="precise"/><line any_info="No Anys on this line!" content="" number="177" precision="empty"/><line any_info="No Anys on this line!" content="        # Plugins shall have an operator context" number="178" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        if (self.get_context() is None) or (other_port.get_context() is None):" number="179" precision="any"/><line any_info="No Anys on this line!" content="            raise AttributeError(&quot;Invalid port connection attempt: no operator context available&quot;)" number="180" precision="precise"/><line any_info="No Anys on this line!" content="" number="181" precision="empty"/><line any_info="No Anys on this line!" content="        # Plugins in the same operator shall not be connected" number="182" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        if self.get_context() is other_port.get_context():" number="183" precision="any"/><line any_info="No Anys on this line!" content="            raise AttributeError(&quot;Invalid port connection attempt. Ports shall have different operator context.&quot;)" number="184" precision="precise"/><line any_info="No Anys on this line!" content="" number="185" precision="empty"/><line any_info="No Anys on this line!" content="        # Operators shall have a pipeline context" number="186" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        if (self.get_context().get_context() is None) or (other_port.get_context().get_context() is None):" number="187" precision="any"/><line any_info="No Anys on this line!" content="            raise AttributeError(&quot;Invalid port connection attempt. No pipeline context available.&quot;)" number="188" precision="precise"/><line any_info="No Anys on this line!" content="" number="189" precision="empty"/><line any_info="No Anys on this line!" content="        # Operators shall be in the same pipeline context" number="190" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        if self.get_context().get_context() is not other_port.get_context().get_context():" number="191" precision="any"/><line any_info="No Anys on this line!" content="            raise AttributeError(&quot;Invalid port connection attempt. Operators shall be in the same pipeline context.&quot;)" number="192" precision="precise"/><line any_info="No Anys on this line!" content="" number="193" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x7)" content="        if (self.__schema is not None) and (other_port.__schema is not None) and (self.__schema != other_port.__schema):" number="194" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)&#10;Explicit (x2)" content="            self.get_logger().warn(f&quot;Mismatching schemas. Expected: {self.__schema}; Provided: {other_port.__schema}&quot;)" number="195" precision="any"/><line any_info="No Anys on this line!" content="" number="196" precision="empty"/><line any_info="No Anys on this line!" content="        self.__connected_ports.add(other_port)" number="197" precision="precise"/><line any_info="No Anys on this line!" content="        other_port.__connected_ports.add(self)" number="198" precision="precise"/><line any_info="No Anys on this line!" content="" number="199" precision="empty"/><line any_info="No Anys on this line!" content="    # ==================== overridable methods ====================" number="200" precision="empty"/><line any_info="No Anys on this line!" content="" number="201" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="202" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_port_open(self) -&gt; bool:" number="203" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="204" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to initialize the i/o port functionalities." number="205" precision="empty"/><line any_info="No Anys on this line!" content="" number="206" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True succeeded, False if more iteration required (to not block the execution)" number="207" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="208" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="209" precision="precise"/><line any_info="No Anys on this line!" content="" number="210" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="211" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_port_close(self) -&gt; bool:" number="212" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="213" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to shut down the i/o port functionalities." number="214" precision="empty"/><line any_info="No Anys on this line!" content="" number="215" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True succeeded, False if more iteration required (to not block the execution)" number="216" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="217" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="218" precision="precise"/><line any_info="No Anys on this line!" content="" number="219" precision="empty"/><line any_info="No Anys on this line!" content="" number="220" precision="empty"/><line any_info="No Anys on this line!" content="class OutputPortPlugin(PortPlugin, RegisteredInterface, ABC):" number="221" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="222" precision="empty"/><line any_info="No Anys on this line!" content="    This plugin interface allows to implement data transfer output port for an operator." number="223" precision="empty"/><line any_info="No Anys on this line!" content="    Operators can communicate via ports. Different technologies can be implemented" number="224" precision="empty"/><line any_info="No Anys on this line!" content="    allowing operators to talk through them." number="225" precision="empty"/><line any_info="No Anys on this line!" content="" number="226" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="227" precision="empty"/><line any_info="No Anys on this line!" content="    :param schema: the schema of the port plugin, which will be used to send/retrieve data" number="228" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="229" precision="empty"/><line any_info="No Anys on this line!" content="" number="230" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="    def __init__(self," number="231" precision="any"/><line any_info="No Anys on this line!" content="                 name: Optional[str] = None," number="232" precision="precise"/><line any_info="No Anys on this line!" content="                 schema: Optional[Any] = None," number="233" precision="precise"/><line any_info="No Anys on this line!" content="                 *args, **kwargs):" number="234" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="        super().__init__(name, schema, *args, **kwargs)" number="235" precision="any"/><line any_info="No Anys on this line!" content="" number="236" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="237" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="    def send(self, data: Any) -&gt; Any:" number="238" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="239" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to send data provided as argument." number="240" precision="empty"/><line any_info="No Anys on this line!" content="        The implementation shall specify the type of the data and the return value." number="241" precision="empty"/><line any_info="No Anys on this line!" content="" number="242" precision="empty"/><line any_info="No Anys on this line!" content="        :param data: data to be sent" number="243" precision="empty"/><line any_info="No Anys on this line!" content="        :return: tbd by the implementation" number="244" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="245" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="246" precision="precise"/><line any_info="No Anys on this line!" content="" number="247" precision="empty"/><line any_info="No Anys on this line!" content="" number="248" precision="empty"/><line any_info="No Anys on this line!" content="class InputPortPlugin(PortPlugin, RegisteredInterface, ABC):" number="249" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="250" precision="empty"/><line any_info="No Anys on this line!" content="    This plugin interface allows to implement data transfer input port for an operator." number="251" precision="empty"/><line any_info="No Anys on this line!" content="    Operators can communicate via ports. Different technologies can be implemented" number="252" precision="empty"/><line any_info="No Anys on this line!" content="    allowing operators to talk through them." number="253" precision="empty"/><line any_info="No Anys on this line!" content="" number="254" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="255" precision="empty"/><line any_info="No Anys on this line!" content="    :param schema: the schema of the port plugin, which will be used to send/retrieve data" number="256" precision="empty"/><line any_info="No Anys on this line!" content="    :param group_mode: if set to True, the all the input ports in the group shall receive all messages" number="257" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="258" precision="empty"/><line any_info="No Anys on this line!" content="" number="259" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="    def __init__(self," number="260" precision="any"/><line any_info="No Anys on this line!" content="                 name: Optional[str] = None," number="261" precision="precise"/><line any_info="No Anys on this line!" content="                 schema: Optional[Any] = None," number="262" precision="precise"/><line any_info="No Anys on this line!" content="                 group_mode: bool = False," number="263" precision="precise"/><line any_info="No Anys on this line!" content="                 *args, **kwargs):" number="264" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="        super().__init__(name, schema, *args, **kwargs)" number="265" precision="any"/><line any_info="No Anys on this line!" content="" number="266" precision="empty"/><line any_info="No Anys on this line!" content="        self._group_mode: bool = group_mode" number="267" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="268" precision="empty"/><line any_info="No Anys on this line!" content="        If True, the InputPortPlugin shall receive all records sent to the group" number="269" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="270" precision="empty"/><line any_info="No Anys on this line!" content="" number="271" precision="empty"/><line any_info="No Anys on this line!" content="    def is_in_group_mode(self):" number="272" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._group_mode" number="273" precision="any"/><line any_info="No Anys on this line!" content="" number="274" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="275" precision="empty"/><line any_info="No Anys on this line!" content="    def can_retrieve(self) -&gt; bool:" number="276" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="277" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to signalize, whether the InputPort is" number="278" precision="empty"/><line any_info="No Anys on this line!" content="        still able to retrieve. Unable can mean for example that the OutputPort" number="279" precision="empty"/><line any_info="No Anys on this line!" content="        finished writing. This can be then used to terminate reading." number="280" precision="empty"/><line any_info="No Anys on this line!" content="" number="281" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if port can retrieve, False if not" number="282" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="283" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="284" precision="precise"/><line any_info="No Anys on this line!" content="" number="285" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="286" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def retrieve(self) -&gt; Any:" number="287" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="288" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to retrieve data through the port." number="289" precision="empty"/><line any_info="No Anys on this line!" content="" number="290" precision="empty"/><line any_info="No Anys on this line!" content="        :return: tbd by the implementation" number="291" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="292" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="293" precision="precise"/><line any_info="No Anys on this line!" content="" number="294" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="295" precision="empty"/><line any_info="No Anys on this line!" content="    def commit_current_read_offset(self) -&gt; None:" number="296" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="297" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic of committing the current" number="298" precision="empty"/><line any_info="No Anys on this line!" content="        read offset based on the technology used." number="299" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="300" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="301" precision="precise"/><line any_info="No Anys on this line!" content="" number="302" precision="empty"/><line any_info="No Anys on this line!" content="# ====================================== Service Plugins ======================================" number="303" precision="empty"/><line any_info="No Anys on this line!" content="" number="304" precision="empty"/><line any_info="No Anys on this line!" content="" number="305" precision="empty"/><line any_info="No Anys on this line!" content="class ServicePlugin(Plugin, RegisteredInterface, ABC):" number="306" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="307" precision="empty"/><line any_info="No Anys on this line!" content="    This plugin interface allows to implement a service. Services are special entities" number="308" precision="empty"/><line any_info="No Anys on this line!" content="    in the execution, since those are decoupled from the execution life-cycle, hence" number="309" precision="empty"/><line any_info="No Anys on this line!" content="    can run in the background. Examples:" number="310" precision="empty"/><line any_info="No Anys on this line!" content="    - mounting service, which mounts and unmounts a remote location" number="311" precision="empty"/><line any_info="No Anys on this line!" content="    - listener service, which starts a background thread to listen for something" number="312" precision="empty"/><line any_info="No Anys on this line!" content="    - etc." number="313" precision="empty"/><line any_info="No Anys on this line!" content="" number="314" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="315" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="316" precision="empty"/><line any_info="No Anys on this line!" content="" number="317" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str = None, *args, **kwargs):" number="318" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, None, *args, **kwargs)" number="319" precision="any"/><line any_info="No Anys on this line!" content="" number="320" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="321" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_service_start(self) -&gt; bool:" number="322" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="323" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the starting logic of the service. You can consider" number="324" precision="empty"/><line any_info="No Anys on this line!" content="        services as example like mounting service, which only mounts a folder to the" number="325" precision="empty"/><line any_info="No Anys on this line!" content="        system or a background service, which starts a background thread." number="326" precision="empty"/><line any_info="No Anys on this line!" content="" number="327" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if logic finished, False if it needs more iteration" number="328" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="329" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="330" precision="precise"/><line any_info="No Anys on this line!" content="" number="331" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="332" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_service_shutdown(self) -&gt; bool:" number="333" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="334" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic of stopping the service and clean up the" number="335" precision="empty"/><line any_info="No Anys on this line!" content="        residuals. E.g., a mounting service could unmount or a background thread could" number="336" precision="empty"/><line any_info="No Anys on this line!" content="        be stopped." number="337" precision="empty"/><line any_info="No Anys on this line!" content="        VERY IMPORTANT NOTE - you must always check, if your service start method has" number="338" precision="empty"/><line any_info="No Anys on this line!" content="        been called, because it can be that it is never called, if there was an exception" number="339" precision="empty"/><line any_info="No Anys on this line!" content="        raised from other entity. However, the shutdown will be called anyway." number="340" precision="empty"/><line any_info="No Anys on this line!" content="" number="341" precision="empty"/><line any_info="No Anys on this line!" content="        :return: True if logic finished, False if it needs more iteration" number="342" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="343" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="344" precision="precise"/><line any_info="No Anys on this line!" content="" number="345" precision="empty"/><line any_info="No Anys on this line!" content="" number="346" precision="empty"/><line any_info="No Anys on this line!" content="# ====================================== Addons ======================================" number="347" precision="empty"/><line any_info="No Anys on this line!" content="" number="348" precision="empty"/><line any_info="No Anys on this line!" content="" number="349" precision="empty"/><line any_info="No Anys on this line!" content="class ExtendedPlugin(Plugin, RegisteredInterface, ABC):" number="350" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="351" precision="empty"/><line any_info="No Anys on this line!" content="    This interface extends the normal plugin's lifecycle. The methods" number="352" precision="empty"/><line any_info="No Anys on this line!" content="    defined span outside the execution context, hence it can be used," number="353" precision="empty"/><line any_info="No Anys on this line!" content="    if you need to perform some action before and after execution." number="354" precision="empty"/><line any_info="No Anys on this line!" content="" number="355" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="356" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="357" precision="empty"/><line any_info="No Anys on this line!" content="" number="358" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str = None, *args, **kwargs):" number="359" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, None, *args, **kwargs)" number="360" precision="any"/><line any_info="No Anys on this line!" content="" number="361" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="362" precision="empty"/><line any_info="No Anys on this line!" content="    def _pre_execution(self) -&gt; None:" number="363" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="364" precision="empty"/><line any_info="No Anys on this line!" content="        This method will be called before the executor state machine starts. It" number="365" precision="empty"/><line any_info="No Anys on this line!" content="        can be used to perform initialization that is required before the execution." number="366" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="367" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="368" precision="precise"/><line any_info="No Anys on this line!" content="" number="369" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="370" precision="empty"/><line any_info="No Anys on this line!" content="    def _post_execution(self) -&gt; None:" number="371" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="372" precision="empty"/><line any_info="No Anys on this line!" content="        This method is called after the executor and its state machine exited, but" number="373" precision="empty"/><line any_info="No Anys on this line!" content="        before the program exits. It can be used to perform finalization/shutdown" number="374" precision="empty"/><line any_info="No Anys on this line!" content="        logic that is outside the execution context." number="375" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="376" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="377" precision="precise"/><line any_info="No Anys on this line!" content="" number="378" precision="empty"/><line any_info="No Anys on this line!" content="" number="379" precision="empty"/><line any_info="No Anys on this line!" content="class LoggerPlugin(Plugin, ContextLoggerInterface, RegisteredInterface, ABC):" number="380" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="381" precision="empty"/><line any_info="No Anys on this line!" content="    This addon interface allows to implement different logging technologies" number="382" precision="empty"/><line any_info="No Anys on this line!" content="    to be used during the execution. Notice that the logger methods are" number="383" precision="empty"/><line any_info="No Anys on this line!" content="    coming from the ContextLogger class." number="384" precision="empty"/><line any_info="No Anys on this line!" content="" number="385" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="386" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="387" precision="empty"/><line any_info="No Anys on this line!" content="" number="388" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self, name: str = None, *args, **kwargs):" number="389" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        super().__init__(name, None, *args, **kwargs)" number="390" precision="any"/></mypy-report-file>