<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\core\specs\operator.py" module="core.src.pypz.core.specs.operator"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import inspect" number="16" precision="precise"/><line any_info="No Anys on this line!" content="from abc import abstractmethod, ABC" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from typing import TYPE_CHECKING, cast, Any, Optional" number="18" precision="precise"/><line any_info="No Anys on this line!" content="" number="19" precision="empty"/><line any_info="No Anys on this line!" content="import yaml" number="20" precision="precise"/><line any_info="No Anys on this line!" content="" number="21" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.commons.loggers import ContextLoggerInterface, ContextLogger" number="22" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.commons.parameters import OptionalParameter" number="23" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.instance import RegisteredInterface, Instance, InstanceGroup" number="24" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.dtos import OperatorInstanceDTO, OperatorSpecDTO, OperatorConnection, OperatorConnectionSource" number="25" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.plugin import Plugin, InputPortPlugin, LoggerPlugin, OutputPortPlugin" number="26" precision="any"/><line any_info="No Anys on this line!" content="" number="27" precision="empty"/><line any_info="No Anys on this line!" content="if TYPE_CHECKING:" number="28" precision="precise"/><line any_info="No Anys on this line!" content="    from pypz.core.specs.pipeline import Pipeline" number="29" precision="any"/><line any_info="No Anys on this line!" content="" number="30" precision="empty"/><line any_info="No Anys on this line!" content="" number="31" precision="empty"/><line any_info="No Anys on this line!" content="class Operator(Instance[Plugin], InstanceGroup, RegisteredInterface, ABC):" number="32" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="33" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the operator instance specs. This class shall be used" number="34" precision="empty"/><line any_info="No Anys on this line!" content="    to integrate your processing logic with *pypz*. An operator spec can contain" number="35" precision="empty"/><line any_info="No Anys on this line!" content="    plugins as nested instance." number="36" precision="empty"/><line any_info="No Anys on this line!" content="" number="37" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="38" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="39" precision="empty"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="No Anys on this line!" content="    # ========================= inner logger class =========================" number="41" precision="empty"/><line any_info="No Anys on this line!" content="" number="42" precision="empty"/><line any_info="No Anys on this line!" content="    class Logger(ContextLoggerInterface):" number="43" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="44" precision="empty"/><line any_info="No Anys on this line!" content="        This is a wrapper class for the logging functionality. It wraps all the" number="45" precision="empty"/><line any_info="No Anys on this line!" content="        implementation of the :class:`LoggerPlugin &lt;pypz.core.specs.plugin.LoggerPlugin&gt;`" number="46" precision="empty"/><line any_info="No Anys on this line!" content="        and by invoking either method it will invoke the corresponding method of each" number="47" precision="empty"/><line any_info="No Anys on this line!" content="        :class:`LoggerPlugin &lt;pypz.core.specs.plugin.LoggerPlugin&gt;`." number="48" precision="empty"/><line any_info="No Anys on this line!" content="" number="49" precision="empty"/><line any_info="No Anys on this line!" content="        .. note::" number="50" precision="empty"/><line any_info="No Anys on this line!" content="           The logger instance is provided to all plugins, so the plugins can call the" number="51" precision="empty"/><line any_info="No Anys on this line!" content="           methods of this logger. However, if a :class:`LoggerPlugin &lt;pypz.core.specs.plugin.LoggerPlugin&gt;`" number="52" precision="empty"/><line any_info="No Anys on this line!" content="           would invoke the logger methods, it would cause an infinite recursion. This" number="53" precision="empty"/><line any_info="No Anys on this line!" content="           is prevented so that in every logger call, the call trace will be analyzed and" number="54" precision="empty"/><line any_info="No Anys on this line!" content="           if any instance of a :class:`LoggerPlugin &lt;pypz.core.specs.plugin.LoggerPlugin&gt;`" number="55" precision="empty"/><line any_info="No Anys on this line!" content="           is found, then a ``RecursionError`` will be thrown." number="56" precision="empty"/><line any_info="No Anys on this line!" content="" number="57" precision="empty"/><line any_info="No Anys on this line!" content="        :param logger_plugins: logger plugin instances collected in the operator instance" number="58" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="59" precision="empty"/><line any_info="No Anys on this line!" content="" number="60" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        def __init__(self, logger_plugins: set[LoggerPlugin]):" number="61" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self.__logger_plugins: set[LoggerPlugin] = logger_plugins" number="62" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="63" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        def _error(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="64" precision="any"/><line any_info="No Anys on this line!" content="            # TODO - maybe we should not care for recursion so we can avoid the execution cost?" number="65" precision="empty"/><line any_info="No Anys on this line!" content="            frame = inspect.currentframe()" number="66" precision="precise"/><line any_info="Any Types on this line: &#10;Error (x3)" content="            while (frame := frame.f_back) is not None:" number="67" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x3)&#10;Error (x4)&#10;Unimported (x1)" content="                if (&quot;self&quot; in frame.f_locals) and (isinstance(frame.f_locals[&quot;self&quot;], LoggerPlugin)):" number="68" precision="any"/><line any_info="No Anys on this line!" content="                    raise RecursionError(" number="69" precision="precise"/><line any_info="No Anys on this line!" content="                        &quot;Attempted to call operator logger from LoggerAddon. This causes infinite recursion.&quot;)" number="70" precision="precise"/><line any_info="No Anys on this line!" content="" number="71" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            for logger_plugin in self.__logger_plugins:" number="72" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Explicit (x2)" content="                logger_plugin._error(event, context_stack, *args, **kw)" number="73" precision="any"/><line any_info="No Anys on this line!" content="" number="74" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        def _warn(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="75" precision="any"/><line any_info="No Anys on this line!" content="            # TODO - maybe we should not care for recursion so we can avoid the execution cost?" number="76" precision="empty"/><line any_info="No Anys on this line!" content="            frame = inspect.currentframe()" number="77" precision="precise"/><line any_info="Any Types on this line: &#10;Error (x3)" content="            while (frame := frame.f_back) is not None:" number="78" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x3)&#10;Error (x4)&#10;Unimported (x1)" content="                if (&quot;self&quot; in frame.f_locals) and (isinstance(frame.f_locals[&quot;self&quot;], LoggerPlugin)):" number="79" precision="any"/><line any_info="No Anys on this line!" content="                    raise RecursionError(" number="80" precision="precise"/><line any_info="No Anys on this line!" content="                        &quot;Attempted to call operator logger from LoggerAddon. This causes infinite recursion.&quot;)" number="81" precision="precise"/><line any_info="No Anys on this line!" content="" number="82" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            for logger_plugin in self.__logger_plugins:" number="83" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Explicit (x2)" content="                logger_plugin._warn(event, context_stack, *args, **kw)" number="84" precision="any"/><line any_info="No Anys on this line!" content="" number="85" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        def _info(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="86" precision="any"/><line any_info="No Anys on this line!" content="            # TODO - maybe we should not care for recursion so we can avoid the execution cost?" number="87" precision="empty"/><line any_info="No Anys on this line!" content="            frame = inspect.currentframe()" number="88" precision="precise"/><line any_info="Any Types on this line: &#10;Error (x3)" content="            while (frame := frame.f_back) is not None:" number="89" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x3)&#10;Error (x4)&#10;Unimported (x1)" content="                if (&quot;self&quot; in frame.f_locals) and (isinstance(frame.f_locals[&quot;self&quot;], LoggerPlugin)):" number="90" precision="any"/><line any_info="No Anys on this line!" content="                    raise RecursionError(" number="91" precision="precise"/><line any_info="No Anys on this line!" content="                        &quot;Attempted to call operator logger from LoggerAddon. This causes infinite recursion.&quot;)" number="92" precision="precise"/><line any_info="No Anys on this line!" content="" number="93" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            for logger_plugin in self.__logger_plugins:" number="94" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Explicit (x2)" content="                logger_plugin._info(event, context_stack, *args, **kw)" number="95" precision="any"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x3)" content="        def _debug(self, event: Optional[str] = None, context_stack: list[str] = None, *args: Any, **kw: Any) -&gt; Any:" number="97" precision="any"/><line any_info="No Anys on this line!" content="            # TODO - maybe we should not care for recursion so we can avoid the execution cost?" number="98" precision="empty"/><line any_info="No Anys on this line!" content="            frame = inspect.currentframe()" number="99" precision="precise"/><line any_info="Any Types on this line: &#10;Error (x3)" content="            while (frame := frame.f_back) is not None:" number="100" precision="imprecise"/><line any_info="Any Types on this line: &#10;Explicit (x3)&#10;Error (x4)&#10;Unimported (x1)" content="                if (&quot;self&quot; in frame.f_locals) and (isinstance(frame.f_locals[&quot;self&quot;], LoggerPlugin)):" number="101" precision="any"/><line any_info="No Anys on this line!" content="                    raise RecursionError(" number="102" precision="precise"/><line any_info="No Anys on this line!" content="                        &quot;Attempted to call operator logger from LoggerAddon. This causes infinite recursion.&quot;)" number="103" precision="precise"/><line any_info="No Anys on this line!" content="" number="104" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            for logger_plugin in self.__logger_plugins:" number="105" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Explicit (x2)" content="                logger_plugin._debug(event, context_stack, *args, **kw)" number="106" precision="any"/><line any_info="No Anys on this line!" content="" number="107" precision="empty"/><line any_info="No Anys on this line!" content="    # ========================= parameters =========================" number="108" precision="empty"/><line any_info="No Anys on this line!" content="" number="109" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _operator_image_name = OptionalParameter(str, alt_name=&quot;operatorImageName&quot;," number="110" precision="any"/><line any_info="No Anys on this line!" content="                                             description=&quot;The image containing the operator's resources. &quot;" number="111" precision="precise"/><line any_info="No Anys on this line!" content="                                                         &quot;It will be used mainly by the deployers.&quot;)" number="112" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _replication_factor = OptionalParameter(int, alt_name=&quot;replicationFactor&quot;," number="113" precision="any"/><line any_info="No Anys on this line!" content="                                            description=&quot;Determines, how many replicas &quot;" number="114" precision="precise"/><line any_info="No Anys on this line!" content="                                                        &quot;shall be created from the original.&quot;," number="115" precision="empty"/><line any_info="No Anys on this line!" content="                                            on_update=lambda instance, val: instance.__replicate())" number="116" precision="precise"/><line any_info="No Anys on this line!" content="" number="117" precision="empty"/><line any_info="No Anys on this line!" content="    # ========================= ctor =========================" number="118" precision="empty"/><line any_info="No Anys on this line!" content="" number="119" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="    def __init__(self," number="120" precision="any"/><line any_info="No Anys on this line!" content="                 name: str = None," number="121" precision="precise"/><line any_info="No Anys on this line!" content="                 *args, **kwargs):" number="122" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x2)" content="        super().__init__(name, Plugin, *args, **kwargs)" number="123" precision="any"/><line any_info="No Anys on this line!" content="" number="124" precision="empty"/><line any_info="No Anys on this line!" content="        self.__replication_origin: Optional[Operator] = self.get_protected().get_reference()" number="125" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="126" precision="empty"/><line any_info="No Anys on this line!" content="        Reference to the original instance, which was the base for the replication" number="127" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="128" precision="empty"/><line any_info="No Anys on this line!" content="" number="129" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        self.__replicas: list[Operator] = list()" number="130" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="131" precision="empty"/><line any_info="No Anys on this line!" content="        List of replica instances" number="132" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="133" precision="empty"/><line any_info="No Anys on this line!" content="" number="134" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._replication_factor: int = 0 if self.get_protected().get_reference() is None else \" number="135" precision="any"/><line any_info="No Anys on this line!" content="            self.get_protected().get_reference().get_replication_factor()" number="136" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="137" precision="empty"/><line any_info="No Anys on this line!" content="        PARAMETER - The replication factor specifies, how many replicas shall be created along" number="138" precision="empty"/><line any_info="No Anys on this line!" content="        the original instance." number="139" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="140" precision="empty"/><line any_info="No Anys on this line!" content="" number="141" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._operator_image_name: Optional[str] = None" number="142" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="143" precision="empty"/><line any_info="No Anys on this line!" content="        PARAMETER - Name of the docker image, where the operator can be found. This is optional for the execution," number="144" precision="empty"/><line any_info="No Anys on this line!" content="        but is required at deployment." number="145" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="146" precision="empty"/><line any_info="No Anys on this line!" content="" number="147" precision="empty"/><line any_info="No Anys on this line!" content="        self.__replication_group_index: int = 0 \" number="148" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            if &quot;replication_group_index&quot; not in kwargs else kwargs[&quot;replication_group_index&quot;]" number="149" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="150" precision="empty"/><line any_info="No Anys on this line!" content="        Specifies the group index, if the operator is replicated." number="151" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="152" precision="empty"/><line any_info="No Anys on this line!" content="" number="153" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x3)" content="        self.__logger_plugins: set[LoggerPlugin] = set()" number="154" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="155" precision="empty"/><line any_info="No Anys on this line!" content="        Collection of logger addons to store for context logging" number="156" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="157" precision="empty"/><line any_info="No Anys on this line!" content="" number="158" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        self.__logger: ContextLogger = \" number="159" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="            ContextLogger(Operator.Logger(self.__logger_plugins), self.get_full_name())" number="160" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="161" precision="empty"/><line any_info="No Anys on this line!" content="        Context logger. For more information refer to Operator.Logger class" number="162" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="163" precision="empty"/><line any_info="No Anys on this line!" content="" number="164" precision="empty"/><line any_info="No Anys on this line!" content="    # ==================== implementable methods ====================" number="165" precision="empty"/><line any_info="No Anys on this line!" content="" number="166" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="167" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_init(self) -&gt; bool:" number="168" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="169" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to initialize the operation." number="170" precision="empty"/><line any_info="No Anys on this line!" content="        It will be called after services are started and resources are created." number="171" precision="empty"/><line any_info="No Anys on this line!" content="" number="172" precision="empty"/><line any_info="No Anys on this line!" content="        :return:" number="173" precision="empty"/><line any_info="No Anys on this line!" content="" number="174" precision="empty"/><line any_info="No Anys on this line!" content="        - True, if finished" number="175" precision="empty"/><line any_info="No Anys on this line!" content="        - False, if more iteration required (to not block the execution)" number="176" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="177" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="178" precision="precise"/><line any_info="No Anys on this line!" content="" number="179" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="180" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_running(self) -&gt; Optional[bool]:" number="181" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="182" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the actual business logic." number="183" precision="empty"/><line any_info="No Anys on this line!" content="        It will be called after the _on_init has successfully finished" number="184" precision="empty"/><line any_info="No Anys on this line!" content="" number="185" precision="empty"/><line any_info="No Anys on this line!" content="        :return:" number="186" precision="empty"/><line any_info="No Anys on this line!" content="" number="187" precision="empty"/><line any_info="No Anys on this line!" content="        - True, if finished" number="188" precision="empty"/><line any_info="No Anys on this line!" content="        - False, if more iteration required (to not block the execution)" number="189" precision="empty"/><line any_info="No Anys on this line!" content="        - None, if automatically to be determined based on all inputs i.e., if no more input record, then finish" number="190" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="191" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="192" precision="precise"/><line any_info="No Anys on this line!" content="" number="193" precision="empty"/><line any_info="No Anys on this line!" content="    @abstractmethod" number="194" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_shutdown(self) -&gt; bool:" number="195" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="196" precision="empty"/><line any_info="No Anys on this line!" content="        This method shall implement the logic to shut down the operation." number="197" precision="empty"/><line any_info="No Anys on this line!" content="        It will be called, after the _on_running has successfully finished." number="198" precision="empty"/><line any_info="No Anys on this line!" content="" number="199" precision="empty"/><line any_info="No Anys on this line!" content="        :return:" number="200" precision="empty"/><line any_info="No Anys on this line!" content="" number="201" precision="empty"/><line any_info="No Anys on this line!" content="        - True, if finished" number="202" precision="empty"/><line any_info="No Anys on this line!" content="        - False, if more iteration required (to not block the execution)" number="203" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="204" precision="empty"/><line any_info="No Anys on this line!" content="        pass" number="205" precision="precise"/><line any_info="No Anys on this line!" content="" number="206" precision="empty"/><line any_info="No Anys on this line!" content="    # ==================== public methods ====================" number="207" precision="empty"/><line any_info="No Anys on this line!" content="" number="208" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_context(self) -&gt; 'Pipeline':" number="209" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return cast('Pipeline', super().get_context())" number="210" precision="any"/><line any_info="No Anys on this line!" content="" number="211" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_logger(self) -&gt; ContextLogger:" number="212" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return self.__logger" number="213" precision="any"/><line any_info="No Anys on this line!" content="" number="214" precision="empty"/><line any_info="No Anys on this line!" content="    def get_replication_factor(self):" number="215" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._replication_factor" number="216" precision="any"/><line any_info="No Anys on this line!" content="" number="217" precision="empty"/><line any_info="No Anys on this line!" content="    def get_operator_image_name(self):" number="218" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self._operator_image_name" number="219" precision="any"/><line any_info="No Anys on this line!" content="" number="220" precision="empty"/><line any_info="No Anys on this line!" content="    def get_group_size(self) -&gt; int:" number="221" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        return self._replication_factor + 1" number="222" precision="any"/><line any_info="No Anys on this line!" content="" number="223" precision="empty"/><line any_info="No Anys on this line!" content="    def get_group_index(self) -&gt; Optional[int]:" number="224" precision="precise"/><line any_info="No Anys on this line!" content="        return self.__replication_group_index" number="225" precision="precise"/><line any_info="No Anys on this line!" content="" number="226" precision="empty"/><line any_info="No Anys on this line!" content="    def get_group_name(self) -&gt; Optional[str]:" number="227" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="228" precision="empty"/><line any_info="No Anys on this line!" content="        If an Operator instance is replicated, then the replication group name" number="229" precision="empty"/><line any_info="No Anys on this line!" content="        is the actual instance name of the original instance." number="230" precision="empty"/><line any_info="No Anys on this line!" content="" number="231" precision="empty"/><line any_info="No Anys on this line!" content="        :return: the replication group name" number="232" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="233" precision="empty"/><line any_info="No Anys on this line!" content="" number="234" precision="empty"/><line any_info="No Anys on this line!" content="        return None if self.__replication_origin is None else self.__replication_origin.get_full_name()" number="235" precision="precise"/><line any_info="No Anys on this line!" content="" number="236" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_group_principal(self) -&gt; Optional[Instance]:" number="237" precision="imprecise"/><line any_info="No Anys on this line!" content="        return self.__replication_origin" number="238" precision="precise"/><line any_info="No Anys on this line!" content="" number="239" precision="empty"/><line any_info="No Anys on this line!" content="    def is_principal(self) -&gt; bool:" number="240" precision="precise"/><line any_info="No Anys on this line!" content="        return (self.__replication_origin is None) or (self.__replication_origin is self)" number="241" precision="precise"/><line any_info="No Anys on this line!" content="" number="242" precision="empty"/><line any_info="No Anys on this line!" content="    def get_replica(self, replica_id: int) -&gt; 'Operator':" number="243" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="244" precision="empty"/><line any_info="No Anys on this line!" content="        Returns the replica instance by id. The id is the actual place in the" number="245" precision="empty"/><line any_info="No Anys on this line!" content="        replica list, which is ensured during the replica creation." number="246" precision="empty"/><line any_info="No Anys on this line!" content="" number="247" precision="empty"/><line any_info="No Anys on this line!" content="        :param replica_id: replica id" number="248" precision="empty"/><line any_info="No Anys on this line!" content="        :return: replica specified by the id" number="249" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="250" precision="empty"/><line any_info="No Anys on this line!" content="        return self.__replicas[replica_id]" number="251" precision="precise"/><line any_info="No Anys on this line!" content="" number="252" precision="empty"/><line any_info="No Anys on this line!" content="    def get_replicas(self) -&gt; list['Operator']:" number="253" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="254" precision="empty"/><line any_info="No Anys on this line!" content="        :return: replica list" number="255" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="256" precision="empty"/><line any_info="No Anys on this line!" content="" number="257" precision="empty"/><line any_info="No Anys on this line!" content="        return self.__replicas" number="258" precision="precise"/><line any_info="No Anys on this line!" content="" number="259" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_dto(self) -&gt; OperatorInstanceDTO:" number="260" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        connections = list()" number="261" precision="precise"/><line any_info="No Anys on this line!" content="        for instance in self.get_protected().get_nested_instances().values():" number="262" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="            if isinstance(instance, InputPortPlugin):" number="263" precision="any"/><line any_info="No Anys on this line!" content="                for connected_port in instance.get_connected_ports():" number="264" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="                    connections.append(OperatorConnection(" number="265" precision="any"/><line any_info="No Anys on this line!" content="                        inputPortName=instance.get_simple_name()," number="266" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                        source=OperatorConnectionSource(" number="267" precision="any"/><line any_info="No Anys on this line!" content="                            instanceName=connected_port.get_context().get_simple_name()," number="268" precision="precise"/><line any_info="No Anys on this line!" content="                            outputPortName=connected_port.get_simple_name())))" number="269" precision="precise"/><line any_info="No Anys on this line!" content="" number="270" precision="empty"/><line any_info="No Anys on this line!" content="        instance_dto = super().get_dto()" number="271" precision="precise"/><line any_info="No Anys on this line!" content="" number="272" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        return OperatorInstanceDTO(name=instance_dto.name," number="273" precision="any"/><line any_info="No Anys on this line!" content="                                   parameters=instance_dto.parameters," number="274" precision="precise"/><line any_info="No Anys on this line!" content="                                   dependsOn=instance_dto.dependsOn," number="275" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                   spec=OperatorSpecDTO(**instance_dto.spec.__dict__)," number="276" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                                   connections=connections)" number="277" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="278" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Unimported (x1)" content="    def update(self, source: OperatorInstanceDTO | dict | str) -&gt; None:" number="279" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="280" precision="empty"/><line any_info="No Anys on this line!" content="        Overridden to allow connection and replica updates." number="281" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="282" precision="empty"/><line any_info="No Anys on this line!" content="" number="283" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)&#10;Unimported (x1)" content="        if isinstance(source, str):" number="284" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Explicit (x2)" content="            instance_dto = OperatorInstanceDTO(**yaml.safe_load(source))" number="285" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x20)&#10;Unimported (x1)" content="        elif isinstance(source, dict):" number="286" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            instance_dto = OperatorInstanceDTO(**source)" number="287" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        elif isinstance(source, OperatorInstanceDTO):" number="288" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            instance_dto = source" number="289" precision="any"/><line any_info="No Anys on this line!" content="        else:" number="290" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)&#10;Unimported (x1)" content="            raise TypeError(f&quot;Invalid update source type: {type(source)}&quot;)" number="291" precision="any"/><line any_info="No Anys on this line!" content="" number="292" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        super().update(instance_dto)" number="293" precision="any"/><line any_info="No Anys on this line!" content="" number="294" precision="empty"/><line any_info="No Anys on this line!" content="        # Update connections" number="295" precision="empty"/><line any_info="No Anys on this line!" content="        # ==================" number="296" precision="empty"/><line any_info="No Anys on this line!" content="" number="297" precision="empty"/><line any_info="No Anys on this line!" content="        # Replicas shall not update connections as those are shared from the original" number="298" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        if (instance_dto.connections is not None) and (self.get_context() is not None) and self.is_principal():" number="299" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            for connection in instance_dto.connections:" number="300" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                if not self.get_protected().has_nested_instance(connection.inputPortName):" number="301" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                    raise AttributeError(f&quot;[{self.get_full_name()}] Invalid update: InputPort plugin not found &quot;" number="302" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                                         f&quot;with name '{connection.inputPortName}'&quot;)" number="303" precision="any"/><line any_info="No Anys on this line!" content="" number="304" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x9)" content="                if not self.get_context().get_protected().has_nested_instance(connection.source.instanceName):" number="305" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                    raise AttributeError(f&quot;[{self.get_full_name()}] Invalid update: source instance not found &quot;" number="306" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                         f&quot;in pipeline with name '{connection.source.instanceName}'&quot;)" number="307" precision="any"/><line any_info="No Anys on this line!" content="" number="308" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x10)" content="                source_instance = self.get_context().get_protected().get_nested_instance(connection.source.instanceName)" number="309" precision="any"/><line any_info="No Anys on this line!" content="" number="310" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="                if not source_instance.get_protected().has_nested_instance(connection.source.outputPortName):" number="311" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                    raise AttributeError(f&quot;[{self.get_full_name()}] Invalid update: OutputPort plugin not found &quot;" number="312" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                         f&quot;in source instance '{connection.source.instanceName}' &quot;" number="313" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                         f&quot;with name '{connection.source.outputPortName}'&quot;)" number="314" precision="any"/><line any_info="No Anys on this line!" content="" number="315" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                input_port_plugin: InputPortPlugin = cast(" number="316" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                    InputPortPlugin, self.get_protected().get_nested_instance(connection.inputPortName))" number="317" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                output_port_plugin: OutputPortPlugin = cast(" number="318" precision="any"/><line any_info="No Anys on this line!" content="                    OutputPortPlugin," number="319" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="                    source_instance.get_protected().get_nested_instance(connection.source.outputPortName))" number="320" precision="any"/><line any_info="No Anys on this line!" content="" number="321" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="                input_port_plugin.connect(output_port_plugin)" number="322" precision="any"/><line any_info="No Anys on this line!" content="" number="323" precision="empty"/><line any_info="No Anys on this line!" content="    def __replicate(self):" number="324" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        if not self.is_principal():" number="325" precision="any"/><line any_info="No Anys on this line!" content="            return" number="326" precision="empty"/><line any_info="No Anys on this line!" content="" number="327" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        if 0 &gt; self._replication_factor:" number="328" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="            raise ValueError(f&quot;Replication factor cannot be negative: {self._replication_factor}&quot;)" number="329" precision="any"/><line any_info="No Anys on this line!" content="" number="330" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        difference = self._replication_factor - len(self.__replicas)" number="331" precision="any"/><line any_info="No Anys on this line!" content="" number="332" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        if 0 == difference:" number="333" precision="any"/><line any_info="No Anys on this line!" content="            return" number="334" precision="empty"/><line any_info="No Anys on this line!" content="" number="335" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        if 0 &lt; difference:" number="336" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            if self.__replication_origin is None:" number="337" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                self.__replication_origin = self" number="338" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                self.__replication_group_index = 0" number="339" precision="any"/><line any_info="No Anys on this line!" content="" number="340" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="            for idx in range(len(self.__replicas), self._replication_factor):" number="341" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="                replica_dto = self.get_dto()" number="342" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="                replica_dto.name = self.get_simple_name() + &quot;_&quot; + str(idx)" number="343" precision="any"/><line any_info="No Anys on this line!" content="" number="344" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x6)" content="                replica = Operator.create_from_dto(replica_dto," number="345" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                                                   context=self.get_context()," number="346" precision="any"/><line any_info="No Anys on this line!" content="                                                   reference=self," number="347" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                                                   replication_group_index=idx+1," number="348" precision="any"/><line any_info="No Anys on this line!" content="                                                   mock_nonexistent=True)" number="349" precision="any"/><line any_info="No Anys on this line!" content="" number="350" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                if self.get_context() is not None:" number="351" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x8)" content="                    self.get_context().__setattr__(replica.get_simple_name(), replica)" number="352" precision="any"/><line any_info="No Anys on this line!" content="" number="353" precision="empty"/><line any_info="No Anys on this line!" content="                # We need to store the replicas in the internal replicas list, since" number="354" precision="empty"/><line any_info="No Anys on this line!" content="                # that is the only place, where those can be found. Replicas are not" number="355" precision="empty"/><line any_info="No Anys on this line!" content="                # direct part of the nested instances" number="356" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="                self.__replicas.append(replica)" number="357" precision="any"/><line any_info="No Anys on this line!" content="        else:" number="358" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            replicas_to_remove = self.__replicas[difference:]" number="359" precision="any"/><line any_info="No Anys on this line!" content="" number="360" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="            for replica in replicas_to_remove:" number="361" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="                self.__replicas.remove(replica)" number="362" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="                if self.get_context() is not None:" number="363" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x9)" content="                    del self.get_context().get_protected().get_nested_instances()[replica.get_simple_name()]" number="364" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="                    self.get_context().__delattr__(replica.get_simple_name())" number="365" precision="any"/><line any_info="No Anys on this line!" content="" number="366" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            if 0 == len(self.__replicas):" number="367" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                self.__replication_origin = None" number="368" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="                self.__replication_group_index = 0" number="369" precision="any"/><line any_info="No Anys on this line!" content="" number="370" precision="empty"/><line any_info="No Anys on this line!" content="    # ==================== protected methods ====================" number="371" precision="empty"/><line any_info="No Anys on this line!" content="" number="372" precision="empty"/><line any_info="No Anys on this line!" content="    def __on_init_finished__(self, *args, **kwargs):" number="373" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        super().__on_init_finished__(*args, **kwargs)" number="374" precision="any"/><line any_info="No Anys on this line!" content="" number="375" precision="empty"/><line any_info="No Anys on this line!" content="        # Logger addon handling" number="376" precision="empty"/><line any_info="No Anys on this line!" content="        # =====================" number="377" precision="empty"/><line any_info="No Anys on this line!" content="" number="378" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)" content="        for nested_instance in self.get_protected().get_nested_instances().values():" number="379" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)&#10;Unimported (x1)" content="            if isinstance(nested_instance, LoggerPlugin):" number="380" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="                self.__logger_plugins.add(nested_instance)" number="381" precision="any"/><line any_info="No Anys on this line!" content="" number="382" precision="empty"/><line any_info="No Anys on this line!" content="    # ========= static methods ==========" number="383" precision="empty"/><line any_info="No Anys on this line!" content="" number="384" precision="empty"/><line any_info="No Anys on this line!" content="    @staticmethod" number="385" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x2)" content="    def create_from_dto(instance_dto: OperatorInstanceDTO, *args, **kwargs) -&gt; 'Operator':" number="386" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)&#10;Unannotated (x2)" content="        return cast(Operator, Instance.create_from_dto(instance_dto, *args, **kwargs))" number="387" precision="any"/><line any_info="No Anys on this line!" content="" number="388" precision="empty"/><line any_info="No Anys on this line!" content="    @staticmethod" number="389" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="    def create_from_string(source, *args, **kwargs) -&gt; 'Operator':" number="390" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Unannotated (x7)&#10;Explicit (x2)" content="        return Operator.create_from_dto(OperatorInstanceDTO(**yaml.safe_load(source)), *args, **kwargs)" number="391" precision="any"/></mypy-report-file>