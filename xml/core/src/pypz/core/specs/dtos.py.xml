<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\core\specs\dtos.py" module="core.src.pypz.core.specs.dtos"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="from typing import Optional, Type, TypeVar" number="16" precision="precise"/><line any_info="No Anys on this line!" content="" number="17" precision="empty"/><line any_info="No Anys on this line!" content="NestedInstanceDTOType = TypeVar(&quot;NestedInstanceDTOType&quot;, bound='InstanceDTO')" number="18" precision="empty"/><line any_info="No Anys on this line!" content="" number="19" precision="empty"/><line any_info="No Anys on this line!" content="" number="20" precision="empty"/><line any_info="No Anys on this line!" content="class SpecDTO:" number="21" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="22" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the base Data Transfer Object for an instance spec." number="23" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="24" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="25" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="26" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="27" precision="empty"/><line any_info="No Anys on this line!" content="" number="28" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="29" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="30" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="31" precision="empty"/><line any_info="No Anys on this line!" content="" number="32" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the specs" number="33" precision="empty"/><line any_info="No Anys on this line!" content="    :param location: the location of the spec to retrieve it from" number="34" precision="empty"/><line any_info="No Anys on this line!" content="    :param expectedParameters: the expected parameters by the spec" number="35" precision="empty"/><line any_info="No Anys on this line!" content="    :param types: the implemented types of the spec" number="36" precision="empty"/><line any_info="No Anys on this line!" content="    :param nestedInstanceType: the expected type of the nested instances" number="37" precision="empty"/><line any_info="No Anys on this line!" content="    :param nestedInstances: the list of the actual nested instances" number="38" precision="empty"/><line any_info="No Anys on this line!" content="    :param nested_instance_dto_type: helper to specify the nested DTO type" number="39" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="40" precision="empty"/><line any_info="No Anys on this line!" content="" number="41" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x5)" content="    def __init__(self," number="42" precision="imprecise"/><line any_info="No Anys on this line!" content="                 name: str = None," number="43" precision="precise"/><line any_info="No Anys on this line!" content="                 location: str = None," number="44" precision="precise"/><line any_info="No Anys on this line!" content="                 expectedParameters: dict = None," number="45" precision="precise"/><line any_info="No Anys on this line!" content="                 types: list = None," number="46" precision="precise"/><line any_info="No Anys on this line!" content="                 nestedInstanceType: str = None," number="47" precision="precise"/><line any_info="No Anys on this line!" content="                 nestedInstances: list[NestedInstanceDTOType] = None," number="48" precision="precise"/><line any_info="No Anys on this line!" content="                 nested_instance_dto_type: Optional[Type[NestedInstanceDTOType]] = 'default'):" number="49" precision="precise"/><line any_info="No Anys on this line!" content="        self.name: str = name" number="50" precision="precise"/><line any_info="No Anys on this line!" content="        self.location: str = location" number="51" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x6)" content="        self.expectedParameters: dict = expectedParameters" number="52" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        self.types: list = types" number="53" precision="imprecise"/><line any_info="No Anys on this line!" content="        self.nestedInstanceType: str = nestedInstanceType" number="54" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="        self.nestedInstances: Optional[set[NestedInstanceDTOType]] = None" number="55" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="56" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="        if nested_instance_dto_type == 'default':" number="57" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="            nested_instance_dto_type = InstanceDTO" number="58" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="59" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="        if (nestedInstances is not None) and (nested_instance_dto_type is not None):" number="60" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x5)" content="            self.nestedInstances: list[NestedInstanceDTOType] = list()" number="61" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x7)" content="            if isinstance(nestedInstances, (set, list)):" number="62" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                for nestedInstance in nestedInstances:" number="63" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="                    if isinstance(nestedInstance, InstanceDTO):" number="64" precision="imprecise"/><line any_info="Any Types on this line: &#10;Error (x2)&#10;Omitted Generics (x1)" content="                        self.nestedInstances.append(nestedInstance)" number="65" precision="any"/><line any_info="No Anys on this line!" content="                    elif isinstance(nestedInstance, dict):" number="66" precision="unanalyzed"/><line any_info="No Anys on this line!" content="                        self.nestedInstances.append(nested_instance_dto_type(**nestedInstance))" number="67" precision="unanalyzed"/><line any_info="No Anys on this line!" content="                    else:" number="68" precision="empty"/><line any_info="No Anys on this line!" content="                        raise TypeError(f&quot;Invalid nestedInstance type: {type(nestedInstance)}&quot;)" number="69" precision="unanalyzed"/><line any_info="No Anys on this line!" content="            else:" number="70" precision="empty"/><line any_info="No Anys on this line!" content="                raise TypeError(f&quot;Invalid nestedInstances type: {type(nestedInstances)}&quot;)" number="71" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="72" precision="empty"/><line any_info="No Anys on this line!" content="    def __eq__(self, other):" number="73" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self is other:" number="74" precision="any"/><line any_info="No Anys on this line!" content="            return True" number="75" precision="any"/><line any_info="No Anys on this line!" content="" number="76" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x9)&#10;Explicit (x2)" content="        return isinstance(other, type(self)) and \" number="77" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.name == other.name) and \" number="78" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.location == other.location) and \" number="79" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.expectedParameters == other.expectedParameters) and \" number="80" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.types == other.types) and \" number="81" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.nestedInstanceType == other.nestedInstanceType) and \" number="82" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.nestedInstances == other.nestedInstances)" number="83" precision="any"/><line any_info="No Anys on this line!" content="" number="84" precision="empty"/><line any_info="No Anys on this line!" content="    def __hash__(self):" number="85" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        return hash(self.name)" number="86" precision="any"/><line any_info="No Anys on this line!" content="" number="87" precision="empty"/><line any_info="No Anys on this line!" content="" number="88" precision="empty"/><line any_info="No Anys on this line!" content="class InstanceDTO:" number="89" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="90" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the base Data Transfer Object for an instance." number="91" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="92" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="93" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="94" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="95" precision="empty"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="97" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="98" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="99" precision="empty"/><line any_info="No Anys on this line!" content="" number="100" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance" number="101" precision="empty"/><line any_info="No Anys on this line!" content="    :param parameters: parameters of the instance" number="102" precision="empty"/><line any_info="No Anys on this line!" content="    :param dependsOn: list of instances that this instance depends on" number="103" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="104" precision="empty"/><line any_info="No Anys on this line!" content="" number="105" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def __init__(self, name: str = None, parameters: dict = None, dependsOn: list[str] = None," number="106" precision="imprecise"/><line any_info="No Anys on this line!" content="                 spec: SpecDTO = None):" number="107" precision="precise"/><line any_info="No Anys on this line!" content="        self.name: str = name" number="108" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x6)" content="        self.parameters: dict = parameters" number="109" precision="imprecise"/><line any_info="No Anys on this line!" content="        self.dependsOn: list[str] = dependsOn" number="110" precision="precise"/><line any_info="No Anys on this line!" content="" number="111" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x5)" content="        if (spec is None) or isinstance(spec, SpecDTO):" number="112" precision="precise"/><line any_info="No Anys on this line!" content="            self.spec = spec" number="113" precision="precise"/><line any_info="No Anys on this line!" content="        elif isinstance(spec, dict):" number="114" precision="unanalyzed"/><line any_info="No Anys on this line!" content="            self.spec = SpecDTO(**spec)" number="115" precision="unanalyzed"/><line any_info="No Anys on this line!" content="        else:" number="116" precision="empty"/><line any_info="No Anys on this line!" content="            raise TypeError(f&quot;Invalid instance spec type: {type(spec)}&quot;)" number="117" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="118" precision="empty"/><line any_info="No Anys on this line!" content="    def __eq__(self, other):" number="119" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self is other:" number="120" precision="any"/><line any_info="No Anys on this line!" content="            return True" number="121" precision="any"/><line any_info="No Anys on this line!" content="" number="122" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x7)&#10;Explicit (x2)" content="        return isinstance(other, type(self)) and \" number="123" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.name == other.name) and \" number="124" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.parameters == other.parameters) and \" number="125" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.dependsOn == other.dependsOn) and \" number="126" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.spec == other.spec)" number="127" precision="any"/><line any_info="No Anys on this line!" content="" number="128" precision="empty"/><line any_info="No Anys on this line!" content="    def __hash__(self):" number="129" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        return hash((self.name, self.spec.__hash__()))" number="130" precision="any"/><line any_info="No Anys on this line!" content="" number="131" precision="empty"/><line any_info="No Anys on this line!" content="" number="132" precision="empty"/><line any_info="No Anys on this line!" content="class PluginSpecDTO(SpecDTO):" number="133" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="134" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the Data Transfer Object for a plugin spec." number="135" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="136" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="137" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="138" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="139" precision="empty"/><line any_info="No Anys on this line!" content="" number="140" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="141" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="142" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="143" precision="empty"/><line any_info="No Anys on this line!" content="" number="144" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the specs" number="145" precision="empty"/><line any_info="No Anys on this line!" content="    :param location: the location of the spec to retrieve it from" number="146" precision="empty"/><line any_info="No Anys on this line!" content="    :param expectedParameters: the expected parameters by the spec" number="147" precision="empty"/><line any_info="No Anys on this line!" content="    :param types: the implemented types of the spec" number="148" precision="empty"/><line any_info="No Anys on this line!" content="    :param nestedInstanceType: the expected type of the nested instances" number="149" precision="empty"/><line any_info="No Anys on this line!" content="    :param nestedInstances: the list of the actual nested instances" number="150" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="151" precision="empty"/><line any_info="No Anys on this line!" content="" number="152" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)" content="    def __init__(self," number="153" precision="imprecise"/><line any_info="No Anys on this line!" content="                 name: str = None," number="154" precision="precise"/><line any_info="No Anys on this line!" content="                 location: str = None," number="155" precision="precise"/><line any_info="No Anys on this line!" content="                 expectedParameters: dict = None," number="156" precision="precise"/><line any_info="No Anys on this line!" content="                 types: list = None," number="157" precision="precise"/><line any_info="No Anys on this line!" content="                 nestedInstanceType: str = None," number="158" precision="precise"/><line any_info="No Anys on this line!" content="                 nestedInstances: list = None):" number="159" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        super().__init__(name, location, expectedParameters, types, nestedInstanceType, None, None)" number="160" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="161" precision="empty"/><line any_info="No Anys on this line!" content="" number="162" precision="empty"/><line any_info="No Anys on this line!" content="class PluginInstanceDTO(InstanceDTO):" number="163" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="164" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the base Data Transfer Object for a plugin instance." number="165" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="166" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="167" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="168" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="169" precision="empty"/><line any_info="No Anys on this line!" content="" number="170" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="171" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="172" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="173" precision="empty"/><line any_info="No Anys on this line!" content="" number="174" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance" number="175" precision="empty"/><line any_info="No Anys on this line!" content="    :param parameters: parameters of the instance" number="176" precision="empty"/><line any_info="No Anys on this line!" content="    :param dependsOn: list of instances that this instance depends on" number="177" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="178" precision="empty"/><line any_info="No Anys on this line!" content="" number="179" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def __init__(self," number="180" precision="imprecise"/><line any_info="No Anys on this line!" content="                 name: str = None," number="181" precision="precise"/><line any_info="No Anys on this line!" content="                 parameters: dict = None," number="182" precision="precise"/><line any_info="No Anys on this line!" content="                 dependsOn: list[str] = None," number="183" precision="precise"/><line any_info="No Anys on this line!" content="                 spec: PluginSpecDTO = None):" number="184" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="        super().__init__(name, parameters, dependsOn, None)" number="185" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="186" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x4)" content="        if (spec is None) or isinstance(spec, PluginSpecDTO):" number="187" precision="precise"/><line any_info="No Anys on this line!" content="            self.spec = spec" number="188" precision="precise"/><line any_info="No Anys on this line!" content="        elif isinstance(spec, dict):" number="189" precision="unanalyzed"/><line any_info="No Anys on this line!" content="            self.spec = PluginSpecDTO(**spec)" number="190" precision="unanalyzed"/><line any_info="No Anys on this line!" content="        else:" number="191" precision="empty"/><line any_info="No Anys on this line!" content="            raise TypeError(f&quot;Invalid instance spec type: {type(spec)}&quot;)" number="192" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="193" precision="empty"/><line any_info="No Anys on this line!" content="" number="194" precision="empty"/><line any_info="No Anys on this line!" content="class OperatorSpecDTO(SpecDTO):" number="195" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="196" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the Data Transfer Object for an operator spec." number="197" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="198" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="199" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="200" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="201" precision="empty"/><line any_info="No Anys on this line!" content="" number="202" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="203" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="204" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="205" precision="empty"/><line any_info="No Anys on this line!" content="" number="206" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the specs" number="207" precision="empty"/><line any_info="No Anys on this line!" content="    :param location: the location of the spec to retrieve it from" number="208" precision="empty"/><line any_info="No Anys on this line!" content="    :param expectedParameters: the expected parameters by the spec" number="209" precision="empty"/><line any_info="No Anys on this line!" content="    :param types: the implemented types of the spec" number="210" precision="empty"/><line any_info="No Anys on this line!" content="    :param nestedInstanceType: the expected type of the nested instances" number="211" precision="empty"/><line any_info="No Anys on this line!" content="    :param nestedInstances: the list of the actual nested instances" number="212" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="213" precision="empty"/><line any_info="No Anys on this line!" content="" number="214" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="    def __init__(self," number="215" precision="imprecise"/><line any_info="No Anys on this line!" content="                 name: str = None," number="216" precision="precise"/><line any_info="No Anys on this line!" content="                 location: str = None," number="217" precision="precise"/><line any_info="No Anys on this line!" content="                 expectedParameters: dict = None," number="218" precision="precise"/><line any_info="No Anys on this line!" content="                 types: list = None," number="219" precision="precise"/><line any_info="No Anys on this line!" content="                 nestedInstanceType: str = None," number="220" precision="precise"/><line any_info="No Anys on this line!" content="                 nestedInstances: list[PluginInstanceDTO] = None):" number="221" precision="precise"/><line any_info="No Anys on this line!" content="        super().__init__(name," number="222" precision="imprecise"/><line any_info="No Anys on this line!" content="                         location," number="223" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                         expectedParameters," number="224" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="                         types," number="225" precision="imprecise"/><line any_info="No Anys on this line!" content="                         nestedInstanceType," number="226" precision="precise"/><line any_info="No Anys on this line!" content="                         nestedInstances," number="227" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                         PluginInstanceDTO)" number="228" precision="precise"/><line any_info="No Anys on this line!" content="" number="229" precision="empty"/><line any_info="No Anys on this line!" content="" number="230" precision="empty"/><line any_info="No Anys on this line!" content="class OperatorConnectionSource:" number="231" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="232" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the base Data Transfer Object for the source of" number="233" precision="empty"/><line any_info="No Anys on this line!" content="    a connection between operator instances." number="234" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="235" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="236" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="237" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="238" precision="empty"/><line any_info="No Anys on this line!" content="" number="239" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="240" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="241" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="242" precision="empty"/><line any_info="No Anys on this line!" content="" number="243" precision="empty"/><line any_info="No Anys on this line!" content="    :param instanceName: name of the source instance" number="244" precision="empty"/><line any_info="No Anys on this line!" content="    :param outputPortName: name of the output port in the source instance" number="245" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="246" precision="empty"/><line any_info="No Anys on this line!" content="" number="247" precision="empty"/><line any_info="No Anys on this line!" content="    def __init__(self," number="248" precision="precise"/><line any_info="No Anys on this line!" content="                 instanceName: str = None," number="249" precision="precise"/><line any_info="No Anys on this line!" content="                 outputPortName: str = None):" number="250" precision="precise"/><line any_info="No Anys on this line!" content="        self.instanceName: str = instanceName" number="251" precision="precise"/><line any_info="No Anys on this line!" content="        self.outputPortName: str = outputPortName" number="252" precision="precise"/><line any_info="No Anys on this line!" content="" number="253" precision="empty"/><line any_info="No Anys on this line!" content="    def __eq__(self, other):" number="254" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self is other:" number="255" precision="any"/><line any_info="No Anys on this line!" content="            return True" number="256" precision="any"/><line any_info="No Anys on this line!" content="" number="257" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Explicit (x2)" content="        return isinstance(other, type(self)) and \" number="258" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.instanceName == other.instanceName) and \" number="259" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.outputPortName == other.outputPortName)" number="260" precision="any"/><line any_info="No Anys on this line!" content="" number="261" precision="empty"/><line any_info="No Anys on this line!" content="    def __hash__(self):" number="262" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        return hash((self.instanceName, self.outputPortName))" number="263" precision="any"/><line any_info="No Anys on this line!" content="" number="264" precision="empty"/><line any_info="No Anys on this line!" content="" number="265" precision="empty"/><line any_info="No Anys on this line!" content="class OperatorConnection:" number="266" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="267" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the base Data Transfer Object for a connection between operator instances." number="268" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="269" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="270" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="271" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="272" precision="empty"/><line any_info="No Anys on this line!" content="" number="273" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="274" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="275" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="276" precision="empty"/><line any_info="No Anys on this line!" content="" number="277" precision="empty"/><line any_info="No Anys on this line!" content="    :param inputPortName: name of the input port of the connection" number="278" precision="empty"/><line any_info="No Anys on this line!" content="    :param source: source DTO of the connection" number="279" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="280" precision="empty"/><line any_info="No Anys on this line!" content="" number="281" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def __init__(self," number="282" precision="imprecise"/><line any_info="No Anys on this line!" content="                 inputPortName: str = None," number="283" precision="precise"/><line any_info="No Anys on this line!" content="                 source: dict | OperatorConnectionSource = None):" number="284" precision="precise"/><line any_info="No Anys on this line!" content="        self.inputPortName: str = inputPortName" number="285" precision="precise"/><line any_info="No Anys on this line!" content="        self.source: OperatorConnectionSource = source \" number="286" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            if isinstance(source, OperatorConnectionSource) \" number="287" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="            else OperatorConnectionSource(**source)" number="288" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="289" precision="empty"/><line any_info="No Anys on this line!" content="    def __eq__(self, other):" number="290" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self is other:" number="291" precision="any"/><line any_info="No Anys on this line!" content="            return True" number="292" precision="any"/><line any_info="No Anys on this line!" content="" number="293" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x5)&#10;Explicit (x2)" content="        return isinstance(other, type(self)) and \" number="294" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.inputPortName == other.inputPortName) and \" number="295" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.source == other.source)" number="296" precision="any"/><line any_info="No Anys on this line!" content="" number="297" precision="empty"/><line any_info="No Anys on this line!" content="    def __hash__(self):" number="298" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="        return hash((self.inputPortName, self.source.__hash__()))" number="299" precision="any"/><line any_info="No Anys on this line!" content="" number="300" precision="empty"/><line any_info="No Anys on this line!" content="" number="301" precision="empty"/><line any_info="No Anys on this line!" content="class OperatorInstanceDTO(InstanceDTO):" number="302" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="303" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the base Data Transfer Object for an operator instance." number="304" precision="empty"/><line any_info="No Anys on this line!" content="    Operator instances have additional instance" number="305" precision="empty"/><line any_info="No Anys on this line!" content="    information that shall be modelled via the DTO e.g., since Operator" number="306" precision="empty"/><line any_info="No Anys on this line!" content="    instances can be connected through port plugins, those connections shall" number="307" precision="empty"/><line any_info="No Anys on this line!" content="    be modelled as well." number="308" precision="empty"/><line any_info="No Anys on this line!" content="" number="309" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="310" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="311" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="312" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="313" precision="empty"/><line any_info="No Anys on this line!" content="" number="314" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="315" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="316" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="317" precision="empty"/><line any_info="No Anys on this line!" content="" number="318" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance" number="319" precision="empty"/><line any_info="No Anys on this line!" content="    :param parameters: parameters of the instance" number="320" precision="empty"/><line any_info="No Anys on this line!" content="    :param dependsOn: list of instances that this instance depends on" number="321" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="322" precision="empty"/><line any_info="No Anys on this line!" content="" number="323" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def __init__(self," number="324" precision="imprecise"/><line any_info="No Anys on this line!" content="                 name: str = None," number="325" precision="precise"/><line any_info="No Anys on this line!" content="                 parameters: dict = None," number="326" precision="precise"/><line any_info="No Anys on this line!" content="                 dependsOn: list[str] = None," number="327" precision="precise"/><line any_info="No Anys on this line!" content="                 spec: OperatorSpecDTO = None," number="328" precision="precise"/><line any_info="No Anys on this line!" content="                 connections: list[OperatorConnection] = None):" number="329" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="        super().__init__(name, parameters, dependsOn, None)" number="330" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="331" precision="empty"/><line any_info="No Anys on this line!" content="        if connections is not None:" number="332" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="            self.connections: Optional[list[OperatorConnection]] = list()" number="333" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x6)" content="            if isinstance(connections, (set, list)):" number="334" precision="precise"/><line any_info="No Anys on this line!" content="                for connection in connections:" number="335" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                    if isinstance(connection, OperatorConnection):" number="336" precision="precise"/><line any_info="No Anys on this line!" content="                        self.connections.append(connection)" number="337" precision="precise"/><line any_info="No Anys on this line!" content="                    elif isinstance(connection, dict):" number="338" precision="unanalyzed"/><line any_info="No Anys on this line!" content="                        self.connections.append(OperatorConnection(**connection))" number="339" precision="unanalyzed"/><line any_info="No Anys on this line!" content="                    else:" number="340" precision="empty"/><line any_info="No Anys on this line!" content="                        raise TypeError(f&quot;Invalid nestedInstance type: {type(connection)}&quot;)" number="341" precision="unanalyzed"/><line any_info="No Anys on this line!" content="            else:" number="342" precision="empty"/><line any_info="No Anys on this line!" content="                raise TypeError(f&quot;Invalid nestedInstances type: {type(connections)}&quot;)" number="343" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="344" precision="empty"/><line any_info="No Anys on this line!" content="        else:" number="345" precision="empty"/><line any_info="No Anys on this line!" content="            self.connections: Optional[set[OperatorConnection]] = None" number="346" precision="precise"/><line any_info="No Anys on this line!" content="" number="347" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        if (spec is None) or isinstance(spec, OperatorSpecDTO):" number="348" precision="precise"/><line any_info="No Anys on this line!" content="            self.spec = spec" number="349" precision="precise"/><line any_info="No Anys on this line!" content="        elif isinstance(spec, dict):" number="350" precision="unanalyzed"/><line any_info="No Anys on this line!" content="            self.spec = OperatorSpecDTO(**spec)" number="351" precision="unanalyzed"/><line any_info="No Anys on this line!" content="        else:" number="352" precision="empty"/><line any_info="No Anys on this line!" content="            raise TypeError(f&quot;Invalid instance spec type: {type(spec)}&quot;)" number="353" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="354" precision="empty"/><line any_info="No Anys on this line!" content="    def __eq__(self, other):" number="355" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self is other:" number="356" precision="any"/><line any_info="No Anys on this line!" content="            return True" number="357" precision="any"/><line any_info="No Anys on this line!" content="" number="358" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        return super().__eq__(other) and \" number="359" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x4)" content="            (self.connections == other.connections)" number="360" precision="any"/><line any_info="No Anys on this line!" content="" number="361" precision="empty"/><line any_info="No Anys on this line!" content="    def __hash__(self):" number="362" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return super().__hash__()" number="363" precision="any"/><line any_info="No Anys on this line!" content="" number="364" precision="empty"/><line any_info="No Anys on this line!" content="" number="365" precision="empty"/><line any_info="No Anys on this line!" content="class PipelineSpecDTO(SpecDTO):" number="366" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="367" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the Data Transfer Object for a pipeline spec." number="368" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="369" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="370" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="371" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="372" precision="empty"/><line any_info="No Anys on this line!" content="" number="373" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="374" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="375" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="376" precision="empty"/><line any_info="No Anys on this line!" content="" number="377" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the specs" number="378" precision="empty"/><line any_info="No Anys on this line!" content="    :param location: the location of the spec to retrieve it from" number="379" precision="empty"/><line any_info="No Anys on this line!" content="    :param expectedParameters: the expected parameters by the spec" number="380" precision="empty"/><line any_info="No Anys on this line!" content="    :param types: the implemented types of the spec" number="381" precision="empty"/><line any_info="No Anys on this line!" content="    :param nestedInstanceType: the expected type of the nested instances" number="382" precision="empty"/><line any_info="No Anys on this line!" content="    :param nestedInstances: the list of the actual nested instances" number="383" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="384" precision="empty"/><line any_info="No Anys on this line!" content="" number="385" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="    def __init__(self," number="386" precision="imprecise"/><line any_info="No Anys on this line!" content="                 name: str = None," number="387" precision="precise"/><line any_info="No Anys on this line!" content="                 location: str = None," number="388" precision="precise"/><line any_info="No Anys on this line!" content="                 expectedParameters: dict = None," number="389" precision="precise"/><line any_info="No Anys on this line!" content="                 types: list = None," number="390" precision="precise"/><line any_info="No Anys on this line!" content="                 nestedInstanceType: str = None, nestedInstances: list[OperatorInstanceDTO] = None):" number="391" precision="precise"/><line any_info="No Anys on this line!" content="        super().__init__(name," number="392" precision="imprecise"/><line any_info="No Anys on this line!" content="                         location," number="393" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                         expectedParameters," number="394" precision="imprecise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="                         types," number="395" precision="imprecise"/><line any_info="No Anys on this line!" content="                         nestedInstanceType," number="396" precision="precise"/><line any_info="No Anys on this line!" content="                         nestedInstances," number="397" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="                         OperatorInstanceDTO)" number="398" precision="precise"/><line any_info="No Anys on this line!" content="" number="399" precision="empty"/><line any_info="No Anys on this line!" content="" number="400" precision="empty"/><line any_info="No Anys on this line!" content="class PipelineInstanceDTO(InstanceDTO):" number="401" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="402" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents the base Data Transfer Object for a pipeline instance." number="403" precision="empty"/><line any_info="No Anys on this line!" content="    Note that using the coding language as analogy, the instance spec is like" number="404" precision="empty"/><line any_info="No Anys on this line!" content="    a class, where the instance itself is like the object created from the class." number="405" precision="empty"/><line any_info="No Anys on this line!" content="    If we want to transfer the instance spec remotely, we need to convert it" number="406" precision="empty"/><line any_info="No Anys on this line!" content="    into this DTO representation. This class acts as base for every other specs." number="407" precision="empty"/><line any_info="No Anys on this line!" content="" number="408" precision="empty"/><line any_info="No Anys on this line!" content="    .. note::" number="409" precision="empty"/><line any_info="No Anys on this line!" content="       Notice that the names of the attributes and ctor arguments will be used for" number="410" precision="empty"/><line any_info="No Anys on this line!" content="       serialization, hence those are not following python's format guidelines." number="411" precision="empty"/><line any_info="No Anys on this line!" content="" number="412" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance" number="413" precision="empty"/><line any_info="No Anys on this line!" content="    :param parameters: parameters of the instance" number="414" precision="empty"/><line any_info="No Anys on this line!" content="    :param dependsOn: list of instances that this instance depends on" number="415" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="416" precision="empty"/><line any_info="No Anys on this line!" content="" number="417" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="    def __init__(self," number="418" precision="imprecise"/><line any_info="No Anys on this line!" content="                 name: str = None," number="419" precision="precise"/><line any_info="No Anys on this line!" content="                 parameters: dict = None," number="420" precision="precise"/><line any_info="No Anys on this line!" content="                 dependsOn: list[str] = None," number="421" precision="precise"/><line any_info="No Anys on this line!" content="                 spec: PipelineSpecDTO = None):" number="422" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x2)" content="        super().__init__(name, parameters, dependsOn, None)" number="423" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="424" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="        if (spec is None) or isinstance(spec, PipelineSpecDTO):" number="425" precision="precise"/><line any_info="No Anys on this line!" content="            self.spec = spec" number="426" precision="precise"/><line any_info="No Anys on this line!" content="        elif isinstance(spec, dict):" number="427" precision="unanalyzed"/><line any_info="No Anys on this line!" content="            self.spec = PipelineSpecDTO(**spec)" number="428" precision="unanalyzed"/><line any_info="No Anys on this line!" content="        else:" number="429" precision="empty"/><line any_info="No Anys on this line!" content="            raise TypeError(f&quot;Invalid instance spec type: {type(spec)}&quot;)" number="430" precision="unanalyzed"/></mypy-report-file>