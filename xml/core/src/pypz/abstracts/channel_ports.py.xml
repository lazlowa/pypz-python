<?xml-stylesheet type="text/xsl" href="../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\abstracts\channel_ports.py" module="core.src.pypz.abstracts.channel_ports"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import time" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import traceback" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from abc import ABC" number="18" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Any, Optional, Type" number="19" precision="precise"/><line any_info="No Anys on this line!" content="" number="20" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.core.channels.io import ChannelReader, ChannelWriter" number="21" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.channels.status import ChannelStatus" number="22" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.commons.utils import current_time_millis" number="23" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.commons.parameters import RequiredParameter, OptionalParameter" number="24" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.plugin import InputPortPlugin, ResourceHandlerPlugin, OutputPortPlugin, ExtendedPlugin" number="25" precision="any"/><line any_info="No Anys on this line!" content="" number="26" precision="empty"/><line any_info="No Anys on this line!" content="ParamKeyChannelLocationConfig = &quot;channelLocation&quot;" number="27" precision="precise"/><line any_info="No Anys on this line!" content="ParamKeyChannelConfig = &quot;channelConfig&quot;" number="28" precision="precise"/><line any_info="No Anys on this line!" content="ParamKeySequentialModeEnabled = &quot;sequentialModeEnabled&quot;" number="29" precision="precise"/><line any_info="No Anys on this line!" content="ParamKeyPortOpenTimeoutMs = &quot;portOpenTimeoutMs&quot;" number="30" precision="precise"/><line any_info="No Anys on this line!" content="ParamKeySyncConnectionsOpen = &quot;syncConnectionsOpen&quot;" number="31" precision="precise"/><line any_info="No Anys on this line!" content="" number="32" precision="empty"/><line any_info="No Anys on this line!" content="" number="33" precision="empty"/><line any_info="No Anys on this line!" content="class ChannelInputPort(InputPortPlugin, ResourceHandlerPlugin, ExtendedPlugin, ABC):" number="34" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="35" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents an abstract InputPortPlugin, which utilizes the channels" number="36" precision="empty"/><line any_info="No Anys on this line!" content="    to realize transfer functionalities. It means that once there is a proper" number="37" precision="empty"/><line any_info="No Anys on this line!" content="    channel implementation, a fully functional InputPortPlugin can be made by" number="38" precision="empty"/><line any_info="No Anys on this line!" content="    providing that implementation in the abstract new_input_channel() method." number="39" precision="empty"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="41" precision="empty"/><line any_info="No Anys on this line!" content="    :param schema: the schema of the port plugin, which will be used to send/retrieve data" number="42" precision="empty"/><line any_info="No Anys on this line!" content="    :param group_mode: if set to True, the all the input ports in the group shall receive all messages" number="43" precision="empty"/><line any_info="No Anys on this line!" content="    :param channel_reader_type: the type of the channel reader to be used" number="44" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="45" precision="empty"/><line any_info="No Anys on this line!" content="" number="46" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= parameter descriptors =======================" number="47" precision="empty"/><line any_info="No Anys on this line!" content="" number="48" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _channel_location = RequiredParameter(str, alt_name=ParamKeyChannelLocationConfig," number="49" precision="any"/><line any_info="No Anys on this line!" content="                                          description=&quot;Location of the channel resource&quot;)" number="50" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x18)" content="    _channel_config = OptionalParameter(dict, alt_name=ParamKeyChannelConfig," number="51" precision="any"/><line any_info="No Anys on this line!" content="                                        description=&quot;Configuration of the channel as dictionary&quot;)" number="52" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _sequential_mode_enabled = OptionalParameter(bool, alt_name=ParamKeySequentialModeEnabled," number="53" precision="any"/><line any_info="No Anys on this line!" content="                                                 description=&quot;If set to True, then this port will wait with the &quot;" number="54" precision="precise"/><line any_info="No Anys on this line!" content="                                                             &quot;processing start until all the connected output &quot;" number="55" precision="empty"/><line any_info="No Anys on this line!" content="                                                             &quot;ports are finished&quot;)" number="56" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _port_open_timeout_ms = OptionalParameter(int, alt_name=ParamKeyPortOpenTimeoutMs," number="57" precision="any"/><line any_info="No Anys on this line!" content="                                              description=&quot;Specifies, how long the port shall wait for incoming&quot;" number="58" precision="precise"/><line any_info="No Anys on this line!" content="                                                          &quot;connections&quot;)" number="59" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _sync_connections_open = OptionalParameter(bool, alt_name=ParamKeySyncConnectionsOpen," number="60" precision="any"/><line any_info="No Anys on this line!" content="                                               description=&quot;If set to True, the port will wait for every expected&quot;" number="61" precision="precise"/><line any_info="No Anys on this line!" content="                                                           &quot;output ports to be connected&quot;)" number="62" precision="empty"/><line any_info="No Anys on this line!" content="" number="63" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= ctor =======================" number="64" precision="empty"/><line any_info="No Anys on this line!" content="" number="65" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="    def __init__(self," number="66" precision="any"/><line any_info="No Anys on this line!" content="                 name: str = None," number="67" precision="precise"/><line any_info="No Anys on this line!" content="                 schema: Any = None," number="68" precision="precise"/><line any_info="No Anys on this line!" content="                 group_mode: bool = False," number="69" precision="precise"/><line any_info="No Anys on this line!" content="                 channel_reader_type: Type[ChannelReader] = None," number="70" precision="precise"/><line any_info="No Anys on this line!" content="                 *args, **kwargs):" number="71" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="        super().__init__(name, schema, group_mode, *args, **kwargs)" number="72" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="73" precision="empty"/><line any_info="No Anys on this line!" content="        self.channel_reader_type: Type[ChannelReader] = channel_reader_type" number="74" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="75" precision="empty"/><line any_info="No Anys on this line!" content="        Type of the channel reader to be created by this plugin." number="76" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="77" precision="empty"/><line any_info="No Anys on this line!" content="" number="78" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        self._channel_reader: Optional[ChannelReader] = None" number="79" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="80" precision="empty"/><line any_info="No Anys on this line!" content="        The only channel reader maintained by this plugin." number="81" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="82" precision="empty"/><line any_info="No Anys on this line!" content="" number="83" precision="empty"/><line any_info="No Anys on this line!" content="        self._interrupted: bool = False" number="84" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="85" precision="empty"/><line any_info="No Anys on this line!" content="        Helper flag to register, if the execution has been interrupted." number="86" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="87" precision="empty"/><line any_info="No Anys on this line!" content="" number="88" precision="empty"/><line any_info="No Anys on this line!" content="        self._error_occurred: bool = False" number="89" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="90" precision="empty"/><line any_info="No Anys on this line!" content="        Helper flag to register, if error occurred during execution. This flag will" number="91" precision="empty"/><line any_info="No Anys on this line!" content="        be used to prevent resource deletion on error." number="92" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="93" precision="empty"/><line any_info="No Anys on this line!" content="" number="94" precision="empty"/><line any_info="No Anys on this line!" content="        self._need_to_check_connections_opened: bool = True" number="95" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="96" precision="empty"/><line any_info="No Anys on this line!" content="        Helper flag to signalize, if the channel shall be opened. This is necessary" number="97" precision="empty"/><line any_info="No Anys on this line!" content="        to maintain state in _on_port_open()." number="98" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="99" precision="empty"/><line any_info="No Anys on this line!" content="" number="100" precision="empty"/><line any_info="No Anys on this line!" content="        self._expected_output_count: Optional[int] = None" number="101" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="102" precision="empty"/><line any_info="No Anys on this line!" content="        During _on_port_open the expected number of connected outputs will be calculated." number="103" precision="empty"/><line any_info="No Anys on this line!" content="        It then will be used in cases, where we need to wait for all outputs." number="104" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="105" precision="empty"/><line any_info="No Anys on this line!" content="" number="106" precision="empty"/><line any_info="No Anys on this line!" content="        # Expected parameters" number="107" precision="empty"/><line any_info="No Anys on this line!" content="        # ===================" number="108" precision="empty"/><line any_info="No Anys on this line!" content="" number="109" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._channel_location = None" number="110" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self._channel_config = dict()" number="111" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._sequential_mode_enabled = False" number="112" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._port_open_timeout_ms = 0" number="113" precision="any"/><line any_info="No Anys on this line!" content="        self._port_open_timeout_start = 0" number="114" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._sync_connections_open = False" number="115" precision="any"/><line any_info="No Anys on this line!" content="" number="116" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= method implementations =======================" number="117" precision="empty"/><line any_info="No Anys on this line!" content="" number="118" precision="empty"/><line any_info="No Anys on this line!" content="    def _pre_execution(self) -&gt; None:" number="119" precision="precise"/><line any_info="No Anys on this line!" content="        if self.channel_reader_type is None:" number="120" precision="imprecise"/><line any_info="No Anys on this line!" content="            raise AttributeError(f&quot;[{self.get_full_name()}] Channel reader type is not specified&quot;)" number="121" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="122" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        if self._channel_reader is None:" number="123" precision="imprecise"/><line any_info="No Anys on this line!" content="            channel_name = self.get_full_name() \" number="124" precision="precise"/><line any_info="No Anys on this line!" content="                if self.get_group_principal() is None else self.get_group_principal().get_full_name()" number="125" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            self._channel_reader = self.channel_reader_type(channel_name, self)" number="126" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="            self._channel_reader.set_location(self._channel_location)" number="127" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="            self._channel_reader.invoke_configure_channel(self._channel_config)" number="128" precision="any"/><line any_info="No Anys on this line!" content="" number="129" precision="empty"/><line any_info="No Anys on this line!" content="    def _post_execution(self) -&gt; None:" number="130" precision="precise"/><line any_info="No Anys on this line!" content="        pass" number="131" precision="precise"/><line any_info="No Anys on this line!" content="" number="132" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_resource_creation(self) -&gt; bool:" number="133" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        if self.is_principal() and (not self._channel_reader.is_resource_created()):" number="134" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if self._channel_reader.invoke_resource_creation():" number="135" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                self._channel_reader.get_logger().debug(&quot;Resource created.&quot;)" number="136" precision="any"/><line any_info="No Anys on this line!" content="            else:" number="137" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                self._channel_reader.get_logger().debug(&quot;Waiting for resource creation ...&quot;)" number="138" precision="any"/><line any_info="No Anys on this line!" content="                return False" number="139" precision="precise"/><line any_info="No Anys on this line!" content="        return True" number="140" precision="precise"/><line any_info="No Anys on this line!" content="" number="141" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_resource_deletion(self) -&gt; bool:" number="142" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        if self.is_principal() and (not self._channel_reader.is_resource_deleted()):" number="143" precision="any"/><line any_info="No Anys on this line!" content="            # Do not delete resources on error" number="144" precision="empty"/><line any_info="No Anys on this line!" content="            if self._error_occurred:" number="145" precision="precise"/><line any_info="No Anys on this line!" content="                return True" number="146" precision="precise"/><line any_info="No Anys on this line!" content="" number="147" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if self._channel_reader.invoke_resource_deletion():" number="148" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                self._channel_reader.get_logger().debug(&quot;Resource deleted.&quot;)" number="149" precision="any"/><line any_info="No Anys on this line!" content="            else:" number="150" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                self._channel_reader.get_logger().debug(&quot;Waiting for resource deletion ...&quot;)" number="151" precision="any"/><line any_info="No Anys on this line!" content="                return False" number="152" precision="precise"/><line any_info="No Anys on this line!" content="        return True" number="153" precision="precise"/><line any_info="No Anys on this line!" content="" number="154" precision="empty"/><line any_info="No Anys on this line!" content="    def commit_current_read_offset(self):" number="155" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        self._channel_reader.invoke_commit_current_read_offset()" number="156" precision="any"/><line any_info="No Anys on this line!" content="" number="157" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_port_open(self) -&gt; bool:" number="158" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        if not self._channel_reader.is_channel_open():" number="159" precision="any"/><line any_info="No Anys on this line!" content="            if self._expected_output_count is None:" number="160" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x6)&#10;Explicit (x8)" content="                self._expected_output_count = sum(output.get_group_size() for output in self.get_connected_ports())" number="161" precision="precise"/><line any_info="No Anys on this line!" content="" number="162" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if self._channel_reader.invoke_open_channel():" number="163" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                self._channel_reader.get_logger().debug(&quot;Channel opened&quot;)" number="164" precision="any"/><line any_info="No Anys on this line!" content="" number="165" precision="empty"/><line any_info="No Anys on this line!" content="                # Resetting, since we reuse this variable at waiting for all inputs to get connected" number="166" precision="empty"/><line any_info="No Anys on this line!" content="                self._port_open_timeout_start = 0" number="167" precision="precise"/><line any_info="No Anys on this line!" content="            else:" number="168" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                if 0 &lt; self._port_open_timeout_ms:" number="169" precision="any"/><line any_info="No Anys on this line!" content="                    if 0 == self._port_open_timeout_start:" number="170" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                        self._port_open_timeout_start = current_time_millis()" number="171" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                    elif self._port_open_timeout_ms &lt; \" number="172" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                            (current_time_millis() - self._port_open_timeout_start):" number="173" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                        raise TimeoutError(f&quot;Timeout exceeded {self._port_open_timeout_ms} [ms]&quot;)" number="174" precision="any"/><line any_info="No Anys on this line!" content="" number="175" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                self._channel_reader.get_logger().debug(&quot;Waiting for channel to open...&quot;)" number="176" precision="any"/><line any_info="No Anys on this line!" content="                return False" number="177" precision="precise"/><line any_info="No Anys on this line!" content="" number="178" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="        if ChannelReader.NotInitialized == self._channel_reader.get_read_record_offset():" number="179" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self._channel_reader.set_initial_record_offset_auto()" number="180" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="            self._channel_reader.get_logger().debug(f&quot;Initialized offset: &quot;" number="181" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                                                    f&quot;{self._channel_reader.get_read_record_offset()}&quot;)" number="182" precision="any"/><line any_info="No Anys on this line!" content="" number="183" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        if not self._channel_reader.is_channel_started():" number="184" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            self._channel_reader.start_channel()" number="185" precision="any"/><line any_info="No Anys on this line!" content="" number="186" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self._channel_reader.invoke_sync_status_update()" number="187" precision="any"/><line any_info="No Anys on this line!" content="" number="188" precision="empty"/><line any_info="No Anys on this line!" content="        # Waiting for outputs to be connected" number="189" precision="empty"/><line any_info="No Anys on this line!" content="        # ===================================" number="190" precision="empty"/><line any_info="No Anys on this line!" content="" number="191" precision="empty"/><line any_info="No Anys on this line!" content="        if self._need_to_check_connections_opened:" number="192" precision="precise"/><line any_info="No Anys on this line!" content="            if 0 &lt; self._expected_output_count:" number="193" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                opened_output_count = len(self._channel_reader.retrieve_connected_channel_unique_names(" number="194" precision="any"/><line any_info="No Anys on this line!" content="                    lambda flt: (self.get_group_name() is None) or" number="195" precision="precise"/><line any_info="No Anys on this line!" content="                                (flt.get_channel_group_name() != self.get_group_name())" number="196" precision="precise"/><line any_info="No Anys on this line!" content="                ))" number="197" precision="empty"/><line any_info="No Anys on this line!" content="" number="198" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                if (0 == opened_output_count) or \" number="199" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                        (self._sync_connections_open and (self._expected_output_count &gt; opened_output_count)):" number="200" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                    if 0 &lt; self._port_open_timeout_ms:" number="201" precision="any"/><line any_info="No Anys on this line!" content="                        if 0 == self._port_open_timeout_start:" number="202" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                            self._port_open_timeout_start = current_time_millis()" number="203" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                        elif self._port_open_timeout_ms &lt; \" number="204" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                                (current_time_millis() - self._port_open_timeout_start):" number="205" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                            raise TimeoutError(f&quot;Timeout exceeded {self._port_open_timeout_ms} [ms]&quot;)" number="206" precision="any"/><line any_info="No Anys on this line!" content="                    return False" number="207" precision="precise"/><line any_info="No Anys on this line!" content="" number="208" precision="empty"/><line any_info="No Anys on this line!" content="            self._need_to_check_connections_opened = False" number="209" precision="precise"/><line any_info="No Anys on this line!" content="" number="210" precision="empty"/><line any_info="No Anys on this line!" content="        # Waiting for outputs to be finished" number="211" precision="empty"/><line any_info="No Anys on this line!" content="        # ==================================" number="212" precision="empty"/><line any_info="No Anys on this line!" content="        # Note that normally it does not make sense to slow down the execution by making it sequential," number="213" precision="empty"/><line any_info="No Anys on this line!" content="        # since it is used a couple of times for demo/comparison purposes." number="214" precision="empty"/><line any_info="No Anys on this line!" content="        # Notice that at this point all other relevant checks has been made" number="215" precision="empty"/><line any_info="No Anys on this line!" content="        # so there is at least 1 output connected and open" number="216" precision="empty"/><line any_info="No Anys on this line!" content="" number="217" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        if self._sequential_mode_enabled:" number="218" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if self._channel_reader.is_any_connected_channel_healthy_and_not_stopped_and_not_closed():" number="219" precision="any"/><line any_info="No Anys on this line!" content="                self.get_logger().debug(&quot;Waiting for output channel(s) to finish ...&quot;)" number="220" precision="precise"/><line any_info="No Anys on this line!" content="                return False" number="221" precision="precise"/><line any_info="No Anys on this line!" content="" number="222" precision="empty"/><line any_info="No Anys on this line!" content="        return True" number="223" precision="precise"/><line any_info="No Anys on this line!" content="" number="224" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)" content="    def retrieve(self) -&gt; Any:" number="225" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        return self._channel_reader.invoke_read_records()" number="226" precision="any"/><line any_info="No Anys on this line!" content="" number="227" precision="empty"/><line any_info="No Anys on this line!" content="    def can_retrieve(self) -&gt; bool:" number="228" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        if not self._channel_reader.is_channel_open():" number="229" precision="any"/><line any_info="No Anys on this line!" content="            raise PermissionError(f&quot;Method allowed only, if channel is open ({self.get_full_name()})&quot;)" number="230" precision="precise"/><line any_info="No Anys on this line!" content="" number="231" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        finished_output_count = len(self._channel_reader.retrieve_connected_channel_unique_names(" number="232" precision="any"/><line any_info="No Anys on this line!" content="            lambda flt: ((self.get_group_name() is None) or" number="233" precision="precise"/><line any_info="No Anys on this line!" content="                         (flt.get_channel_group_name() != self.get_group_name())) and" number="234" precision="precise"/><line any_info="No Anys on this line!" content="                        ((not flt.is_channel_healthy()) or flt.is_channel_stopped() or flt.is_channel_closed())" number="235" precision="precise"/><line any_info="No Anys on this line!" content="        ))" number="236" precision="empty"/><line any_info="No Anys on this line!" content="" number="237" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        return self._channel_reader.has_records() or (self._expected_output_count &gt; finished_output_count)" number="238" precision="any"/><line any_info="No Anys on this line!" content="" number="239" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_port_close(self) -&gt; bool:" number="240" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        if self._channel_reader.is_channel_open():" number="241" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x7)" content="            if self._channel_reader.can_close() and self._channel_reader.invoke_close_channel():" number="242" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                self._channel_reader.get_logger().debug(&quot;Channel closed.&quot;)" number="243" precision="any"/><line any_info="No Anys on this line!" content="            else:" number="244" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                self._channel_reader.get_logger().debug(&quot;Waiting for channel to close...&quot;)" number="245" precision="any"/><line any_info="No Anys on this line!" content="                return False" number="246" precision="precise"/><line any_info="No Anys on this line!" content="" number="247" precision="empty"/><line any_info="No Anys on this line!" content="        if self.is_principal():" number="248" precision="precise"/><line any_info="No Anys on this line!" content="            self.get_logger().debug(&quot;Closing port gracefully ...&quot;)" number="249" precision="precise"/><line any_info="No Anys on this line!" content="            time.sleep(5)" number="250" precision="precise"/><line any_info="No Anys on this line!" content="        return True" number="251" precision="precise"/><line any_info="No Anys on this line!" content="" number="252" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_interrupt(self, system_signal: int = None) -&gt; None:" number="253" precision="precise"/><line any_info="No Anys on this line!" content="        self.get_logger().warn(f&quot;Interrupted by system signal: {system_signal}&quot;)" number="254" precision="precise"/><line any_info="No Anys on this line!" content="        self._interrupted = True" number="255" precision="precise"/><line any_info="No Anys on this line!" content="" number="256" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_error(self) -&gt; None:" number="257" precision="precise"/><line any_info="No Anys on this line!" content="        self._error_occurred = True" number="258" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="        self._channel_reader.invoke_sync_send_status_message(ChannelStatus.Error)" number="259" precision="any"/><line any_info="No Anys on this line!" content="" number="260" precision="empty"/><line any_info="No Anys on this line!" content="" number="261" precision="empty"/><line any_info="No Anys on this line!" content="class ChannelOutputPort(OutputPortPlugin, ResourceHandlerPlugin, ExtendedPlugin, ABC):" number="262" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="263" precision="empty"/><line any_info="No Anys on this line!" content="    This class represents an abstract OutputPortPlugin, which utilizes the channels" number="264" precision="empty"/><line any_info="No Anys on this line!" content="    to realize transfer functionalities. It means that once there is a proper" number="265" precision="empty"/><line any_info="No Anys on this line!" content="    channel implementation, a fully functional OutputPortPlugin can be made by" number="266" precision="empty"/><line any_info="No Anys on this line!" content="    providing that implementation in the abstract new_output_channel() method." number="267" precision="empty"/><line any_info="No Anys on this line!" content="" number="268" precision="empty"/><line any_info="No Anys on this line!" content="    :param name: name of the instance, if not provided, it will be attempted to deduce from the variable's name" number="269" precision="empty"/><line any_info="No Anys on this line!" content="    :param schema: the schema of the port plugin, which will be used to send/retrieve data" number="270" precision="empty"/><line any_info="No Anys on this line!" content="    :param channel_writer_type: the type of the channel writer to be used" number="271" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="272" precision="empty"/><line any_info="No Anys on this line!" content="" number="273" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= parameter descriptors =======================" number="274" precision="empty"/><line any_info="No Anys on this line!" content="" number="275" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _channel_location = RequiredParameter(str, alt_name=ParamKeyChannelLocationConfig," number="276" precision="any"/><line any_info="No Anys on this line!" content="                                          description=&quot;Location of the channel resource&quot;)" number="277" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x18)" content="    _channel_config = OptionalParameter(dict, alt_name=ParamKeyChannelConfig," number="278" precision="any"/><line any_info="No Anys on this line!" content="                                        description=&quot;Configuration of the channel as dictionary&quot;)" number="279" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="    _port_open_timeout_ms = OptionalParameter(int, alt_name=ParamKeyPortOpenTimeoutMs," number="280" precision="any"/><line any_info="No Anys on this line!" content="                                              description=&quot;Specifies, how long the port shall wait for incoming&quot;" number="281" precision="precise"/><line any_info="No Anys on this line!" content="                                                          &quot;connections&quot;)" number="282" precision="empty"/><line any_info="No Anys on this line!" content="" number="283" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= ctor =======================" number="284" precision="empty"/><line any_info="No Anys on this line!" content="" number="285" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="    def __init__(self," number="286" precision="any"/><line any_info="No Anys on this line!" content="                 name: str = None," number="287" precision="precise"/><line any_info="No Anys on this line!" content="                 schema: Any = None," number="288" precision="precise"/><line any_info="No Anys on this line!" content="                 channel_writer_type: Type[ChannelWriter] = None," number="289" precision="precise"/><line any_info="No Anys on this line!" content="                 *args, **kwargs):" number="290" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x1)&#10;Unannotated (x2)" content="        super().__init__(name, schema, *args, **kwargs)" number="291" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="292" precision="empty"/><line any_info="No Anys on this line!" content="        self.channel_writer_type: Type[ChannelWriter] = channel_writer_type" number="293" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="294" precision="empty"/><line any_info="No Anys on this line!" content="        Type of the channel writer to be created by this plugin." number="295" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="296" precision="empty"/><line any_info="No Anys on this line!" content="" number="297" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        self._channel_writers: Optional[set[ChannelWriter]] = None" number="298" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="299" precision="empty"/><line any_info="No Anys on this line!" content="        The channel writers to be maintained by this plugin. Note that a channel" number="300" precision="empty"/><line any_info="No Anys on this line!" content="        writer will be created for each connection from this output port plugin." number="301" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="302" precision="empty"/><line any_info="No Anys on this line!" content="" number="303" precision="empty"/><line any_info="No Anys on this line!" content="        self._interrupted: bool = False" number="304" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="305" precision="empty"/><line any_info="No Anys on this line!" content="        Helper flag to register, if the execution has been interrupted." number="306" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="307" precision="empty"/><line any_info="No Anys on this line!" content="" number="308" precision="empty"/><line any_info="No Anys on this line!" content="        self._error_occurred: bool = False" number="309" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="310" precision="empty"/><line any_info="No Anys on this line!" content="        Helper flag to register, if error occurred during execution. This flag will" number="311" precision="empty"/><line any_info="No Anys on this line!" content="        be used to prevent resource deletion on error." number="312" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="313" precision="empty"/><line any_info="No Anys on this line!" content="" number="314" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x3)" content="        self._resource_deletion_errors: set[ChannelWriter] = set()" number="315" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="316" precision="empty"/><line any_info="No Anys on this line!" content="        Set to store the channels that had errors on resource deletion. It is necessary" number="317" precision="empty"/><line any_info="No Anys on this line!" content="        to be able not to reschedule those channels in re-execution of the state." number="318" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="319" precision="empty"/><line any_info="No Anys on this line!" content="" number="320" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x3)" content="        self._port_close_errors: set[ChannelWriter] = set()" number="321" precision="imprecise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="322" precision="empty"/><line any_info="No Anys on this line!" content="        Set to store the channels that had errors on port closure. It is necessary" number="323" precision="empty"/><line any_info="No Anys on this line!" content="        to be able not to reschedule those channels in re-execution of the state." number="324" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="325" precision="empty"/><line any_info="No Anys on this line!" content="" number="326" precision="empty"/><line any_info="No Anys on this line!" content="        # Expected parameters" number="327" precision="empty"/><line any_info="No Anys on this line!" content="        # ===================" number="328" precision="empty"/><line any_info="No Anys on this line!" content="" number="329" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._channel_location = None" number="330" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self._channel_config = dict()" number="331" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        self._port_open_timeout_ms = 0" number="332" precision="any"/><line any_info="No Anys on this line!" content="        self._port_open_timeout_start = 0" number="333" precision="precise"/><line any_info="No Anys on this line!" content="" number="334" precision="empty"/><line any_info="No Anys on this line!" content="    # ======================= method implementations =======================" number="335" precision="empty"/><line any_info="No Anys on this line!" content="" number="336" precision="empty"/><line any_info="No Anys on this line!" content="    def _pre_execution(self) -&gt; None:" number="337" precision="precise"/><line any_info="No Anys on this line!" content="        if self.channel_writer_type is None:" number="338" precision="imprecise"/><line any_info="No Anys on this line!" content="            raise AttributeError(f&quot;[{self.get_full_name()}] Channel writer type is not specified&quot;)" number="339" precision="unanalyzed"/><line any_info="No Anys on this line!" content="" number="340" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        if self._channel_writers is None:" number="341" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x2)&#10;Omitted Generics (x3)" content="            self._channel_writers = set()" number="342" precision="imprecise"/><line any_info="No Anys on this line!" content="            for connection in self.get_connected_ports():" number="343" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                new_output_channel = self.channel_writer_type(connection.get_full_name(), self)" number="344" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="                new_output_channel.set_location(self._channel_location)" number="345" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="                new_output_channel.invoke_configure_channel(self._channel_config)" number="346" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                self._channel_writers.add(new_output_channel)" number="347" precision="any"/><line any_info="No Anys on this line!" content="" number="348" precision="empty"/><line any_info="No Anys on this line!" content="    def _post_execution(self) -&gt; None:" number="349" precision="precise"/><line any_info="No Anys on this line!" content="        pass" number="350" precision="precise"/><line any_info="No Anys on this line!" content="" number="351" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_resource_creation(self) -&gt; bool:" number="352" precision="precise"/><line any_info="No Anys on this line!" content="        if not self.is_principal():" number="353" precision="precise"/><line any_info="No Anys on this line!" content="            return True" number="354" precision="precise"/><line any_info="No Anys on this line!" content="" number="355" precision="empty"/><line any_info="No Anys on this line!" content="        all_resources_created = True" number="356" precision="precise"/><line any_info="No Anys on this line!" content="" number="357" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        for channel in self._channel_writers:" number="358" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if not channel.is_resource_created():" number="359" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                if channel.invoke_resource_creation():" number="360" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                    channel.get_logger().debug(&quot;Resource created.&quot;)" number="361" precision="any"/><line any_info="No Anys on this line!" content="                else:" number="362" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                    channel.get_logger().debug(&quot;Waiting for resource creation ...&quot;)" number="363" precision="any"/><line any_info="No Anys on this line!" content="                    all_resources_created = False" number="364" precision="precise"/><line any_info="No Anys on this line!" content="" number="365" precision="empty"/><line any_info="No Anys on this line!" content="        if not all_resources_created:" number="366" precision="precise"/><line any_info="No Anys on this line!" content="            return False" number="367" precision="precise"/><line any_info="No Anys on this line!" content="" number="368" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        if 0 == len(self._channel_writers):" number="369" precision="imprecise"/><line any_info="No Anys on this line!" content="            self.get_logger().warn(&quot;No channel reader(s) connected&quot;)" number="370" precision="precise"/><line any_info="No Anys on this line!" content="" number="371" precision="empty"/><line any_info="No Anys on this line!" content="        return True" number="372" precision="precise"/><line any_info="No Anys on this line!" content="" number="373" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_resource_deletion(self) -&gt; bool:" number="374" precision="precise"/><line any_info="No Anys on this line!" content="        if not self.is_principal():" number="375" precision="precise"/><line any_info="No Anys on this line!" content="            return True" number="376" precision="precise"/><line any_info="No Anys on this line!" content="" number="377" precision="empty"/><line any_info="No Anys on this line!" content="        all_resources_deleted = True" number="378" precision="precise"/><line any_info="No Anys on this line!" content="" number="379" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        for channel in self._channel_writers:" number="380" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="            if (not channel.is_resource_deleted()) and (channel not in self._resource_deletion_errors):" number="381" precision="any"/><line any_info="No Anys on this line!" content="                try:" number="382" precision="empty"/><line any_info="No Anys on this line!" content="                    if not self._error_occurred:" number="383" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                        if channel.invoke_resource_deletion():" number="384" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                            channel.get_logger().debug(&quot;Resource deleted.&quot;)" number="385" precision="any"/><line any_info="No Anys on this line!" content="                        else:" number="386" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                            channel.get_logger().debug(&quot;Waiting for resource deletion ...&quot;)" number="387" precision="any"/><line any_info="No Anys on this line!" content="                            all_resources_deleted = False" number="388" precision="precise"/><line any_info="No Anys on this line!" content="                except:  # noqa: E722" number="389" precision="empty"/><line any_info="No Anys on this line!" content="                    # We catch the fact that error occurred, but not interrupting the deletion" number="390" precision="empty"/><line any_info="No Anys on this line!" content="                    # process of the other channels" number="391" precision="empty"/><line any_info="No Anys on this line!" content="                    self.get_logger().error(traceback.format_exc())" number="392" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                    self._resource_deletion_errors.add(channel)" number="393" precision="any"/><line any_info="No Anys on this line!" content="" number="394" precision="empty"/><line any_info="No Anys on this line!" content="        if not all_resources_deleted:" number="395" precision="precise"/><line any_info="No Anys on this line!" content="            return False" number="396" precision="precise"/><line any_info="No Anys on this line!" content="" number="397" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        if 0 &lt; len(self._resource_deletion_errors):" number="398" precision="imprecise"/><line any_info="No Anys on this line!" content="            raise InterruptedError(f&quot;Error occurred at resource deletion in the following channels: &quot;" number="399" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                                   f&quot;{[channel.get_channel_name() for channel in self._resource_deletion_errors]}&quot;)" number="400" precision="any"/><line any_info="No Anys on this line!" content="" number="401" precision="empty"/><line any_info="No Anys on this line!" content="        return True" number="402" precision="precise"/><line any_info="No Anys on this line!" content="" number="403" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_port_open(self) -&gt; bool:" number="404" precision="precise"/><line any_info="No Anys on this line!" content="        all_channels_opened = True" number="405" precision="precise"/><line any_info="No Anys on this line!" content="" number="406" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        for channel in self._channel_writers:" number="407" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if not channel.is_channel_open():" number="408" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                if channel.invoke_open_channel():" number="409" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                    channel.get_logger().debug(&quot;Channel opened.&quot;)" number="410" precision="any"/><line any_info="No Anys on this line!" content="                else:" number="411" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                    channel.get_logger().debug(&quot;Waiting for channel open ...&quot;)" number="412" precision="any"/><line any_info="No Anys on this line!" content="                    all_channels_opened = False" number="413" precision="precise"/><line any_info="No Anys on this line!" content="" number="414" precision="empty"/><line any_info="No Anys on this line!" content="        if not all_channels_opened:" number="415" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            if 0 &lt; self._port_open_timeout_ms:" number="416" precision="any"/><line any_info="No Anys on this line!" content="                if 0 == self._port_open_timeout_start:" number="417" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                    self._port_open_timeout_start = current_time_millis()" number="418" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                elif self._port_open_timeout_ms &lt; \" number="419" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                        (current_time_millis() - self._port_open_timeout_start):" number="420" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                    raise TimeoutError(f&quot;Timeout exceeded {self._port_open_timeout_ms} [ms]&quot;)" number="421" precision="any"/><line any_info="No Anys on this line!" content="" number="422" precision="empty"/><line any_info="No Anys on this line!" content="            return False" number="423" precision="precise"/><line any_info="No Anys on this line!" content="" number="424" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        for channel in self._channel_writers:" number="425" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="            if not channel.is_channel_started():" number="426" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                channel.start_channel()" number="427" precision="any"/><line any_info="No Anys on this line!" content="" number="428" precision="empty"/><line any_info="No Anys on this line!" content="        return True" number="429" precision="precise"/><line any_info="No Anys on this line!" content="" number="430" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_port_close(self) -&gt; bool:" number="431" precision="precise"/><line any_info="No Anys on this line!" content="        all_channels_closed = True" number="432" precision="precise"/><line any_info="No Anys on this line!" content="" number="433" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        for channel in self._channel_writers:" number="434" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="            if channel.is_channel_open() and (channel not in self._port_close_errors):" number="435" precision="any"/><line any_info="No Anys on this line!" content="                try:" number="436" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x7)" content="                    if channel.can_close() and channel.invoke_close_channel():" number="437" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                        channel.get_logger().debug(&quot;Channel closed.&quot;)" number="438" precision="any"/><line any_info="No Anys on this line!" content="                    else:" number="439" precision="empty"/><line any_info="No Anys on this line!" content="                        all_channels_closed = False" number="440" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                        channel.get_logger().debug(&quot;Waiting for channel to close...&quot;)" number="441" precision="any"/><line any_info="No Anys on this line!" content="                except:  # noqa: E722" number="442" precision="empty"/><line any_info="No Anys on this line!" content="                    # We catch the fact that error occurred, but not interrupting the shutdown" number="443" precision="empty"/><line any_info="No Anys on this line!" content="                    # process of the other channels" number="444" precision="empty"/><line any_info="No Anys on this line!" content="                    self.get_logger().error(traceback.format_exc())" number="445" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                    self._port_close_errors.add(channel)" number="446" precision="any"/><line any_info="No Anys on this line!" content="" number="447" precision="empty"/><line any_info="No Anys on this line!" content="        if not all_channels_closed:" number="448" precision="precise"/><line any_info="No Anys on this line!" content="            return False" number="449" precision="precise"/><line any_info="No Anys on this line!" content="" number="450" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        if 0 &lt; len(self._port_close_errors):" number="451" precision="imprecise"/><line any_info="No Anys on this line!" content="            raise InterruptedError(f&quot;Error occurred at port close in the following channels: &quot;" number="452" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                                   f&quot;{[channel.get_channel_name() for channel in self._port_close_errors]}&quot;)" number="453" precision="any"/><line any_info="No Anys on this line!" content="" number="454" precision="empty"/><line any_info="No Anys on this line!" content="        if self.is_principal():" number="455" precision="precise"/><line any_info="No Anys on this line!" content="            self.get_logger().debug(&quot;Closing port gracefully ...&quot;)" number="456" precision="precise"/><line any_info="No Anys on this line!" content="            time.sleep(5)" number="457" precision="precise"/><line any_info="No Anys on this line!" content="" number="458" precision="empty"/><line any_info="No Anys on this line!" content="        return True" number="459" precision="precise"/><line any_info="No Anys on this line!" content="" number="460" precision="empty"/><line any_info="Any Types on this line: &#10;Explicit (x2)" content="    def send(self, data: Any) -&gt; Any:" number="461" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        for channel in self._channel_writers:" number="462" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Explicit (x1)" content="            channel.invoke_write_records(data)" number="463" precision="any"/><line any_info="No Anys on this line!" content="" number="464" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_interrupt(self, system_signal: int = None) -&gt; None:" number="465" precision="precise"/><line any_info="No Anys on this line!" content="        self.get_logger().warn(f&quot;Interrupted by system signal: {system_signal}&quot;)" number="466" precision="precise"/><line any_info="No Anys on this line!" content="        self._interrupted = True" number="467" precision="precise"/><line any_info="No Anys on this line!" content="" number="468" precision="empty"/><line any_info="No Anys on this line!" content="    def _on_error(self) -&gt; None:" number="469" precision="precise"/><line any_info="No Anys on this line!" content="        self._error_occurred = True" number="470" precision="precise"/><line any_info="No Anys on this line!" content="" number="471" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x3)" content="        error_channels: set[ChannelWriter] = set()" number="472" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        for channel in self._channel_writers:" number="473" precision="any"/><line any_info="No Anys on this line!" content="            try:" number="474" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                channel.invoke_sync_send_status_message(ChannelStatus.Error)" number="475" precision="any"/><line any_info="No Anys on this line!" content="            except:  # noqa: E722" number="476" precision="empty"/><line any_info="No Anys on this line!" content="                # We catch the fact that error occurred, but not interrupting the error handling" number="477" precision="empty"/><line any_info="No Anys on this line!" content="                # process of the other channels" number="478" precision="empty"/><line any_info="No Anys on this line!" content="                self.get_logger().error(traceback.format_exc())" number="479" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="                error_channels.add(channel)" number="480" precision="any"/><line any_info="No Anys on this line!" content="" number="481" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        if 0 &lt; len(error_channels):" number="482" precision="imprecise"/><line any_info="No Anys on this line!" content="            raise InterruptedError(f&quot;Error occurred at error handling in the following channels: &quot;" number="483" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="                                   f&quot;{[channel.get_channel_name() for channel in error_channels]}&quot;)" number="484" precision="any"/></mypy-report-file>