<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\executors\pipeline\executor.py" module="core.src.pypz.executors.pipeline.executor"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="import concurrent.futures" number="16" precision="precise"/><line any_info="No Anys on this line!" content="import signal" number="17" precision="precise"/><line any_info="No Anys on this line!" content="from typing import Optional" number="18" precision="precise"/><line any_info="No Anys on this line!" content="" number="19" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.executors.commons import ExecutionMode" number="20" precision="any"/><line any_info="No Anys on this line!" content="from pypz.executors.operator.executor import OperatorExecutor" number="21" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.pipeline import Pipeline" number="22" precision="any"/><line any_info="No Anys on this line!" content="" number="23" precision="empty"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="No Anys on this line!" content="class PipelineExecutor:" number="25" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="26" precision="empty"/><line any_info="No Anys on this line!" content="    This class implements the feature to execute an entire pipeline i.e., each operator" number="27" precision="empty"/><line any_info="No Anys on this line!" content="    individually via an :class:`OperatorExecutor &lt;pypz.executors.operator.executor.OperatorExecutor&gt;`." number="28" precision="empty"/><line any_info="No Anys on this line!" content="    To increase the performance of the execution, each" number="29" precision="empty"/><line any_info="No Anys on this line!" content="    :class:`OperatorExecutor &lt;pypz.executors.operator.executor.OperatorExecutor&gt;` will be launched" number="30" precision="empty"/><line any_info="No Anys on this line!" content="    in a separate thread." number="31" precision="empty"/><line any_info="No Anys on this line!" content="" number="32" precision="empty"/><line any_info="No Anys on this line!" content="    .. warning::" number="33" precision="empty"/><line any_info="No Anys on this line!" content="       This class has the sole purpose to allow you to test pipelines locally, it should not be used" number="34" precision="empty"/><line any_info="No Anys on this line!" content="       for production workloads, since python is not very optimal for concurrent executions. That is" number="35" precision="empty"/><line any_info="No Anys on this line!" content="       the reason to limit the operator count." number="36" precision="empty"/><line any_info="No Anys on this line!" content="" number="37" precision="empty"/><line any_info="No Anys on this line!" content="    :param pipeline: the pipeline instance to be executed" number="38" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="39" precision="empty"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="No Anys on this line!" content="    _max_operator_count: int = 32" number="41" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="42" precision="empty"/><line any_info="No Anys on this line!" content="    This value limits the number of operators to be executed parallely. An exception will be" number="43" precision="empty"/><line any_info="No Anys on this line!" content="    thrown, if exceeded." number="44" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="45" precision="empty"/><line any_info="No Anys on this line!" content="" number="46" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def __init__(self, pipeline: Pipeline):" number="47" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        signal.signal(signal.SIGTERM, self.interrupt)" number="48" precision="precise"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="        signal.signal(signal.SIGINT, self.interrupt)" number="49" precision="precise"/><line any_info="No Anys on this line!" content="" number="50" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self.__pipeline: Pipeline = pipeline" number="51" precision="any"/><line any_info="No Anys on this line!" content="" number="52" precision="empty"/><line any_info="No Anys on this line!" content="        self.__executor: Optional[concurrent.futures.ThreadPoolExecutor] = None" number="53" precision="precise"/><line any_info="No Anys on this line!" content="" number="54" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Omitted Generics (x3)" content="        self.__operator_executors: set[OperatorExecutor] = set()" number="55" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="56" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x6)" content="        self.__futures: set[concurrent.futures.Future] = set()" number="57" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="58" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot; Creating the OperatorExecutor objects. Notice that none of the OperatorExecutors" number="59" precision="empty"/><line any_info="No Anys on this line!" content="            may handle interrupts, since this will be handled on PipelineExecutor level. &quot;&quot;&quot;" number="60" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        for operator in self.__pipeline.get_protected().get_nested_instances().values():" number="61" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x5)" content="            self.__operator_executors.add(OperatorExecutor(operator, handle_interrupts=False))" number="62" precision="any"/><line any_info="No Anys on this line!" content="" number="63" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        if PipelineExecutor._max_operator_count &lt; len(self.__operator_executors):" number="64" precision="imprecise"/><line any_info="No Anys on this line!" content="            raise AttributeError(f&quot;Max number of operators exceeded &quot;" number="65" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                                 f&quot;({PipelineExecutor._max_operator_count}): &quot;" number="66" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                                 f&quot;{len(self.__operator_executors)}&quot;)" number="67" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="68" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)&#10;Unannotated (x1)" content="    def start(self, exec_mode: ExecutionMode = ExecutionMode.Standard):" number="69" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="70" precision="empty"/><line any_info="No Anys on this line!" content="        This method triggers the execution by creating a ``ThreadPoolExecutor`` and submitting" number="71" precision="empty"/><line any_info="No Anys on this line!" content="        the :class:`OperatorExecutor &lt;pypz.executors.operator.executor.OperatorExecutor&gt;`'s" number="72" precision="empty"/><line any_info="No Anys on this line!" content="        corresponding method." number="73" precision="empty"/><line any_info="No Anys on this line!" content="" number="74" precision="empty"/><line any_info="No Anys on this line!" content="        :param exec_mode: :class:`pypz.executors.commons.ExecutionMode`" number="75" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="76" precision="empty"/><line any_info="No Anys on this line!" content="" number="77" precision="empty"/><line any_info="No Anys on this line!" content="        if self.__executor is None:" number="78" precision="precise"/><line any_info="Any Types on this line: &#10;Explicit (x3)&#10;Unimported (x1)" content="            self.__executor = concurrent.futures.ThreadPoolExecutor(max_workers=PipelineExecutor._max_operator_count," number="79" precision="precise"/><line any_info="No Anys on this line!" content="                                                                    thread_name_prefix=self.__class__.__name__)" number="80" precision="precise"/><line any_info="Any Types on this line: &#10;Omitted Generics (x1)" content="            self.__futures.clear()" number="81" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            for operator_executor in self.__operator_executors:" number="82" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x5)&#10;Unimported (x5)" content="                self.__futures.add(self.__executor.submit(operator_executor.execute, exec_mode))" number="83" precision="any"/><line any_info="No Anys on this line!" content="" number="84" precision="empty"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)" content="            while any(not future.done() for future in self.__futures):" number="85" precision="imprecise"/><line any_info="No Anys on this line!" content="                pass" number="86" precision="precise"/><line any_info="No Anys on this line!" content="" number="87" precision="empty"/><line any_info="No Anys on this line!" content="    def shutdown(self):" number="88" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="89" precision="empty"/><line any_info="No Anys on this line!" content="        This method shuts down the ``ThreadPoolExecutor``. Notice that it blocks until all" number="90" precision="empty"/><line any_info="No Anys on this line!" content="        OperatorExecutor has finished. Notice as well that we don't cancel futures, since" number="91" precision="empty"/><line any_info="No Anys on this line!" content="        it will be handled upon handling the interrupt signals." number="92" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="93" precision="empty"/><line any_info="No Anys on this line!" content="" number="94" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        if self.__executor is not None:" number="95" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            self.__executor.shutdown(wait=True, cancel_futures=False)" number="96" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="            self.__executor = None" number="97" precision="any"/><line any_info="No Anys on this line!" content="" number="98" precision="empty"/><line any_info="No Anys on this line!" content="    def interrupt(self, signal_number, current_stack):" number="99" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="100" precision="empty"/><line any_info="No Anys on this line!" content="        This method is called upon receiving a system signal e.g., SIGINT." number="101" precision="empty"/><line any_info="No Anys on this line!" content="        We are interrupting each :class:`OperatorExecutor &lt;pypz.executors.operator.executor.OperatorExecutor&gt;`" number="102" precision="empty"/><line any_info="No Anys on this line!" content="        by invoking :meth:`interrupt() &lt;pypz.executors.operator.executor.OperatorExecutor.interrupt&gt;` only" number="103" precision="empty"/><line any_info="No Anys on this line!" content="        if it is still running. Notice that we cancel futures i.e., should an" number="104" precision="empty"/><line any_info="No Anys on this line!" content="        :class:`OperatorExecutor &lt;pypz.executors.operator.executor.OperatorExecutor&gt;` not yet be scheduled," number="105" precision="empty"/><line any_info="No Anys on this line!" content="        it will prevent to be scheduled." number="106" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="107" precision="empty"/><line any_info="No Anys on this line!" content="" number="108" precision="empty"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        for operator_executor in self.__operator_executors:" number="109" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            if operator_executor.is_running():" number="110" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x5)" content="                operator_executor.interrupt(signal_number, current_stack)" number="111" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x2)" content="        for future in self.__futures:" number="112" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x3)" content="            future.cancel()" number="113" precision="any"/></mypy-report-file>