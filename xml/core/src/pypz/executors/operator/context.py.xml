<?xml-stylesheet type="text/xsl" href="../../../../../../mypy-html.xslt"?><mypy-report-file name="core\src\pypz\executors\operator\context.py" module="core.src.pypz.executors.operator.context"><line any_info="No Anys on this line!" content="# =============================================================================" number="1" precision="empty"/><line any_info="No Anys on this line!" content="# Copyright (c) 2024 by Laszlo Anka. All rights reserved." number="2" precision="empty"/><line any_info="No Anys on this line!" content="#" number="3" precision="empty"/><line any_info="No Anys on this line!" content="# Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);" number="4" precision="empty"/><line any_info="No Anys on this line!" content="# you may not use this file except in compliance with the License." number="5" precision="empty"/><line any_info="No Anys on this line!" content="# You may obtain a copy of the License at" number="6" precision="empty"/><line any_info="No Anys on this line!" content="#" number="7" precision="empty"/><line any_info="No Anys on this line!" content="#     http://www.apache.org/licenses/LICENSE-2.0" number="8" precision="empty"/><line any_info="No Anys on this line!" content="#" number="9" precision="empty"/><line any_info="No Anys on this line!" content="# Unless required by applicable law or agreed to in writing, software" number="10" precision="empty"/><line any_info="No Anys on this line!" content="# distributed under the License is distributed on an &quot;AS IS&quot; BASIS," number="11" precision="empty"/><line any_info="No Anys on this line!" content="# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied." number="12" precision="empty"/><line any_info="No Anys on this line!" content="# See the License for the specific language governing permissions and" number="13" precision="empty"/><line any_info="No Anys on this line!" content="# limitations under the License." number="14" precision="empty"/><line any_info="No Anys on this line!" content="# =============================================================================" number="15" precision="empty"/><line any_info="No Anys on this line!" content="from typing import Type, Callable, TypeVar" number="16" precision="precise"/><line any_info="No Anys on this line!" content="" number="17" precision="empty"/><line any_info="No Anys on this line!" content="from pypz.executors.commons import ExecutionMode, ExitCodes" number="18" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.operator import Operator" number="19" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.plugin import Plugin" number="20" precision="any"/><line any_info="No Anys on this line!" content="from pypz.core.specs.utils import resolve_dependency_graph" number="21" precision="any"/><line any_info="No Anys on this line!" content="" number="22" precision="empty"/><line any_info="No Anys on this line!" content="PluginType = TypeVar('PluginType', bound=Plugin)" number="23" precision="empty"/><line any_info="No Anys on this line!" content="" number="24" precision="empty"/><line any_info="No Anys on this line!" content="" number="25" precision="empty"/><line any_info="No Anys on this line!" content="class ExecutionContext:" number="26" precision="precise"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="27" precision="empty"/><line any_info="No Anys on this line!" content="    This class is intended to store context information and helper methods for" number="28" precision="empty"/><line any_info="No Anys on this line!" content="    the actual execution. The context itself is based on the current Operator." number="29" precision="empty"/><line any_info="No Anys on this line!" content="" number="30" precision="empty"/><line any_info="No Anys on this line!" content="    :param operator: the actual operator instance to be executed" number="31" precision="empty"/><line any_info="No Anys on this line!" content="    :param exec_mode: :class:`ExecutionMode &lt;pypz.executors.commons.ExecutionMode&gt;`" number="32" precision="empty"/><line any_info="No Anys on this line!" content="    &quot;&quot;&quot;" number="33" precision="empty"/><line any_info="No Anys on this line!" content="" number="34" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="    def __init__(self, operator: Operator, exec_mode: ExecutionMode):" number="35" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self.__operator: Operator = operator" number="36" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="37" precision="empty"/><line any_info="No Anys on this line!" content="        The operator of the context" number="38" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="39" precision="empty"/><line any_info="No Anys on this line!" content="" number="40" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x3)" content="        self.__exec_mode: ExecutionMode = exec_mode" number="41" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="42" precision="empty"/><line any_info="No Anys on this line!" content="        The run mode of the execution. For more information refer to the ExecutorRunMode class" number="43" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="44" precision="empty"/><line any_info="No Anys on this line!" content="" number="45" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x4)" content="        self.__exit_code: ExitCodes = ExitCodes.NoError" number="46" precision="any"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="47" precision="empty"/><line any_info="No Anys on this line!" content="        Exit code of the state machine, which can be modified among the states" number="48" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="49" precision="empty"/><line any_info="No Anys on this line!" content="" number="50" precision="empty"/><line any_info="No Anys on this line!" content="        self.__plugin_type_registry: dict[Type[PluginType], set[PluginType]] = dict()" number="51" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="52" precision="empty"/><line any_info="No Anys on this line!" content="        This member holds all the context entities along their implemented interfaces. It allows" number="53" precision="empty"/><line any_info="No Anys on this line!" content="        simple type based iteration/execution." number="54" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="55" precision="empty"/><line any_info="No Anys on this line!" content="" number="56" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        for nested_instance in self.__operator.get_protected().get_nested_instances().values():" number="57" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x6)" content="            for spec_class in nested_instance.get_protected().get_spec_classes():" number="58" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="                if spec_class not in self.__plugin_type_registry:" number="59" precision="any"/><line any_info="Any Types on this line: &#10;Omitted Generics (x3)&#10;Unimported (x1)" content="                    self.__plugin_type_registry[spec_class] = set()" number="60" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="                self.__plugin_type_registry[spec_class].add(nested_instance)" number="61" precision="any"/><line any_info="No Anys on this line!" content="" number="62" precision="empty"/><line any_info="No Anys on this line!" content="        self.__typed_dependency_graphs: dict[Type[PluginType], list[set[PluginType]]] = dict()" number="63" precision="precise"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="64" precision="empty"/><line any_info="No Anys on this line!" content="        This member holds the nested instances ordered by their resolved dependency list along" number="65" precision="empty"/><line any_info="No Anys on this line!" content="        their types. The key holds the instance type, the value is a list of set, where each list" number="66" precision="empty"/><line any_info="No Anys on this line!" content="        element represents a dependency level i.e., the 0th element holds the instances w/o" number="67" precision="empty"/><line any_info="No Anys on this line!" content="        dependencies, the 1st element holds the instances that are dependent on instances on" number="68" precision="empty"/><line any_info="No Anys on this line!" content="        the 0th level and so on." number="69" precision="empty"/><line any_info="No Anys on this line!" content="        &quot;&quot;&quot;" number="70" precision="empty"/><line any_info="No Anys on this line!" content="" number="71" precision="empty"/><line any_info="No Anys on this line!" content="        for instance_type, instances in self.__plugin_type_registry.items():" number="72" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="            self.__typed_dependency_graphs[instance_type] = resolve_dependency_graph(instances)" number="73" precision="any"/><line any_info="No Anys on this line!" content="" number="74" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_operator(self) -&gt; Operator:" number="75" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return self.__operator" number="76" precision="any"/><line any_info="No Anys on this line!" content="" number="77" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="    def get_execution_mode(self) -&gt; ExecutionMode:" number="78" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x1)" content="        return self.__exec_mode" number="79" precision="any"/><line any_info="No Anys on this line!" content="" number="80" precision="empty"/><line any_info="No Anys on this line!" content="    def get_exit_code(self):" number="81" precision="any"/><line any_info="Any Types on this line: &#10;Unannotated (x1)" content="        return self.__exit_code" number="82" precision="any"/><line any_info="No Anys on this line!" content="" number="83" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Unannotated (x1)" content="    def set_exit_code(self, exit_code: ExitCodes):" number="84" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)" content="        self.__exit_code = exit_code" number="85" precision="any"/><line any_info="No Anys on this line!" content="" number="86" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)&#10;Omitted Generics (x2)" content="    def get_plugin_instances_by_type(self, plugin_type: Type[PluginType]) -&gt; set[PluginType]:" number="87" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x2)&#10;Omitted Generics (x5)" content="        return self.__plugin_type_registry[plugin_type] if plugin_type in self.__plugin_type_registry else set()" number="88" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="89" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)&#10;Omitted Generics (x2)" content="    def get_dependency_graph_by_type(self, plugin_type: Type[PluginType]) -&gt; list[set[PluginType]]:" number="90" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x2)&#10;Omitted Generics (x2)" content="        return self.__typed_dependency_graphs[plugin_type] if plugin_type in self.__plugin_type_registry else []" number="91" precision="imprecise"/><line any_info="No Anys on this line!" content="" number="92" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Omitted Generics (x1)" content="    def for_each_plugin_instances(self, consumer: Callable[[PluginType], None]) -&gt; None:" number="93" precision="precise"/><line any_info="Any Types on this line: &#10;Unimported (x8)" content="        for plugin_instance in self.__operator.get_protected().get_nested_instances().values():" number="94" precision="any"/><line any_info="Any Types on this line: &#10;Unimported (x2)&#10;Omitted Generics (x1)" content="            consumer(plugin_instance)" number="95" precision="any"/><line any_info="No Anys on this line!" content="" number="96" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x2)&#10;Omitted Generics (x2)" content="    def for_each_plugin_objects_with_type(self, plugin_type: Type[PluginType]," number="97" precision="imprecise"/><line any_info="No Anys on this line!" content="                                          consumer: Callable[[PluginType], None]) -&gt; None:" number="98" precision="empty"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Omitted Generics (x1)" content="        if plugin_type in self.__plugin_type_registry:" number="99" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Omitted Generics (x1)" content="            for plugin_instance in self.__plugin_type_registry[plugin_type]:" number="100" precision="imprecise"/><line any_info="Any Types on this line: &#10;Unimported (x1)&#10;Omitted Generics (x1)" content="                consumer(plugin_instance)" number="101" precision="imprecise"/></mypy-report-file>